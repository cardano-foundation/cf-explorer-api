{
	"info": {
		"_postman_id": "c4aefec4-3ece-4579-89b5-efb5ea9024d4",
		"name": "Cardano Explorer API - Phase 1",
		"description": "Cardano Explorer API OpenAPI 3.0\n\nContact Support:\n Name: Cardano\n Email: info@cardano.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28110605",
		"_collection_link": "https://www.postman.com/galactic-crater-624201/workspace/binh-s-workspace/collection/28110605-c4aefec4-3ece-4579-89b5-efb5ea9024d4?action=share&creator=28110605&source=collection_link"
	},
	"item": [
		{
			"name": "api/v1",
			"item": [
				{
					"name": "staking-lifecycle/report",
					"item": [
						{
							"name": "stake-key",
							"item": [
								{
									"name": "{reportId}",
									"item": [
										{
											"name": "Get stake withdrawals by report id",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/withdrawals?page=0&size=20&sort=time,DESC",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"staking-lifecycle",
														"report",
														"stake-key",
														":reportId",
														"withdrawals"
													],
													"query": [
														{
															"key": "page",
															"value": "0",
															"description": "Zero-based page index (0..N)"
														},
														{
															"key": "size",
															"value": "20",
															"description": "The size of the page to be returned"
														},
														{
															"key": "sort",
															"value": "time,DESC",
															"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "15312893",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															},
															{
																"key": "Accept",
																"value": "*/*"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/withdrawals?page=0&size=20&sort=time,DESC",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"staking-lifecycle",
																"report",
																"stake-key",
																":reportId",
																"withdrawals"
															],
															"query": [
																{
																	"key": "page",
																	"value": "0"
																},
																{
																	"key": "size",
																	"value": "20"
																},
																{
																	"key": "sort",
																	"value": "time,DESC"
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "15312893",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "*/*"
														}
													],
													"cookie": [],
													"body": "{\n  \"data\": [\n    {\n      \"txHash\": \"culpa ut\",\n      \"value\": -69762365,\n      \"fee\": -62946009,\n      \"time\": \"1993-07-03T07:44:02.828Z\"\n    },\n    {\n      \"txHash\": \"paria\",\n      \"value\": 10383188,\n      \"fee\": -21845752,\n      \"time\": \"2014-11-25T12:59:17.805Z\"\n    }\n  ],\n  \"totalItems\": 15036848,\n  \"totalPages\": -25312265,\n  \"currentPage\": -41688292\n}"
												}
											]
										},
										{
											"name": "Get wallet activity by report id",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/wallet-activity?page=0&size=20&sort=time,DESC",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"staking-lifecycle",
														"report",
														"stake-key",
														":reportId",
														"wallet-activity"
													],
													"query": [
														{
															"key": "page",
															"value": "0",
															"description": "Zero-based page index (0..N)"
														},
														{
															"key": "size",
															"value": "20",
															"description": "The size of the page to be returned"
														},
														{
															"key": "sort",
															"value": "time,DESC",
															"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "15312893",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															},
															{
																"key": "Accept",
																"value": "*/*"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/wallet-activity?page=0&size=20&sort=time,DESC",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"staking-lifecycle",
																"report",
																"stake-key",
																":reportId",
																"wallet-activity"
															],
															"query": [
																{
																	"key": "page",
																	"value": "0"
																},
																{
																	"key": "size",
																	"value": "20"
																},
																{
																	"key": "sort",
																	"value": "time,DESC"
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "15312893",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "*/*"
														}
													],
													"cookie": [],
													"body": "{\n  \"data\": [\n    {\n      \"txHash\": \"in irure Ut Excepteur\",\n      \"amount\": -89551814,\n      \"fee\": 6622595,\n      \"time\": \"1988-06-01T00:42:36.839Z\",\n      \"type\": \"CERTIFICATE_FEE_PAID\",\n      \"status\": \"FAIL\"\n    },\n    {\n      \"txHash\": \"aliquip nulla occaecat aute\",\n      \"amount\": -39850972,\n      \"fee\": 77946633,\n      \"time\": \"1984-02-28T05:47:05.314Z\",\n      \"type\": \"CERTIFICATE_HOLD_PAID\",\n      \"status\": \"FAIL\"\n    }\n  ],\n  \"totalItems\": -47262404,\n  \"totalPages\": 65351228,\n  \"currentPage\": -20182221\n}"
												}
											]
										},
										{
											"name": "Get stake rewards by report id",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/rewards?page=0&size=20&sort=id,DESC",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"staking-lifecycle",
														"report",
														"stake-key",
														":reportId",
														"rewards"
													],
													"query": [
														{
															"key": "page",
															"value": "0",
															"description": "Zero-based page index (0..N)"
														},
														{
															"key": "size",
															"value": "20",
															"description": "The size of the page to be returned"
														},
														{
															"key": "sort",
															"value": "id,DESC",
															"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "15312893",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															},
															{
																"key": "Accept",
																"value": "*/*"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/rewards?page=0&size=20&sort=id,DESC",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"staking-lifecycle",
																"report",
																"stake-key",
																":reportId",
																"rewards"
															],
															"query": [
																{
																	"key": "page",
																	"value": "0"
																},
																{
																	"key": "size",
																	"value": "20"
																},
																{
																	"key": "sort",
																	"value": "id,DESC"
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "15312893",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "*/*"
														}
													],
													"cookie": [],
													"body": "{\n  \"data\": [\n    {\n      \"epoch\": 33014470,\n      \"time\": \"1996-02-01T23:34:32.083Z\",\n      \"amount\": -91810346\n    },\n    {\n      \"epoch\": -3721057,\n      \"time\": \"2020-09-19T02:47:43.007Z\",\n      \"amount\": -12898685\n    }\n  ],\n  \"totalItems\": -73604225,\n  \"totalPages\": -16329292,\n  \"currentPage\": 56241319\n}"
												}
											]
										},
										{
											"name": "Get stake registrations by report id",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/registrations?page=0&size=20&sort=time,DESC",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"staking-lifecycle",
														"report",
														"stake-key",
														":reportId",
														"registrations"
													],
													"query": [
														{
															"key": "page",
															"value": "0",
															"description": "Zero-based page index (0..N)"
														},
														{
															"key": "size",
															"value": "20",
															"description": "The size of the page to be returned"
														},
														{
															"key": "sort",
															"value": "time,DESC",
															"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "15312893",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															},
															{
																"key": "Accept",
																"value": "*/*"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/registrations?page=0&size=20&sort=time,DESC",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"staking-lifecycle",
																"report",
																"stake-key",
																":reportId",
																"registrations"
															],
															"query": [
																{
																	"key": "page",
																	"value": "0"
																},
																{
																	"key": "size",
																	"value": "20"
																},
																{
																	"key": "sort",
																	"value": "time,DESC"
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "15312893",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "*/*"
														}
													],
													"cookie": [],
													"body": "{\n  \"data\": [\n    {\n      \"txHash\": \"et mollit\",\n      \"fee\": 23684384,\n      \"deposit\": 32012597,\n      \"time\": \"2016-10-07T19:38:14.876Z\"\n    },\n    {\n      \"txHash\": \"aute reprehenderit minim anim\",\n      \"fee\": 65847596,\n      \"deposit\": 64927550,\n      \"time\": \"1958-01-30T14:25:16.071Z\"\n    }\n  ],\n  \"totalItems\": 57542087,\n  \"totalPages\": -77711056,\n  \"currentPage\": -48732260\n}"
												}
											]
										},
										{
											"name": "Export stake key report by id",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/export?exportType=CSV",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"staking-lifecycle",
														"report",
														"stake-key",
														":reportId",
														"export"
													],
													"query": [
														{
															"key": "exportType",
															"value": "CSV"
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "15312893",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															},
															{
																"key": "Accept",
																"value": "*/*"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/export?exportType=CSV",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"staking-lifecycle",
																"report",
																"stake-key",
																":reportId",
																"export"
															],
															"query": [
																{
																	"key": "exportType",
																	"value": "CSV"
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "15312893",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "text",
													"header": [
														{
															"key": "Content-Type",
															"value": "*/*"
														}
													],
													"cookie": [],
													"body": "enim voluptate Excepteur ullamco"
												}
											]
										},
										{
											"name": "Get stake key report detail by report id",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/detail",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"staking-lifecycle",
														"report",
														"stake-key",
														":reportId",
														"detail"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "15312893",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															},
															{
																"key": "Accept",
																"value": "*/*"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/detail",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"staking-lifecycle",
																"report",
																"stake-key",
																":reportId",
																"detail"
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "15312893",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "*/*"
														}
													],
													"cookie": [],
													"body": "{\n  \"id\": 84896448,\n  \"stakeKey\": \"magna sed sint\",\n  \"username\": \"est Ut\",\n  \"reportName\": \"fugiat tempor exercitation adipisicing minim\",\n  \"fromDate\": \"1979-06-19T13:51:53.762Z\",\n  \"toDate\": \"1952-08-16T13:37:50.097Z\",\n  \"isADATransfer\": true,\n  \"isFeesPaid\": true,\n  \"eventRegistration\": true,\n  \"eventDelegation\": true,\n  \"eventRewards\": false,\n  \"eventWithdrawal\": true,\n  \"eventDeregistration\": false,\n  \"status\": \"EXPIRED\",\n  \"type\": \"POOL_ID\",\n  \"createdAt\": \"1992-07-27T19:42:09.594Z\"\n}"
												}
											]
										},
										{
											"name": "Get stake delegations by report id",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/delegations?page=0&size=20&sort=time,DESC",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"staking-lifecycle",
														"report",
														"stake-key",
														":reportId",
														"delegations"
													],
													"query": [
														{
															"key": "page",
															"value": "0",
															"description": "Zero-based page index (0..N)"
														},
														{
															"key": "size",
															"value": "20",
															"description": "The size of the page to be returned"
														},
														{
															"key": "sort",
															"value": "time,DESC",
															"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "15312893",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															},
															{
																"key": "Accept",
																"value": "*/*"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/delegations?page=0&size=20&sort=time,DESC",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"staking-lifecycle",
																"report",
																"stake-key",
																":reportId",
																"delegations"
															],
															"query": [
																{
																	"key": "page",
																	"value": "0"
																},
																{
																	"key": "size",
																	"value": "20"
																},
																{
																	"key": "sort",
																	"value": "time,DESC"
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "15312893",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "*/*"
														}
													],
													"cookie": [],
													"body": "{\n  \"data\": [\n    {\n      \"txHash\": \"sint pariatur ea\",\n      \"outSum\": -69160658,\n      \"fee\": 36433743,\n      \"time\": \"1987-08-13T00:55:16.127Z\"\n    },\n    {\n      \"txHash\": \"deserunt sint c\",\n      \"outSum\": 12673192,\n      \"fee\": 11170256,\n      \"time\": \"1998-06-22T19:52:39.172Z\"\n    }\n  ],\n  \"totalItems\": -8365951,\n  \"totalPages\": 26850706,\n  \"currentPage\": 35880318\n}"
												}
											]
										},
										{
											"name": "Get stake deregistrations by report id",
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/de-registrations?page=0&size=20&sort=time,DESC",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"staking-lifecycle",
														"report",
														"stake-key",
														":reportId",
														"de-registrations"
													],
													"query": [
														{
															"key": "page",
															"value": "0",
															"description": "Zero-based page index (0..N)"
														},
														{
															"key": "size",
															"value": "20",
															"description": "The size of the page to be returned"
														},
														{
															"key": "sort",
															"value": "time,DESC",
															"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "15312893",
															"description": "(Required) "
														}
													]
												}
											},
											"response": [
												{
													"name": "OK",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															},
															{
																"key": "Accept",
																"value": "*/*"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/de-registrations?page=0&size=20&sort=time,DESC",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"api",
																"v1",
																"staking-lifecycle",
																"report",
																"stake-key",
																":reportId",
																"de-registrations"
															],
															"query": [
																{
																	"key": "page",
																	"value": "0"
																},
																{
																	"key": "size",
																	"value": "20"
																},
																{
																	"key": "sort",
																	"value": "time,DESC"
																}
															],
															"variable": [
																{
																	"key": "reportId",
																	"value": "15312893",
																	"description": "(Required) "
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "*/*"
														}
													],
													"cookie": [],
													"body": "{\n  \"data\": [\n    {\n      \"txHash\": \"labore eu\",\n      \"fee\": 23957913,\n      \"deposit\": 20484447,\n      \"time\": \"1979-11-20T17:10:52.694Z\"\n    },\n    {\n      \"txHash\": \"laboris sed Duis culpa\",\n      \"fee\": -94369687,\n      \"deposit\": 93776981,\n      \"time\": \"1959-06-20T21:44:15.257Z\"\n    }\n  ],\n  \"totalItems\": 24592217,\n  \"totalPages\": 69098316,\n  \"currentPage\": 73343224\n}"
												}
											]
										}
									]
								},
								{
									"name": "Generate stake key report",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"stakeKey\": \"aliqua dolore qui\",\n  \"reportName\": \"incididunt consectetur\",\n  \"fromDate\": \"2010-08-25T00:55:29.060Z\",\n  \"toDate\": \"2008-09-16T11:51:15.819Z\",\n  \"isADATransfer\": false,\n  \"isFeesPaid\": true,\n  \"eventRegistration\": true,\n  \"eventDelegation\": false,\n  \"eventRewards\": true,\n  \"eventWithdrawal\": true,\n  \"eventDeregistration\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"staking-lifecycle",
												"report",
												"stake-key"
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"stakeKey\": \"aliqua dolore qui\",\n  \"reportName\": \"incididunt consectetur\",\n  \"fromDate\": \"2010-08-25T00:55:29.060Z\",\n  \"toDate\": \"2008-09-16T11:51:15.819Z\",\n  \"isADATransfer\": false,\n  \"isFeesPaid\": true,\n  \"eventRegistration\": true,\n  \"eventDelegation\": false,\n  \"eventRewards\": true,\n  \"eventWithdrawal\": true,\n  \"eventDeregistration\": true\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"staking-lifecycle",
														"report",
														"stake-key"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": 84896448,\n  \"stakeKey\": \"magna sed sint\",\n  \"username\": \"est Ut\",\n  \"reportName\": \"fugiat tempor exercitation adipisicing minim\",\n  \"fromDate\": \"1979-06-19T13:51:53.762Z\",\n  \"toDate\": \"1952-08-16T13:37:50.097Z\",\n  \"isADATransfer\": true,\n  \"isFeesPaid\": true,\n  \"eventRegistration\": true,\n  \"eventDelegation\": true,\n  \"eventRewards\": false,\n  \"eventWithdrawal\": true,\n  \"eventDeregistration\": false,\n  \"status\": \"EXPIRED\",\n  \"type\": \"POOL_ID\",\n  \"createdAt\": \"1992-07-27T19:42:09.594Z\"\n}"
										}
									]
								},
								{
									"name": "Get stake key report history by stake key",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:stakeKey/history?page=0&size=20&sort=dolore non est&sort=elit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"staking-lifecycle",
												"report",
												"stake-key",
												":stakeKey",
												"history"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Zero-based page index (0..N)"
												},
												{
													"key": "size",
													"value": "20",
													"description": "The size of the page to be returned"
												},
												{
													"key": "sort",
													"value": "dolore non est",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
												},
												{
													"key": "sort",
													"value": "elit",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
												}
											],
											"variable": [
												{
													"key": "stakeKey",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:stakeKey/history?page=0&size=20&sort=ex&sort=nisi de",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"staking-lifecycle",
														"report",
														"stake-key",
														":stakeKey",
														"history"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "20"
														},
														{
															"key": "sort",
															"value": "ex"
														},
														{
															"key": "sort",
															"value": "nisi de"
														}
													],
													"variable": [
														{
															"key": "stakeKey",
															"value": "enim voluptate Excepteur ullamco",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"id\": 2412510,\n      \"stakeKey\": \"reprehenderit aute cillum nulla\",\n      \"username\": \"adipisicing eu\",\n      \"reportName\": \"labore sit adipisicing\",\n      \"fromDate\": \"1956-05-20T02:32:09.417Z\",\n      \"toDate\": \"2023-04-02T19:09:13.578Z\",\n      \"isADATransfer\": false,\n      \"isFeesPaid\": true,\n      \"eventRegistration\": true,\n      \"eventDelegation\": false,\n      \"eventRewards\": true,\n      \"eventWithdrawal\": false,\n      \"eventDeregistration\": true,\n      \"status\": \"EXPIRED\",\n      \"type\": \"POOL_ID\",\n      \"createdAt\": \"1984-04-24T04:54:39.362Z\"\n    },\n    {\n      \"id\": 9574531,\n      \"stakeKey\": \"dolore culpa non aute\",\n      \"username\": \"deserunt irure\",\n      \"reportName\": \"incididunt irure dolor laboris ex\",\n      \"fromDate\": \"1990-04-10T01:02:20.732Z\",\n      \"toDate\": \"1998-11-06T04:51:03.383Z\",\n      \"isADATransfer\": false,\n      \"isFeesPaid\": true,\n      \"eventRegistration\": true,\n      \"eventDelegation\": false,\n      \"eventRewards\": false,\n      \"eventWithdrawal\": false,\n      \"eventDeregistration\": false,\n      \"status\": \"FAILED\",\n      \"type\": \"STAKE_KEY\",\n      \"createdAt\": \"1943-09-07T22:07:51.246Z\"\n    }\n  ],\n  \"totalItems\": 93218971,\n  \"totalPages\": -41856559,\n  \"currentPage\": -75321990\n}"
										}
									]
								},
								{
									"name": "Get all stake key report history",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/history?page=0&size=20&sort=dolore non est&sort=elit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"staking-lifecycle",
												"report",
												"stake-key",
												"history"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Zero-based page index (0..N)"
												},
												{
													"key": "size",
													"value": "20",
													"description": "The size of the page to be returned"
												},
												{
													"key": "sort",
													"value": "dolore non est",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
												},
												{
													"key": "sort",
													"value": "elit",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/history?page=0&size=20&sort=ex&sort=nisi de",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"staking-lifecycle",
														"report",
														"stake-key",
														"history"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "20"
														},
														{
															"key": "sort",
															"value": "ex"
														},
														{
															"key": "sort",
															"value": "nisi de"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"id\": -27437999,\n      \"stakeKey\": \"ipsum in cillum culpa\",\n      \"username\": \"cillum consequat consectetur nulla\",\n      \"reportName\": \"Duis cillum exercitation\",\n      \"fromDate\": \"1988-02-10T23:33:05.206Z\",\n      \"toDate\": \"1945-02-13T09:10:50.171Z\",\n      \"isADATransfer\": false,\n      \"isFeesPaid\": true,\n      \"eventRegistration\": true,\n      \"eventDelegation\": false,\n      \"eventRewards\": false,\n      \"eventWithdrawal\": false,\n      \"eventDeregistration\": true,\n      \"status\": \"GENERATED\",\n      \"type\": \"POOL_ID\",\n      \"createdAt\": \"2013-07-21T18:49:04.688Z\"\n    },\n    {\n      \"id\": 61737638,\n      \"stakeKey\": \"labore Excepteur reprehenderit\",\n      \"username\": \"eu \",\n      \"reportName\": \"dolore ea cupidatat\",\n      \"fromDate\": \"2023-03-16T14:22:17.173Z\",\n      \"toDate\": \"2020-09-29T00:52:08.361Z\",\n      \"isADATransfer\": false,\n      \"isFeesPaid\": true,\n      \"eventRegistration\": false,\n      \"eventDelegation\": false,\n      \"eventRewards\": false,\n      \"eventWithdrawal\": true,\n      \"eventDeregistration\": true,\n      \"status\": \"IN_PROGRESS\",\n      \"type\": \"STAKE_KEY\",\n      \"createdAt\": \"2003-09-18T12:27:02.388Z\"\n    }\n  ],\n  \"totalItems\": -69153606,\n  \"totalPages\": 18172548,\n  \"currentPage\": -44700010\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get report history of stake key and pool id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/dashboard?fromDate=1954-04-24T02:25:02.171Z&toDate=1954-04-24T02:25:02.171Z&reportName=enim voluptate Excepteur ullamco&page=0&size=20&sort=createdAt,DESC",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"staking-lifecycle",
										"report",
										"dashboard"
									],
									"query": [
										{
											"key": "fromDate",
											"value": "1954-04-24T02:25:02.171Z"
										},
										{
											"key": "toDate",
											"value": "1954-04-24T02:25:02.171Z"
										},
										{
											"key": "reportName",
											"value": "enim voluptate Excepteur ullamco"
										},
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)"
										},
										{
											"key": "size",
											"value": "20",
											"description": "The size of the page to be returned"
										},
										{
											"key": "sort",
											"value": "createdAt,DESC",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/dashboard?fromDate=1954-04-24T02:25:02.171Z&toDate=1954-04-24T02:25:02.171Z&reportName=enim voluptate Excepteur ullamco&page=0&size=20&sort=createdAt,DESC",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"staking-lifecycle",
												"report",
												"dashboard"
											],
											"query": [
												{
													"key": "fromDate",
													"value": "1954-04-24T02:25:02.171Z"
												},
												{
													"key": "toDate",
													"value": "1954-04-24T02:25:02.171Z"
												},
												{
													"key": "reportName",
													"value": "enim voluptate Excepteur ullamco"
												},
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "20"
												},
												{
													"key": "sort",
													"value": "createdAt,DESC"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"stakeKeyReportId\": 96893838,\n      \"poolReportId\": -33938569,\n      \"createdAt\": \"1956-08-17T23:31:39.147Z\",\n      \"reportName\": \"do\",\n      \"status\": \"IN_PROGRESS\",\n      \"type\": \"POOL_ID\"\n    },\n    {\n      \"stakeKeyReportId\": -86758754,\n      \"poolReportId\": 3004929,\n      \"createdAt\": \"2008-07-14T16:17:59.549Z\",\n      \"reportName\": \"sint fugiat consequat\",\n      \"status\": \"FAILED\",\n      \"type\": \"POOL_ID\"\n    }\n  ],\n  \"totalItems\": -15336203,\n  \"totalPages\": -63275271,\n  \"currentPage\": 73558877\n}"
								}
							]
						}
					]
				},
				{
					"name": "pool-report",
					"item": [
						{
							"name": "detail/{reportId}",
							"item": [
								{
									"name": "detail Pool Report",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pool-report",
												"detail",
												":reportId"
											],
											"variable": [
												{
													"key": "reportId",
													"value": "15312893",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pool-report",
														"detail",
														":reportId"
													],
													"variable": [
														{
															"key": "reportId",
															"value": "15312893",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": -19149655,\n  \"poolView\": \"adipisicing dolor Duis\",\n  \"isPoolSize\": false,\n  \"isFeesPaid\": true,\n  \"eventRegistration\": true,\n  \"eventDeregistration\": true,\n  \"eventReward\": false,\n  \"eventPoolUpdate\": true,\n  \"beginEpoch\": 90932455,\n  \"endEpoch\": -741993,\n  \"reportHistory\": {\n    \"id\": -64162030,\n    \"storageKey\": \"sed ut eiusmod\",\n    \"reportName\": \"Ut ad Duis\",\n    \"username\": \"ad sit\",\n    \"createdAt\": \"1960-09-14T02:46:37.164Z\",\n    \"uploadedAt\": \"2018-08-19T20:47:21.056Z\",\n    \"status\": \"FAILED\",\n    \"type\": \"POOL_ID\"\n  }\n}"
										}
									]
								},
								{
									"name": "detail Rewards Distribution",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/rewards-distribution?page=0&size=10&sort=dolore non est&sort=elit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pool-report",
												"detail",
												":reportId",
												"rewards-distribution"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Zero-based page index (0..N)"
												},
												{
													"key": "size",
													"value": "10",
													"description": "The size of the page to be returned"
												},
												{
													"key": "sort",
													"value": "dolore non est",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
												},
												{
													"key": "sort",
													"value": "elit",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "15312893",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/rewards-distribution?page=0&size=10&sort=ex&sort=nisi de",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pool-report",
														"detail",
														":reportId",
														"rewards-distribution"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "sort",
															"value": "ex"
														},
														{
															"key": "sort",
															"value": "nisi de"
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "15312893",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"epochNo\": 37655058,\n      \"time\": \"1964-04-17T06:10:48.072Z\",\n      \"amount\": 2920704,\n      \"rewardAccount\": \"reprehende\"\n    },\n    {\n      \"epochNo\": -11148172,\n      \"time\": \"1967-09-24T22:56:06.782Z\",\n      \"amount\": 98434437,\n      \"rewardAccount\": \"quis sed velit\"\n    }\n  ],\n  \"totalItems\": -74641332,\n  \"totalPages\": 70889674,\n  \"currentPage\": 2463363\n}"
										}
									]
								},
								{
									"name": "detail Pool Update",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/pool-update?page=0&size=10&sort=dolore non est&sort=elit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pool-report",
												"detail",
												":reportId",
												"pool-update"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Zero-based page index (0..N)"
												},
												{
													"key": "size",
													"value": "10",
													"description": "The size of the page to be returned"
												},
												{
													"key": "sort",
													"value": "dolore non est",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
												},
												{
													"key": "sort",
													"value": "elit",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "15312893",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/pool-update?page=0&size=10&sort=ex&sort=nisi de",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pool-report",
														"detail",
														":reportId",
														"pool-update"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "sort",
															"value": "ex"
														},
														{
															"key": "sort",
															"value": "nisi de"
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "15312893",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"poolUpdateId\": -96198290,\n      \"poolId\": \"irure\",\n      \"poolName\": \"eiusmod exercitation incididunt ipsum reprehenderit\",\n      \"poolView\": \"anim non\",\n      \"previousPledge\": -61568870,\n      \"previousMargin\": -65935052.29599646,\n      \"txHash\": \"consequat commodo fugiat\",\n      \"time\": \"1978-07-21T07:55:23.118Z\",\n      \"stakeKeys\": [\n        \"in Ut amet\",\n        \"id ad ut eu laboris\"\n      ],\n      \"fee\": -18797988,\n      \"rewardAccount\": \"dolore\",\n      \"vrfKey\": \"magna minim adipisicing eni\",\n      \"pledge\": -71318114,\n      \"margin\": 81788564.27029642,\n      \"cost\": 7113015,\n      \"deposit\": -50784382\n    },\n    {\n      \"poolUpdateId\": -22281579,\n      \"poolId\": \"reprehenderi\",\n      \"poolName\": \"sunt commodo id ullamco laboris\",\n      \"poolView\": \"adipisicing com\",\n      \"previousPledge\": -6738006,\n      \"previousMargin\": 60662772.55283454,\n      \"txHash\": \"reprehenderit ea in\",\n      \"time\": \"2002-09-23T09:09:52.068Z\",\n      \"stakeKeys\": [\n        \"non Duis velit\",\n        \"nulla exercitation\"\n      ],\n      \"fee\": 92496634,\n      \"rewardAccount\": \"culpa\",\n      \"vrfKey\": \"labore ut irure\",\n      \"pledge\": 81952293,\n      \"margin\": -46860334.31406829,\n      \"cost\": 8086187,\n      \"deposit\": -11477847\n    }\n  ],\n  \"totalItems\": 9133956,\n  \"totalPages\": -13874376,\n  \"currentPage\": 19484443\n}"
										}
									]
								},
								{
									"name": "detail Pool Registration",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/pool-registration?page=0&size=10&sort=dolore non est&sort=elit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pool-report",
												"detail",
												":reportId",
												"pool-registration"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Zero-based page index (0..N)"
												},
												{
													"key": "size",
													"value": "10",
													"description": "The size of the page to be returned"
												},
												{
													"key": "sort",
													"value": "dolore non est",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
												},
												{
													"key": "sort",
													"value": "elit",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "15312893",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/pool-registration?page=0&size=10&sort=ex&sort=nisi de",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pool-report",
														"detail",
														":reportId",
														"pool-registration"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "sort",
															"value": "ex"
														},
														{
															"key": "sort",
															"value": "nisi de"
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "15312893",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"poolUpdateId\": -87141281,\n      \"txHash\": \"in quis eiusmod nisi\",\n      \"totalFee\": 75290041,\n      \"time\": \"2020-02-09T23:22:18.963Z\",\n      \"fee\": 23954580,\n      \"stakeKeys\": [\n        \"do aute amet\",\n        \"sed minim consectetur ea\"\n      ],\n      \"deposit\": -34562478\n    },\n    {\n      \"poolUpdateId\": -14550996,\n      \"txHash\": \"non\",\n      \"totalFee\": 34476483,\n      \"time\": \"1986-06-28T16:29:25.658Z\",\n      \"fee\": 958133,\n      \"stakeKeys\": [\n        \"in\",\n        \"et culpa\"\n      ],\n      \"deposit\": 64785009\n    }\n  ],\n  \"totalItems\": 62913652,\n  \"totalPages\": -8502297,\n  \"currentPage\": 78888853\n}"
										}
									]
								},
								{
									"name": "export",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/export?exportType=CSV",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pool-report",
												"detail",
												":reportId",
												"export"
											],
											"query": [
												{
													"key": "exportType",
													"value": "CSV"
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "15312893",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/export?exportType=CSV",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pool-report",
														"detail",
														":reportId",
														"export"
													],
													"query": [
														{
															"key": "exportType",
															"value": "CSV"
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "15312893",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "enim voluptate Excepteur ullamco"
										}
									]
								},
								{
									"name": "detail Epoch Size Pool Report",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/epoch-size?page=0&size=10&sort=dolore non est&sort=elit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pool-report",
												"detail",
												":reportId",
												"epoch-size"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Zero-based page index (0..N)"
												},
												{
													"key": "size",
													"value": "10",
													"description": "The size of the page to be returned"
												},
												{
													"key": "sort",
													"value": "dolore non est",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
												},
												{
													"key": "sort",
													"value": "elit",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "15312893",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/epoch-size?page=0&size=10&sort=ex&sort=nisi de",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pool-report",
														"detail",
														":reportId",
														"epoch-size"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "sort",
															"value": "ex"
														},
														{
															"key": "sort",
															"value": "nisi de"
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "15312893",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"epoch\": \"mollit elit tempor nisi\",\n      \"fee\": 36387157,\n      \"size\": 47395087.46867135\n    },\n    {\n      \"epoch\": \"eiusmod reprehenderit\",\n      \"fee\": 44151972,\n      \"size\": -37198564.72591534\n    }\n  ],\n  \"totalItems\": -63958261,\n  \"totalPages\": -22180993,\n  \"currentPage\": -14671716\n}"
										}
									]
								},
								{
									"name": "detail Deregistration",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/deregistration?page=0&size=10&sort=dolore non est&sort=elit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pool-report",
												"detail",
												":reportId",
												"deregistration"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Zero-based page index (0..N)"
												},
												{
													"key": "size",
													"value": "10",
													"description": "The size of the page to be returned"
												},
												{
													"key": "sort",
													"value": "dolore non est",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
												},
												{
													"key": "sort",
													"value": "elit",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
												}
											],
											"variable": [
												{
													"key": "reportId",
													"value": "15312893",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/deregistration?page=0&size=10&sort=ex&sort=nisi de",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"pool-report",
														"detail",
														":reportId",
														"deregistration"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "10"
														},
														{
															"key": "sort",
															"value": "ex"
														},
														{
															"key": "sort",
															"value": "nisi de"
														}
													],
													"variable": [
														{
															"key": "reportId",
															"value": "15312893",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"poolId\": \"voluptate dolo\",\n      \"poolName\": \"non aute\",\n      \"poolView\": \"voluptate qui consectetur \",\n      \"stakeKeys\": [\n        \"exercitation ullamco\",\n        \"do dolor\"\n      ],\n      \"txHash\": \"laboris Exc\",\n      \"totalFee\": -45652884,\n      \"poolHold\": -3638991,\n      \"time\": \"1990-01-27T15:00:01.386Z\",\n      \"fee\": -7006218,\n      \"retiringEpoch\": 85571442\n    },\n    {\n      \"poolId\": \"Ut\",\n      \"poolName\": \"mollit magna reprehenderit\",\n      \"poolView\": \"officia\",\n      \"stakeKeys\": [\n        \"dolore fugiat non ipsu\",\n        \"commodo nisi consequat\"\n      ],\n      \"txHash\": \"culpa ea reprehenderit Excepteur\",\n      \"totalFee\": 36391849,\n      \"poolHold\": 64767383,\n      \"time\": \"2004-12-05T09:15:17.789Z\",\n      \"fee\": 6173443,\n      \"retiringEpoch\": 67428557\n    }\n  ],\n  \"totalItems\": -26699288,\n  \"totalPages\": 79099749,\n  \"currentPage\": 70974141\n}"
										}
									]
								}
							]
						},
						{
							"name": "create Pool Report",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"reportName\": \"aliqua ea sint laboris\",\n  \"poolId\": \"anim nisi ex fugiat\",\n  \"isPoolSize\": false,\n  \"isFeesPaid\": true,\n  \"eventRegistration\": true,\n  \"eventDeregistration\": false,\n  \"eventReward\": true,\n  \"eventPoolUpdate\": true,\n  \"epochRanges\": [\n    37032638,\n    72779822\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/pool-report/create",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"pool-report",
										"create"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"reportName\": \"reprehenderit\",\n  \"poolId\": \"voluptate fugiat\",\n  \"isPoolSize\": true,\n  \"isFeesPaid\": true,\n  \"eventRegistration\": false,\n  \"eventDeregistration\": false,\n  \"eventReward\": false,\n  \"eventPoolUpdate\": false,\n  \"epochRanges\": [\n    -9987669,\n    58213512\n  ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/pool-report/create",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pool-report",
												"create"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "true"
								}
							]
						},
						{
							"name": "list Pool Report",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/pool-report/list?page=0&size=10&sort=id,DESC",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"pool-report",
										"list"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)"
										},
										{
											"key": "size",
											"value": "10",
											"description": "The size of the page to be returned"
										},
										{
											"key": "sort",
											"value": "id,DESC",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pool-report/list?page=0&size=10&sort=id,DESC",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pool-report",
												"list"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "sort",
													"value": "id,DESC"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"reportId\": -3707879,\n      \"reportName\": \"in fugiat non ad nisi\",\n      \"epochRanges\": [\n        -58738098,\n        -11416136\n      ],\n      \"isPoolSize\": false,\n      \"isFeesPaid\": true,\n      \"eventRegistration\": false,\n      \"eventDeregistration\": false,\n      \"eventReward\": false,\n      \"eventPoolUpdate\": true,\n      \"createdAt\": \"1954-07-07T21:34:33.259Z\",\n      \"status\": \"IN_PROGRESS\"\n    },\n    {\n      \"reportId\": 24213170,\n      \"reportName\": \"in Duis voluptate elit\",\n      \"epochRanges\": [\n        63780749,\n        42400457\n      ],\n      \"isPoolSize\": true,\n      \"isFeesPaid\": true,\n      \"eventRegistration\": false,\n      \"eventDeregistration\": false,\n      \"eventReward\": false,\n      \"eventPoolUpdate\": false,\n      \"createdAt\": \"1967-05-04T17:54:14.512Z\",\n      \"status\": \"EXPIRED\"\n    }\n  ],\n  \"totalItems\": -90748239,\n  \"totalPages\": -74631336,\n  \"currentPage\": -37453764\n}"
								}
							]
						}
					]
				},
				{
					"name": "contracts",
					"item": [
						{
							"name": "Get list contract",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"//Compare static value\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check currentPage value\", function () {\r",
											"    pm.expect(jsonData.currentPage).to.eql(0);\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in response data\", function () {\r",
											"  var number = Object.keys(jsonData.data).length;\r",
											"  pm.expect(number).to.eql(20)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in response data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
											"  var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
											"  var myKeysList = [\"address\", \"txCount\", \"balance\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"//Compare data type\r",
											"pm.test(\"Check data type of the response\", () => {\r",
											"    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].address).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[0].txCount).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].balance).to.be.a(\"number\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/contracts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"contracts"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)",
											"disabled": true
										},
										{
											"key": "size",
											"value": "20",
											"description": "The size of the page to be returned",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "balance,DESC",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/contracts?page=0&size=20&sort=balance,DESC",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"contracts"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "20"
												},
												{
													"key": "sort",
													"value": "balance,DESC"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"address\": \"elit fugiat magna et\",\n      \"txCount\": -96260110,\n      \"balance\": -31166932\n    },\n    {\n      \"address\": \"ea officia culpa\",\n      \"txCount\": 76870377,\n      \"balance\": 78684995\n    }\n  ],\n  \"totalItems\": -86817919,\n  \"totalPages\": -14279308,\n  \"currentPage\": 727956\n}"
								}
							]
						},
						{
							"name": "Verify native scrip contract",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"address\": \"ad Ut\",\n  \"script\": \"est nulla cupidatat\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/contracts/verify/native",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"contracts",
										"verify",
										"native"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"address\": \"ad Ut\",\n  \"script\": \"est nulla cupidatat\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/contracts/verify/native",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"contracts",
												"verify",
												"native"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "true"
								}
							]
						},
						{
							"name": "Get native script of contract",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"\r",
											"//Compare static value\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in response data\", function () {\r",
											"  var number = Object.keys(jsonData).length;\r",
											"  pm.expect(number).to.eql(2)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in response data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
											"  var myKeysList = [\"type\", \"scripts\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData.scripts[0])\r",
											"  var myKeysList = [\"type\", \"keyHash\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"//Compare data type\r",
											"pm.test(\"Check data type of the response\", () => {\r",
											"    pm.expect(jsonData.scripts[0].type).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.scripts[0].keyHash).to.be.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/contracts/:address/script",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"contracts",
										":address",
										"script"
									],
									"variable": [
										{
											"key": "address",
											"value": "addr1w97qr6xfkm9s3m9zq9ffdgz3dum09aw82eyugyfj6ecu42qxavxwy",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/contracts/:address/script",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"contracts",
												":address",
												"script"
											],
											"variable": [
												{
													"key": "address",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "enim voluptate Excepteur ullamco"
								}
							]
						}
					]
				},
				{
					"name": "txs",
					"item": [
						{
							"name": "Get current transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// var stt = \"200\";\r",
											"// stt = pm.variables.get(\"stt\");\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check blockNo value\", function () {\r",
											"    pm.expect(jsonData[0].blockNo).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check fromAddress value\", function () {\r",
											"    pm.expect(jsonData[0].fromAddress).to.be.a(\"Array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check hash value\", function () {\r",
											"    pm.expect(jsonData[0].hash).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check epochNo value\", function () {\r",
											"    pm.expect(jsonData[0].epochNo).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check epochSlotNo value\", function () {\r",
											"    pm.expect(jsonData[0].epochSlotNo).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check slot value\", function () {\r",
											"    pm.expect(jsonData[0].slot).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check time value\", function () {\r",
											"  let moment = require ('moment');\r",
											"    pm.expect(jsonData[0].time).to.include(moment(jsonData[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
											"});\r",
											"\r",
											"pm.test(\"Check status value\", function () {\r",
											"    pm.expect(jsonData[0].status).to.include(\"SUCCESS\");\r",
											"});\r",
											"\r",
											"//Compare data type\r",
											"pm.test(\"Check data type of fromAddress\", () => {\r",
											"  pm.expect(jsonData[0].fromAddress).to.be.a(\"array\");\r",
											"});\r",
											"pm.test\r",
											"(\"Check data type of toAddress\", () => {\r",
											"  pm.expect(jsonData[0].toAddress).to.be.a(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of amount\", () => {\r",
											"  pm.expect(jsonData[0].amount).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
											"  var number = Object.keys(jsonData[0]).length;\r",
											"  pm.expect(number).to.eql(10)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData[0])\r",
											"  var myKeysList = [\"blockNo\", \"fromAddress\", \"toAddress\", \"amount\", \"hash\", \"epochNo\", \"epochSlotNo\", \"slot\", \"time\", \"status\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"//Get value\r",
											"pm.test(\"Hash value exist\",function (){\r",
											"    pm.expect(jsonData[0].hash).not.empty;\r",
											"    pm.environment.set(\"tx_hash_00\", jsonData[0].hash);\r",
											"\r",
											"    pm.expect(jsonData[1].hash).not.empty;\r",
											"    pm.environment.set(\"tx_hash_01\", jsonData[1].hash);\r",
											"\r",
											"    pm.expect(jsonData[2].hash).not.empty;\r",
											"    pm.environment.set(\"tx_hash_02\", jsonData[2].hash);\r",
											"\r",
											"    pm.expect(jsonData[3].hash).not.empty;\r",
											"    pm.environment.set(\"tx_hash_03\", jsonData[3].hash);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Others value exist\",function (){\r",
											"    \r",
											"    //Randome value\r",
											"    var sampleArr = [0,1,2,3]\r",
											"    var randomIndex = Math.floor(Math.random() * sampleArr.length);\r",
											"    console.log(randomIndex);\r",
											"\r",
											"    pm.environment.set(\"tx_hash\", jsonData[randomIndex].hash);\r",
											"    pm.environment.set(\"tx_blockNo\", jsonData[randomIndex].blockNo);\r",
											"    pm.environment.set(\"tx_amount\", jsonData[randomIndex].amount);\r",
											"    pm.environment.set(\"tx_epochNo\", jsonData[randomIndex].epochNo);\r",
											"    pm.environment.set(\"tx_epochSlotNo\", jsonData[randomIndex].epochSlotNo);\r",
											"    pm.environment.set(\"tx_slot\", jsonData[randomIndex].slot);\r",
											"    pm.environment.set(\"tx_time\", jsonData[randomIndex].time);\r",
											"    pm.environment.set(\"tx_status\", jsonData[randomIndex].status);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/txs/current",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"txs",
										"current"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/txs/current",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"txs",
												"current"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"blockNo\": -87698566,\n    \"fromAddress\": [\n      \"commodo culpa occaecat\",\n      \"aute\"\n    ],\n    \"toAddress\": [\n      \"eu elit\",\n      \"Lorem\"\n    ],\n    \"amount\": 31359195.392898798,\n    \"hash\": \"nisi dolor nostrud quis\",\n    \"epochNo\": -5055989,\n    \"epochSlotNo\": 27754186,\n    \"slot\": 52475276,\n    \"time\": \"1998-11-23T12:46:48.587Z\",\n    \"status\": \"SUCCESS\"\n  },\n  {\n    \"blockNo\": 12320595,\n    \"fromAddress\": [\n      \"consequat o\",\n      \"amet esse\"\n    ],\n    \"toAddress\": [\n      \"ut nulla enim labore anim\",\n      \"irure mollit ipsum reprehenderit\"\n    ],\n    \"amount\": 25325724.092760682,\n    \"hash\": \"fugiat Excepteur mollit\",\n    \"epochNo\": 13882772,\n    \"epochSlotNo\": -19223625,\n    \"slot\": -84991653,\n    \"time\": \"1955-04-19T10:03:50.730Z\",\n    \"status\": \"FAIL\"\n  }\n]"
								}
							]
						},
						{
							"name": "Filter transaction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"let time = jsonData.data[0].time;\r",
											"\r",
											"//Compare static value\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check currentPage value\", function () {\r",
											"    pm.expect(jsonData.currentPage).to.eql(0);\r",
											"});\r",
											"\r",
											"//Compare data type\r",
											"pm.test(\"Check data type of the response\", () => {\r",
											"  let moment = require ('moment');\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
											"  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
											"  pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
											"  pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.data[0].hash).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.data[0].blockNo).to.be.a(\"number\");\r",
											"  pm.expect(jsonData.data[0].blockHash).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
											"  pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
											"  pm.expect(jsonData.data[0].slot).to.be.a(\"number\");\r",
											"  pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
											"  pm.expect(time).to.include(moment(time).format('YYYY/MM/DD HH:mm:ss'));\r",
											"  pm.expect(jsonData.data[0].addressesInput).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.data[0].addressesInput[0]).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.data[0].addressesOutput).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.data[0].addressesOutput[0]).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
											"  pm.expect(jsonData.data[0].totalOutput).to.be.a(\"number\");\r",
											"  pm.expect(typeof jsonData.data[0].balance).to.be.oneOf([ 'object', 'number']);\r",
											"  pm.expect(jsonData.data[0].tokens).to.be.an(\"array\");\r",
											"  pm.expect(jsonData.data[0].tokens).to.be.empty;\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in field data\", function () {\r",
											"  var number = Object.keys(jsonData.data[0]).length;\r",
											"  pm.expect(number).to.eql(13)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"//   pm.expect(jsonData.data[0]).to.have.property('hash');\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
											"  var myKeysList = [\"hash\", \"blockNo\", \"blockHash\", \"epochNo\", \"epochSlotNo\", \"slot\", \"time\", \"addressesInput\", \"addressesOutput\", \"fee\", \"totalOutput\", \"balance\", \"tokens\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"//Scenario\r",
											"pm.test(\"Check list of current transaction exist\", function () {\r",
											"var tx_hash_00 = pm.environment.get(\"tx_hash_00\");\r",
											"var tx_hash_01 = pm.environment.get(\"tx_hash_01\");\r",
											"var tx_hash_02 = pm.environment.get(\"tx_hash_02\");\r",
											"var tx_hash_03 = pm.environment.get(\"tx_hash_03\");\r",
											"\r",
											"  var currentTx = [tx_hash_00,tx_hash_01,tx_hash_02,tx_hash_03];\r",
											"  for (let i = 0; i < jsonData.length; i++) {\r",
											"    for (let j = 0; j < currentTx.length; j++) {\r",
											"        pm.expect(jsonData[j].hash).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Compare value between current transaction and filter transaction\", function () {\r",
											"    var tx_hash = pm.environment.get(\"tx_hash\");\r",
											"    var tx_blockNo = pm.environment.get(\"tx_blockNo\");\r",
											"    var tx_amount = pm.environment.get(\"tx_amount\");\r",
											"    var tx_epochNo = pm.environment.get(\"tx_epochNo\");\r",
											"    var tx_epochSlotNo = pm.environment.get(\"tx_epochSlotNo\");\r",
											"    var tx_slot = pm.environment.get(\"tx_slot\");\r",
											"    var tx_time = pm.environment.get(\"tx_time\");    \r",
											"   \r",
											"    let result = jsonData.data.find(a => a.hash === tx_hash);\r",
											"\r",
											"    //Main compare\r",
											"    pm.expect(result.blockNo).to.eql(tx_blockNo);\r",
											"    pm.expect((result.totalOutput/10**6).toFixed(2)).to.eql((tx_amount/10**6).toFixed(2)); \r",
											"    pm.expect(result.epochNo).to.eql(tx_epochNo);\r",
											"    pm.expect(result.epochSlotNo).to.eql(tx_epochSlotNo);\r",
											"    pm.expect(result.slot).to.eql(tx_slot);\r",
											"    pm.expect(result.time).to.contain(tx_time);\r",
											"});\r",
											"\r",
											"pm.test(\"Others value exist\",function (){\r",
											"    var tx_hash = pm.environment.get(\"tx_hash\");\r",
											"\r",
											"    let result = jsonData.data.find(a => a.hash === tx_hash);\r",
											"\r",
											"    pm.environment.set(\"tx_blockHash\", result.blockHash);\r",
											"    pm.environment.set(\"tx_fee\", result.fee);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/txs?page=0&size=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"txs"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "20"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/txs?page=0&size=20&sort=blockId,DESC&sort=blockIndex,DESC",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"txs"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "20"
												},
												{
													"key": "sort",
													"value": "blockId,DESC"
												},
												{
													"key": "sort",
													"value": "blockIndex,DESC"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"hash\": \"laboris occaecat mollit Ut\",\n      \"blockNo\": -26142252,\n      \"blockHash\": \"nostrud ea Excepteur\",\n      \"epochNo\": 115253,\n      \"epochSlotNo\": 93765378,\n      \"slot\": -98534091,\n      \"time\": \"1955-03-16T09:40:13.355Z\",\n      \"addressesInput\": [\n        \"labore ipsum proident\",\n        \"ex aute sunt\"\n      ],\n      \"addressesOutput\": [\n        \"in sint Ut\",\n        \"quis deserunt dolor ad\"\n      ],\n      \"fee\": -58855236,\n      \"totalOutput\": -3655842,\n      \"balance\": 49990898,\n      \"tokens\": [\n        {\n          \"addressId\": -26324764,\n          \"address\": \"enim mollit in tempor dolor\",\n          \"policy\": \"sunt\",\n          \"metadata\": {\n            \"url\": \"minim\",\n            \"ticker\": \"aute occaecat Excepteur\",\n            \"decimals\": 75549055,\n            \"logo\": \"anim non eiusmod\",\n            \"description\": \"commodo ex dolore\"\n          },\n          \"name\": \"et\",\n          \"displayName\": \"sed Duis adipisi\",\n          \"fingerprint\": \"ut\",\n          \"quantity\": 80339018\n        },\n        {\n          \"addressId\": -75687155,\n          \"address\": \"mollit dolore anim\",\n          \"policy\": \"exercitation\",\n          \"metadata\": {\n            \"url\": \"irure Excepteur\",\n            \"ticker\": \"ipsum\",\n            \"decimals\": 70528507,\n            \"logo\": \"est commodo\",\n            \"description\": \"tempor Lorem\"\n          },\n          \"name\": \"id veniam labore minim proident\",\n          \"displayName\": \"amet\",\n          \"fingerprint\": \"do Ut mollit est\",\n          \"quantity\": -44502563\n        }\n      ]\n    },\n    {\n      \"hash\": \"\",\n      \"blockNo\": 30849682,\n      \"blockHash\": \"Ut est exercitation non sunt\",\n      \"epochNo\": 14568455,\n      \"epochSlotNo\": 64904254,\n      \"slot\": 25728269,\n      \"time\": \"1950-04-20T07:11:23.470Z\",\n      \"addressesInput\": [\n        \"minim ipsum nostrud dolor\",\n        \"consectetur ipsum laborum sit dolore\"\n      ],\n      \"addressesOutput\": [\n        \"minim nisi qui ipsum veniam\",\n        \"anim nisi\"\n      ],\n      \"fee\": 50350566,\n      \"totalOutput\": 81570785,\n      \"balance\": -65174464,\n      \"tokens\": [\n        {\n          \"addressId\": 60983403,\n          \"address\": \"commodo occaecat\",\n          \"policy\": \"sunt dolor\",\n          \"metadata\": {\n            \"url\": \"ad qui mollit officia\",\n            \"ticker\": \"minim fugiat occaecat nostrud\",\n            \"decimals\": -25184499,\n            \"logo\": \"voluptate ull\",\n            \"description\": \"esse elit dolore\"\n          },\n          \"name\": \"mollit dolor Ut ipsu\",\n          \"displayName\": \"dolore dolore esse consequat ut\",\n          \"fingerprint\": \"incididunt enim elit in\",\n          \"quantity\": -85286660\n        },\n        {\n          \"addressId\": -76069871,\n          \"address\": \"incididunt vel\",\n          \"policy\": \"culpa dolore pariatur amet sunt\",\n          \"metadata\": {\n            \"url\": \"laboris ad pariatu\",\n            \"ticker\": \"ut ad fugiat voluptate\",\n            \"decimals\": -86844723,\n            \"logo\": \"Duis incididunt laboris sint\",\n            \"description\": \"aute\"\n          },\n          \"name\": \"minim\",\n          \"displayName\": \"Duis cupidatat p\",\n          \"fingerprint\": \"velit nostrud in quis\",\n          \"quantity\": -71091370\n        }\n      ]\n    }\n  ],\n  \"totalItems\": 60413886,\n  \"totalPages\": -13414901,\n  \"currentPage\": 5055465\n}"
								}
							]
						},
						{
							"name": "Get transaction detail by hash",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// var stt = \"200\";\r",
											"// stt = pm.variables.get(\"stt\");\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"// pm.test(\"Status code is 400\", function () {\r",
											"//     pm.response.to.have.status(400);\r",
											"// });\r",
											"\r",
											"pm.test(\"Check blockNo value\", function () {\r",
											"    pm.expect(jsonData.tx.blockNo).to.eql(pm.environment.get(\"tx_blockNo\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check blockHash value\", function () {\r",
											"    pm.expect(jsonData.tx.blockHash).to.include(pm.environment.get(\"tx_blockHash\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check epochNo value\", function () {\r",
											"    pm.expect(jsonData.tx.epochNo).to.eql(pm.environment.get(\"tx_epochNo\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check epochSlot value\", function () {\r",
											"    pm.expect(jsonData.tx.epochSlot).to.eql(pm.environment.get(\"tx_epochSlotNo\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check maxEpochSlot value\", function () {\r",
											"    pm.expect(jsonData.tx.maxEpochSlot).to.eql(432000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check fee value\", function () {\r",
											"    pm.expect(jsonData.tx.fee).to.eql(pm.environment.get(\"tx_fee\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check totalOutput value\", function () {\r",
											"    pm.expect((jsonData.tx.totalOutput/10**6).toFixed(2)).to.eql((pm.environment.get(\"tx_amount\")/10**6).toFixed(2));\r",
											"});\r",
											"\r",
											"// pm.test(\"Check stakeAddress value\", function () {\r",
											"//     pm.expect(jsonData.summary.stakeAddress[0].address).to.include(\"stake1u9nyda87zzkaztl6lkjpur6qh2u44ctqd07cfta0km68jss2f6cvw\");\r",
											"// });\r",
											"\r",
											"// pm.test(\"Check stakeAddress value\", function () {\r",
											"//     pm.expect(jsonData.summary.stakeAddress[1].address).to.include(\"stake1u9f9v0z5zzlldgx58n8tklphu8mf7h4jvp2j2gddluemnssjfnkzz\");\r",
											"// });\r",
											"\r",
											"\r",
											"//Compare data type\r",
											"pm.test(\"Check data type of confirmation\", () => {\r",
											"  pm.expect(jsonData.tx.confirmation).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
											"  var number = Object.keys(jsonData).length;\r",
											"  pm.expect(number).to.eql(16)\r",
											"});\r",
											"\r",
											"pm.test(\"Check number of contributions in field data level 2\", function () {\r",
											"  var number = Object.keys(jsonData.tx).length;\r",
											"  pm.expect(number).to.eql(11)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
											"  var myKeysList = [\"tx\", \"summary\", \"contracts\", \"collaterals\", \"notes\", \"withdrawals\", \"delegations\", \"mints\", \"stakeCertificates\", \"poolCertificates\", \"protocols\", \"previousProtocols\", \"instantaneousRewards\", \"metadataHash\", \"metadata\", \"utxOs\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check name of contributions in tx data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData.tx)\r",
											"  var myKeysList = [\"hash\", \"time\", \"blockNo\", \"blockHash\", \"epochSlot\", \"maxEpochSlot\", \"epochNo\", \"status\", \"confirmation\", \"fee\", \"totalOutput\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check name of contributions in summary data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData.summary.stakeAddress[0])\r",
											"  var myKeysList = [\"address\", \"value\", \"tokens\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check name of contributions in summary data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData.utxOs)\r",
											"  var myKeysList = [\"inputs\", \"outputs\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/txs/{{tx_hash}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"txs",
										"{{tx_hash}}"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/txs/:hash",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"txs",
												":hash"
											],
											"variable": [
												{
													"key": "hash",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) Hash value of transaction"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"tx\": {\n    \"hash\": \"nostrud laborum laboris\",\n    \"time\": \"2018-02-24T03:08:11.583Z\",\n    \"blockNo\": 39000018,\n    \"blockHash\": \"deserunt ex irure ullamco\",\n    \"epochSlot\": 25921623,\n    \"maxEpochSlot\": 14816159,\n    \"epochNo\": -58822797,\n    \"status\": \"PENDING\",\n    \"confirmation\": 45560009,\n    \"fee\": -86651620,\n    \"totalOutput\": 91690877\n  },\n  \"summary\": {\n    \"stakeAddress\": [\n      {\n        \"address\": \"non nulla \",\n        \"index\": \"laboris laborum\",\n        \"txHash\": \"est sed\",\n        \"value\": -12356699,\n        \"assetId\": \"dolore sit laboris\",\n        \"tokens\": [\n          {\n            \"assetName\": \"non quis\",\n            \"assetQuantity\": 76901813,\n            \"assetId\": \"sint cillum nisi deserunt\",\n            \"policy\": \"in nisi ut\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"officia ex sit ea\",\n            \"assetQuantity\": 64780161,\n            \"assetId\": \"officia Ut culpa\",\n            \"policy\": \"ex\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"dolor sint\"\n      },\n      {\n        \"address\": \"dolor et ut laboris\",\n        \"index\": \"aute ad\",\n        \"txHash\": \"fugiat officia nostrud\",\n        \"value\": -52906994,\n        \"assetId\": \"tempor deserunt\",\n        \"tokens\": [\n          {\n            \"assetName\": \"sit elit\",\n            \"assetQuantity\": 26318873,\n            \"assetId\": \"Lorem proident dolor id Excepteur\",\n            \"policy\": \"veniam ut \",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"et minim Ut elit officia\",\n            \"assetQuantity\": -68478910,\n            \"assetId\": \"cillum\",\n            \"policy\": \"anim proident\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"velit nisi\"\n      }\n    ]\n  },\n  \"contracts\": [\n    {\n      \"contract\": \"do elit\"\n    },\n    {\n      \"contract\": \"minim irure quis commodo exercitation\"\n    }\n  ],\n  \"collaterals\": {\n    \"collateralInputResponses\": [\n      {\n        \"address\": \"incididunt officia Ut sunt\",\n        \"index\": \"cillum ut Excepteur magna\",\n        \"txHash\": \"deserunt\",\n        \"value\": 80710282,\n        \"assetId\": \"est nostrud\",\n        \"tokens\": [\n          {\n            \"assetName\": \"dolore dolor est sunt\",\n            \"assetQuantity\": -99598700,\n            \"assetId\": \"minim Lorem\",\n            \"policy\": \"exercitation ipsum\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"officia\",\n            \"assetQuantity\": 94856757,\n            \"assetId\": \"cupidatat sint\",\n            \"policy\": \"dolore occaecat et\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"dolor\"\n      },\n      {\n        \"address\": \"Ut est\",\n        \"index\": \"cupidatat velit consectetur eiusmod laboris\",\n        \"txHash\": \"dolor non commodo incididunt\",\n        \"value\": -37550852,\n        \"assetId\": \"et dolor esse aute sit\",\n        \"tokens\": [\n          {\n            \"assetName\": \"eu\",\n            \"assetQuantity\": -95341916,\n            \"assetId\": \"est non labore ad nisi\",\n            \"policy\": \"magna cillum esse\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"est elit sint ipsum\",\n            \"assetQuantity\": 14308195,\n            \"assetId\": \"labore dolor id\",\n            \"policy\": \"ex dolor officia anim commodo\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"magna laborum\"\n      }\n    ],\n    \"collateralOutputResponses\": [\n      {\n        \"address\": \"deserunt qui Duis\",\n        \"index\": \"labor\",\n        \"txHash\": \"cupidatat sunt ea\",\n        \"value\": -69141579,\n        \"assetId\": \"proident\",\n        \"tokens\": [\n          {\n            \"assetName\": \"labore adipisicing in dolor do\",\n            \"assetQuantity\": -65262883,\n            \"assetId\": \"ut tempor minim esse sunt\",\n            \"policy\": \"nisi\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"ullamco sunt\",\n            \"assetQuantity\": -67540790,\n            \"assetId\": \"do reprehenderit Excepteur\",\n            \"policy\": \"sint commodo\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"commodo culpa\"\n      },\n      {\n        \"address\": \"ipsum cupidatat incididunt\",\n        \"index\": \"cupidatat exercitation aliquip nisi\",\n        \"txHash\": \"Duis aute\",\n        \"value\": -20447685,\n        \"assetId\": \"labore Ut mollit ea\",\n        \"tokens\": [\n          {\n            \"assetName\": \"anim pariatur\",\n            \"assetQuantity\": 49199255,\n            \"assetId\": \"magna Excepteur laborum\",\n            \"policy\": \"eiusmod sit\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"eiusmod amet ut\",\n            \"assetQuantity\": 13419767,\n            \"assetId\": \"commodo\",\n            \"policy\": \"consequat id dolor aliqua nulla\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"dolo\"\n      }\n    ]\n  },\n  \"notes\": [\n    {\n      \"note\": \"veniam magna qui ipsum dolor\"\n    },\n    {\n      \"note\": \"nostrud sed incididunt id ea\"\n    }\n  ],\n  \"withdrawals\": [\n    {\n      \"stakeAddressFrom\": \"nisi ipsum\",\n      \"addressTo\": [\n        \"occaecat irure fugiat incididunt\",\n        \"et in nulla\"\n      ],\n      \"amount\": -24647262\n    },\n    {\n      \"stakeAddressFrom\": \"ex laborum dolor dolore\",\n      \"addressTo\": [\n        \"dolor deserunt\",\n        \"anim ipsum enim\"\n      ],\n      \"amount\": 76401435\n    }\n  ],\n  \"delegations\": [\n    {\n      \"address\": \"eiusmod occaecat\",\n      \"poolId\": \"ut ipsum cupidatat\"\n    },\n    {\n      \"address\": \"aute ex\",\n      \"poolId\": \"minim quis dolor ad\"\n    }\n  ],\n  \"mints\": [\n    {\n      \"assetName\": \"et dolore\",\n      \"assetQuantity\": 37808196,\n      \"assetId\": \"culpa commodo ipsum Excepteur\",\n      \"policy\": \"mollit est cillum magna non\",\n      \"metadata\": {\n        \"url\": \"velit Excepteur dolor\",\n        \"ticker\": \"consequat esse officia\",\n        \"decimals\": 69670843,\n        \"logo\": \"officia voluptate\",\n        \"description\": \"elit voluptate proident\"\n      }\n    },\n    {\n      \"assetName\": \"cillum\",\n      \"assetQuantity\": 84682726,\n      \"assetId\": \"aliquip occaecat exercitation\",\n      \"policy\": \"ex laboris i\",\n      \"metadata\": {\n        \"url\": \"in sit dolore velit\",\n        \"ticker\": \"elit i\",\n        \"decimals\": 60143156,\n        \"logo\": \"laborum\",\n        \"description\": \"reprehenderit aliquip irure dolor\"\n      }\n    }\n  ],\n  \"protocols\": {\n    \"minFeeA\": {},\n    \"minFeeB\": {},\n    \"maxBlockSize\": {},\n    \"maxTxSize\": {},\n    \"maxBhSize\": {},\n    \"keyDeposit\": {},\n    \"poolDeposit\": {},\n    \"maxEpoch\": {},\n    \"optimalPoolCount\": {},\n    \"minUtxoValue\": {},\n    \"minPoolCost\": {},\n    \"maxTxExMem\": {},\n    \"maxTxExSteps\": {},\n    \"maxBlockExMem\": {},\n    \"maxBlockExSteps\": {},\n    \"maxValSize\": {},\n    \"coinsPerUtxoSize\": {},\n    \"influence\": {},\n    \"monetaryExpandRate\": {},\n    \"treasuryGrowthRate\": {},\n    \"decentralisation\": {},\n    \"priceMem\": {},\n    \"priceStep\": {},\n    \"protocolMajor\": {},\n    \"protocolMinor\": {},\n    \"collateralPercent\": {},\n    \"maxCollateralInputs\": {},\n    \"entropy\": {},\n    \"costModel\": {}\n  },\n  \"stakeCertificates\": [\n    {\n      \"stakeAddress\": \"enim esse labore\",\n      \"type\": \"STAKE_DEREGISTRATION\"\n    },\n    {\n      \"stakeAddress\": \"tempor quis exer\",\n      \"type\": \"STAKE_DEREGISTRATION\"\n    }\n  ],\n  \"poolCertificates\": [\n    {\n      \"poolId\": \"dolor nostrud ipsum sit\",\n      \"epoch\": 39992826,\n      \"vrfKey\": \"Lorem cupidatat id eiusmod voluptate\",\n      \"rewardAccount\": \"veniam\",\n      \"poolOwners\": [\n        \"in nulla\",\n        \"eiusmod\"\n      ],\n      \"metadataHash\": \"fugiat dolor enim irure\",\n      \"metadataUrl\": \"qu\",\n      \"margin\": 73906917.11426273,\n      \"cost\": -28342474,\n      \"pledge\": 3626040,\n      \"relays\": [\n        {\n          \"dnsName\": \"irure in deserunt\",\n          \"dnsSrvName\": \"cillum do\",\n          \"ipv4\": \"fugiat esse\",\n          \"ipv6\": \"fugiat sunt \",\n          \"port\": -63030067\n        },\n        {\n          \"dnsName\": \"adipisicing laboris ipsum\",\n          \"dnsSrvName\": \"et\",\n          \"ipv4\": \"est laboris ut dolore enim\",\n          \"ipv6\": \"ullamco\",\n          \"port\": 51604860\n        }\n      ],\n      \"type\": \"STAKE_DEREGISTRATION\"\n    },\n    {\n      \"poolId\": \"amet est occaecat\",\n      \"epoch\": 3052835,\n      \"vrfKey\": \"voluptate in ipsum ex\",\n      \"rewardAccount\": \"quis tempor proident\",\n      \"poolOwners\": [\n        \"ea aliqua enim\",\n        \"aliqua Duis \"\n      ],\n      \"metadataHash\": \"in aliqua est ex\",\n      \"metadataUrl\": \"tempor reprehenderit\",\n      \"margin\": -83052879.53952156,\n      \"cost\": 62567059,\n      \"pledge\": -88260869,\n      \"relays\": [\n        {\n          \"dnsName\": \"cupidatat quis culpa\",\n          \"dnsSrvName\": \"non Lorem ut amet\",\n          \"ipv4\": \"consectetur est in\",\n          \"ipv6\": \"veniam nulla\",\n          \"port\": -99901569\n        },\n        {\n          \"dnsName\": \"velit id in occaecat\",\n          \"dnsSrvName\": \"deserunt consectetur fugiat qui\",\n          \"ipv4\": \"labore Ut laborum ea\",\n          \"ipv6\": \"incididunt\",\n          \"port\": 2713541\n        }\n      ],\n      \"type\": \"STAKE_REGISTRATION\"\n    }\n  ],\n  \"previousProtocols\": {\n    \"minFeeA\": {},\n    \"minFeeB\": {},\n    \"maxBlockSize\": {},\n    \"maxTxSize\": {},\n    \"maxBhSize\": {},\n    \"keyDeposit\": {},\n    \"poolDeposit\": {},\n    \"maxEpoch\": {},\n    \"optimalPoolCount\": {},\n    \"minUtxoValue\": {},\n    \"minPoolCost\": {},\n    \"maxTxExMem\": {},\n    \"maxTxExSteps\": {},\n    \"maxBlockExMem\": {},\n    \"maxBlockExSteps\": {},\n    \"maxValSize\": {},\n    \"coinsPerUtxoSize\": {},\n    \"influence\": {},\n    \"monetaryExpandRate\": {},\n    \"treasuryGrowthRate\": {},\n    \"decentralisation\": {},\n    \"priceMem\": {},\n    \"priceStep\": {},\n    \"protocolMajor\": {},\n    \"protocolMinor\": {},\n    \"collateralPercent\": {},\n    \"maxCollateralInputs\": {},\n    \"entropy\": {},\n    \"costModel\": {}\n  },\n  \"utxOs\": {\n    \"inputs\": [\n      {\n        \"address\": \"incididunt Duis cillum\",\n        \"index\": \"velit anim\",\n        \"txHash\": \"reprehenderit exercitation labore dolor\",\n        \"value\": 86452714,\n        \"assetId\": \"aute ad magna nulla occaecat\",\n        \"tokens\": [\n          {\n            \"assetName\": \"veniam\",\n            \"assetQuantity\": 6023488,\n            \"assetId\": \"consequat dolor labore ad\",\n            \"policy\": \"minim laborum non\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"laboris mollit consectetur occaecat\",\n            \"assetQuantity\": -45385830,\n            \"assetId\": \"sunt commodo Ut\",\n            \"policy\": \"cillum consectetur aliqua\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"culpa dolore\"\n      },\n      {\n        \"address\": \"ipsum consequat Ut\",\n        \"index\": \"proident eu\",\n        \"txHash\": \"consequat\",\n        \"value\": -65452743,\n        \"assetId\": \"irure do\",\n        \"tokens\": [\n          {\n            \"assetName\": \"ex proident\",\n            \"assetQuantity\": 25606998,\n            \"assetId\": \"repreh\",\n            \"policy\": \"dolor nostrud in non esse\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"esse\",\n            \"assetQuantity\": -45066563,\n            \"assetId\": \"Lorem minim nulla exercitation\",\n            \"policy\": \"Excepteur labore amet ut\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"officia aliquip\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"Ut Duis\",\n        \"index\": \"in laboris esse\",\n        \"txHash\": \"culpa\",\n        \"value\": 68557611,\n        \"assetId\": \"eu fugiat\",\n        \"tokens\": [\n          {\n            \"assetName\": \"ipsum officia incididunt mollit eiusmod\",\n            \"assetQuantity\": -92989460,\n            \"assetId\": \"tempor\",\n            \"policy\": \"adipisicing consequat labore quis fugiat\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"nulla\",\n            \"assetQuantity\": -40828233,\n            \"assetId\": \"deserunt officia proident\",\n            \"policy\": \"tempor consectetur\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"laborum sint ad tempor\"\n      },\n      {\n        \"address\": \"nulla elit in Lorem\",\n        \"index\": \"mollit\",\n        \"txHash\": \"Lorem anim \",\n        \"value\": 4564961,\n        \"assetId\": \"sed adipisicing\",\n        \"tokens\": [\n          {\n            \"assetName\": \"incididunt\",\n            \"assetQuantity\": 50993765,\n            \"assetId\": \"esse fugiat\",\n            \"policy\": \"anim consectetur eu\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"aliqua enim eiusmod\",\n            \"assetQuantity\": 29044517,\n            \"assetId\": \"nulla\",\n            \"policy\": \"cillum in ea\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"fugiat ut\"\n      }\n    ]\n  }\n}"
								}
							]
						},
						{
							"name": "Get transaction chart (1D , 1W, 2W, 1M)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// var stt = \"200\";\r",
											"// stt = pm.variables.get(\"stt\");\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"// pm.test(\"Status code is 400\", function () {\r",
											"//     pm.response.to.have.status(400);\r",
											"// });\r",
											"\r",
											"//Compare data type\r",
											"pm.test(\"Check data type of date\", () => {\r",
											"    let moment = require ('moment');\r",
											"  pm.expect(jsonData[0].date).to.include(moment(jsonData[0].date).format('YYYY/MM/DD HH:mm:ss'));\r",
											"});\r",
											"\r",
											"pm.test\r",
											"(\"Check data type of simpleTransactions\", () => {\r",
											"  pm.expect(jsonData[0].simpleTransactions).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of smartContract\", () => {\r",
											"  pm.expect(jsonData[0].smartContract).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of metadata\", () => {\r",
											"  pm.expect(jsonData[0].metadata).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
											"  var number = Object.keys(jsonData[0]).length;\r",
											"  pm.expect(number).to.eql(4)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData[0])\r",
											"  var myKeysList = [\"date\", \"simpleTransactions\", \"smartContract\", \"metadata\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/txs/graph/:range",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"txs",
										"graph",
										":range"
									],
									"variable": [
										{
											"key": "range",
											"value": "ONE_WEEK",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/txs/graph/:range",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"txs",
												"graph",
												":range"
											],
											"variable": [
												{
													"key": "range",
													"value": "TWO_WEEK",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"date\": \"1948-07-21T20:44:59.895Z\",\n    \"simpleTransactions\": 64919880,\n    \"smartContract\": 95993749,\n    \"metadata\": 3957355\n  },\n  {\n    \"date\": \"1980-03-16T01:47:38.710Z\",\n    \"simpleTransactions\": -15374265,\n    \"smartContract\": 9472330,\n    \"metadata\": 2823739\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "tokens",
					"item": [
						{
							"name": "{tokenId}",
							"item": [
								{
									"name": "Filter token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 5000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});\r",
													"\r",
													"pm.test(\"Check currentPage value\", function () {\r",
													"    pm.expect(jsonData.currentPage).to.eql(0);\r",
													"});\r",
													"\r",
													"//Compare data type\r",
													"pm.test(\"Check data type of name\", () => {\r",
													"  pm.expect(jsonData.data[0].name).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of displayName\", () => {\r",
													"  pm.expect(jsonData.data[0].displayName).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of policy\", () => {\r",
													"  pm.expect(jsonData.data[0].policy).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of fingerprint\", () => {\r",
													"  pm.expect(jsonData.data[0].fingerprint).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of txCount\", () => {\r",
													"  pm.expect(jsonData.data[0].txCount).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of supply\", () => {\r",
													"  pm.expect(jsonData.data[0].supply).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of volumeIn24h\", () => {\r",
													"  pm.expect(jsonData.data[0].volumeIn24h).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of totalVolume\", () => {\r",
													"  pm.expect(jsonData.data[0].totalVolume).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of numberOfHolders\", () => {\r",
													"  pm.expect(jsonData.data[0].numberOfHolders).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of createdOn\", () => {\r",
													"        let moment = require ('moment');\r",
													"  pm.expect(jsonData.data[0].createdOn).to.include(moment(jsonData.data[0].createdOn).format('YYYY/MM/DD HH:mm:ss'));\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of totalItems\", () => {\r",
													"  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of totalPages\", () => {\r",
													"  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Check data type of totalItems\", () => {\r",
													"  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of totalPages\", () => {\r",
													"  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"//Count total contribution\r",
													"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
													"  var number = Object.keys(jsonData).length;\r",
													"  pm.expect(number).to.eql(4)\r",
													"});\r",
													"\r",
													"pm.test(\"Check number of contributions in field data level 2\", function () {\r",
													"  var number = Object.keys(jsonData.data).length;\r",
													"  pm.expect(number).to.eql(10)\r",
													"});\r",
													"\r",
													"//Check name\r",
													"pm.test(\"Check name of contributions in field data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
													"  var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Check name of contributions in data data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
													"  var myKeysList = [\"name\", \"displayName\", \"policy\", \"fingerprint\", \"txCount\", \"supply\", \"volumeIn24h\",\"totalVolume\", \"numberOfHolders\", \"createdOn\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"//Check scenario\r",
													"pm.test(\"Others value exist\",function (){\r",
													"    \r",
													"    //Randome value 0-19\r",
													"    var sampleArr = [0,1,2,3,4,5,6,7,8,9]\r",
													"    var randomIndex = Math.floor(Math.random() * sampleArr.length);\r",
													"    console.log(randomIndex);\r",
													"    \r",
													"    pm.environment.set(\"token_data_txCount\", jsonData.data[randomIndex].txCount)\r",
													"    pm.environment.set(\"token_data_fingerprint\", jsonData.data[randomIndex].fingerprint)\r",
													"\r",
													"    pm.environment.set(\"token_name\", jsonData.data[randomIndex].name);\r",
													"    pm.environment.set(\"token_displayName\", jsonData.data[randomIndex].displayName);\r",
													"    pm.environment.set(\"token_policy\", jsonData.data[randomIndex].policy);\r",
													"    pm.environment.set(\"token_fingerprint\", jsonData.data[randomIndex].fingerprint);\r",
													"    pm.environment.set(\"token_txCount\", jsonData.data[randomIndex].txCount);\r",
													"    pm.environment.set(\"token_supply\", jsonData.data[randomIndex].supply);\r",
													"    pm.environment.set(\"token_volumeIn24h\", jsonData.data[randomIndex].volumeIn24h);\r",
													"    pm.environment.set(\"token_totalVolume\", jsonData.data[randomIndex].totalVolume);\r",
													"    pm.environment.set(\"token_numberOfHolders\", jsonData.data[randomIndex].numberOfHolders);\r",
													"    pm.environment.set(\"token_createdOn\", jsonData.data[randomIndex].createdOn);\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/tokens?page=0&size=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"tokens"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Zero-based page index (0..N)"
												},
												{
													"key": "size",
													"value": "10",
													"description": "The size of the page to be returned"
												},
												{
													"key": "sort",
													"value": "supply,DESC",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "txCount,DESC",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/tokens?page=0&size=20&sort=supply,DESC&sort=txCount,DESC",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"tokens"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "20"
														},
														{
															"key": "sort",
															"value": "supply,DESC"
														},
														{
															"key": "sort",
															"value": "txCount,DESC"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"id\": -48028014,\n      \"name\": \"commodo Excepte\",\n      \"displayName\": \"sint in magna non\",\n      \"policy\": \"proident id enim\",\n      \"fingerprint\": \"ut est in\",\n      \"txCount\": 59650504,\n      \"supply\": \"nisi deserunt sed\",\n      \"volumeIn24h\": \"id est commodo\",\n      \"totalVolume\": \"cillum sunt officia Lorem\",\n      \"numberOfHolders\": 58874026,\n      \"createdOn\": \"2004-07-06T06:19:43.072Z\",\n      \"metadata\": {\n        \"url\": \"aliquip ad\",\n        \"ticker\": \"velit dolore sit\",\n        \"decimals\": 33027460,\n        \"logo\": \"consectetur\",\n        \"description\": \"eiusmod tempor\"\n      }\n    },\n    {\n      \"id\": 93762100,\n      \"name\": \"exercitation in laborum aliquip\",\n      \"displayName\": \"sit cillum consequat\",\n      \"policy\": \"commodo ipsum tempor\",\n      \"fingerprint\": \"dolor\",\n      \"txCount\": -49335603,\n      \"supply\": \"et sed ut\",\n      \"volumeIn24h\": \"mollit culpa officia aute magna\",\n      \"totalVolume\": \"commodo ad dolor eu\",\n      \"numberOfHolders\": 16182956,\n      \"createdOn\": \"1969-10-29T12:18:21.392Z\",\n      \"metadata\": {\n        \"url\": \"dolor minim ut exercitation laborum\",\n        \"ticker\": \"amet eiusmod\",\n        \"decimals\": -8806910,\n        \"logo\": \"Ut proident consectetur sed\",\n        \"description\": \"ex\"\n      }\n    }\n  ],\n  \"totalItems\": 98576305,\n  \"totalPages\": 43181628,\n  \"currentPage\": 47532177\n}"
										}
									]
								},
								{
									"name": "Filter transaction by token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 5000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});\r",
													"\r",
													"pm.test(\"Check currentPage value\", function () {\r",
													"    pm.expect(jsonData.currentPage).to.eql(0);\r",
													"});\r",
													"\r",
													"//Compare data type\r",
													"pm.test(\"Check data type of hash\", () => {\r",
													"  pm.expect(jsonData.data[0].hash).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of blockNo\", () => {\r",
													"  pm.expect(jsonData.data[0].blockNo).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of blockHash\", () => {\r",
													"  pm.expect(jsonData.data[0].blockHash).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of epochNo\", () => {\r",
													"  pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of epochSlotNo\", () => {\r",
													"  pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of slot\", () => {\r",
													"  pm.expect(jsonData.data[0].slot).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of time\", () => {\r",
													"  pm.expect(jsonData.data[0].time).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of addressesInput\", () => {\r",
													"  pm.expect(jsonData.data[0].addressesInput).to.be.a(\"array\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of addressesOutput\", () => {\r",
													"  pm.expect(jsonData.data[0].addressesOutput).to.be.a(\"array\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of fee\", () => {\r",
													"  pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of totalOutput\", () => {\r",
													"  pm.expect(jsonData.data[0].totalOutput).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of totalItems\", () => {\r",
													"  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of totalPages\", () => {\r",
													"  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"// pm.test(\"Check data type of balance\", () => {\r",
													"//   pm.expect(jsonData.data[0].balance).to.be.null;\r",
													"// });\r",
													"\r",
													"pm.test(\"Check data type of balance\", function () {\r",
													"    console.log(jsonData.data[0].balance)\r",
													"    pm.expect(typeof jsonData.data[0].balance).to.be.oneOf(['object', 'number']);\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of tokens\", () => {\r",
													"  pm.expect(jsonData.data[0].tokens).to.be.a(\"array\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of totalItems\", () => {\r",
													"  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of totalPages\", () => {\r",
													"  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"//Count total contribution\r",
													"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
													"  var number = Object.keys(jsonData).length;\r",
													"  pm.expect(number).to.eql(4)\r",
													"});\r",
													"\r",
													"pm.test(\"Check number of contributions in field data level 2\", function () {\r",
													"  var number = Object.keys(jsonData.data).length;\r",
													"  pm.expect(number).to.eql(10)\r",
													"});\r",
													"\r",
													"//Check name\r",
													"pm.test(\"Check name of contributions in field data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
													"  var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Check name of contributions in data data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
													"  var myKeysList = [\"hash\", \"blockNo\", \"blockHash\", \"epochNo\", \"epochSlotNo\", \"slot\", \"time\",\"addressesInput\", \"addressesOutput\", \"fee\", \"totalOutput\", \"balance\", \"tokens\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"//Check scenario\r",
													"pm.test(\"Compare totalItems with txCount of filter token\", function () {\r",
													"pm.expect(jsonData.totalItems).to.eql(pm.environment.get(\"token_data_txCount\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/tokens/{{token_data_fingerprint}}/txs?page=0&size=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"tokens",
												"{{token_data_fingerprint}}",
												"txs"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Zero-based page index (0..N)"
												},
												{
													"key": "size",
													"value": "10",
													"description": "The size of the page to be returned"
												},
												{
													"key": "sort",
													"value": "dolore non est",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "elit",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "tokenId",
													"value": "{{token_data_fingerprint}}"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/tokens/:tokenId/txs?page=0&size=20&sort=ex&sort=nisi de",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"tokens",
														":tokenId",
														"txs"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "20"
														},
														{
															"key": "sort",
															"value": "ex"
														},
														{
															"key": "sort",
															"value": "nisi de"
														}
													],
													"variable": [
														{
															"key": "tokenId",
															"value": "enim voluptate Excepteur ullamco",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"hash\": \"Excepteur sed labore\",\n      \"blockNo\": -46806813,\n      \"blockHash\": \"nisi in incididunt quis\",\n      \"epochNo\": -60608740,\n      \"epochSlotNo\": 68641533,\n      \"slot\": -54192140,\n      \"time\": \"1953-04-19T18:45:29.774Z\",\n      \"addressesInput\": [\n        \"consequat id\",\n        \"irure dolore\"\n      ],\n      \"addressesOutput\": [\n        \"dolor ea\",\n        \"magna laborum\"\n      ],\n      \"fee\": 14511110,\n      \"totalOutput\": 33083216,\n      \"balance\": 91663821,\n      \"tokens\": [\n        {\n          \"addressId\": -2475162,\n          \"address\": \"consequat\",\n          \"policy\": \"est qui in in\",\n          \"metadata\": {\n            \"url\": \"ea voluptate commodo nisi nostrud\",\n            \"ticker\": \"ex aliqua\",\n            \"decimals\": 35611207,\n            \"logo\": \"nostrud Excepteur qui\",\n            \"description\": \"cillum\"\n          },\n          \"name\": \"do fugiat reprehenderit ipsu\",\n          \"displayName\": \"occaecat ex\",\n          \"fingerprint\": \"minim d\",\n          \"quantity\": -28150056\n        },\n        {\n          \"addressId\": -70424671,\n          \"address\": \"laboris\",\n          \"policy\": \"dolor in incididunt\",\n          \"metadata\": {\n            \"url\": \"Excepteur reprehenderit\",\n            \"ticker\": \"sed Du\",\n            \"decimals\": 21239598,\n            \"logo\": \"ut enim\",\n            \"description\": \"amet officia nulla\"\n          },\n          \"name\": \"laborum reprehenderit deserunt\",\n          \"displayName\": \"eu nisi voluptate\",\n          \"fingerprint\": \"sed in\",\n          \"quantity\": 73188167\n        }\n      ]\n    },\n    {\n      \"hash\": \"occaecat non anim labore\",\n      \"blockNo\": -32853053,\n      \"blockHash\": \"pariatur sed dolore dolore\",\n      \"epochNo\": 92981403,\n      \"epochSlotNo\": 57548782,\n      \"slot\": 93943643,\n      \"time\": \"1977-06-16T06:16:08.168Z\",\n      \"addressesInput\": [\n        \"cillum enim\",\n        \"velit Duis minim aute\"\n      ],\n      \"addressesOutput\": [\n        \"officia fugiat Lorem\",\n        \"sint\"\n      ],\n      \"fee\": 87483890,\n      \"totalOutput\": 66035495,\n      \"balance\": -36872582,\n      \"tokens\": [\n        {\n          \"addressId\": 40282102,\n          \"address\": \"dolore ea Lorem eu consectetur\",\n          \"policy\": \"sed cillum\",\n          \"metadata\": {\n            \"url\": \"est exercitation irure\",\n            \"ticker\": \"ex voluptate\",\n            \"decimals\": 66574392,\n            \"logo\": \"exercitation eiusmod velit\",\n            \"description\": \"incididunt irure ut nostrud\"\n          },\n          \"name\": \"amet laboris sunt aute sint\",\n          \"displayName\": \"do\",\n          \"fingerprint\": \"mollit officia commodo enim in\",\n          \"quantity\": 96432812\n        },\n        {\n          \"addressId\": 61875921,\n          \"address\": \"dolore sit\",\n          \"policy\": \"sit dolor minim in\",\n          \"metadata\": {\n            \"url\": \"voluptate veniam laborum exercita\",\n            \"ticker\": \"dolore dolor\",\n            \"decimals\": -85521489,\n            \"logo\": \"sunt mollit nisi\",\n            \"description\": \"proident\"\n          },\n          \"name\": \"nisi aliquip anim\",\n          \"displayName\": \"cillum aute\",\n          \"fingerprint\": \"ut dolore\",\n          \"quantity\": -50581416\n        }\n      ]\n    }\n  ],\n  \"totalItems\": -30498291,\n  \"totalPages\": 48123678,\n  \"currentPage\": -67438345\n}"
										}
									]
								},
								{
									"name": "Detail token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// var stt = \"200\";\r",
													"// stt = pm.variables.get(\"stt\");\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});\r",
													"\r",
													"// pm.test(\"Status code is 400\", function () {\r",
													"//     pm.response.to.have.status(400);\r",
													"// });\r",
													"\r",
													"pm.test(\"Check name value\", function () {\r",
													"    pm.expect(jsonData.name).to.include(pm.environment.get(\"token_name\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Check displayName value\", function () {\r",
													"    pm.expect(jsonData.displayName).to.include(pm.environment.get(\"token_displayName\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Check policy value\", function () {\r",
													"    pm.expect(jsonData.policy).to.include(pm.environment.get(\"token_policy\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Check fingerprint value\", function () {\r",
													"    pm.expect(jsonData.fingerprint).to.include(pm.environment.get(\"token_fingerprint\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Check txCount value\", function () {\r",
													"    pm.expect(jsonData.txCount).to.eql(pm.environment.get(\"token_txCount\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Check supply value\", function () {\r",
													"    pm.expect(jsonData.supply).to.contain(pm.environment.get(\"token_supply\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Check volumeIn24h value\", function () {\r",
													"    pm.expect(jsonData.volumeIn24h).to.contain(pm.environment.get(\"token_volumeIn24h\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Check totalVolume value\", function () {\r",
													"    pm.expect(jsonData.totalVolume).to.equal(pm.environment.get(\"token_totalVolume\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Check numberOfHolders value\", function () {\r",
													"    pm.expect(jsonData.numberOfHolders).to.eql(pm.environment.get(\"token_numberOfHolders\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Check createdOn value\", function () {\r",
													"    pm.expect(jsonData.createdOn).to.contain(pm.environment.get(\"token_createdOn\"));\r",
													"});\r",
													"\r",
													"//Compare data type\r",
													"pm.test(\"Check data type of txCount\", () => {\r",
													"  pm.expect(jsonData.txCount).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of supply\", () => {\r",
													"  pm.expect(jsonData.supply).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of totalVolume\", () => {\r",
													"  pm.expect(jsonData.totalVolume).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of numberOfHolders\", () => {\r",
													"  pm.expect(jsonData.numberOfHolders).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of numberOfHolders\", () => {\r",
													"  pm.expect(jsonData.numberOfHolders).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"//Deleted level 2\r",
													"// pm.test(\"Check data type of url\", () => {\r",
													"//   pm.expect(jsonData.metadata.url).to.be.a(\"string\");\r",
													"// });  \r",
													"\r",
													"// pm.test(\"Check data type of ticker\", () => {\r",
													"//   pm.expect(jsonData.metadata.ticker).to.be.a(\"string\");\r",
													"// });\r",
													"\r",
													"// pm.test(\"Check data type of decimals\", () => {\r",
													"//   pm.expect(jsonData.metadata.decimals).to.be.a(\"number\");\r",
													"// });\r",
													"\r",
													"// pm.test(\"Check data type of logo\", () => {\r",
													"//   pm.expect(jsonData.metadata.logo).to.be.a(\"string\");\r",
													"// });\r",
													"\r",
													"// pm.test(\"Check data type of description\", () => {\r",
													"//   pm.expect(jsonData.metadata.description).to.be.a(\"string\");\r",
													"// });\r",
													"\r",
													"//Count total contribution\r",
													"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
													"  var number = Object.keys(jsonData).length;\r",
													"  pm.expect(number).to.eql(14)\r",
													"});\r",
													"\r",
													"//Deleted level 2\r",
													"// pm.test(\"Check number of contributions in field data level 2\", function () {\r",
													"//   var number = Object.keys(jsonData.metadata).length;\r",
													"//   pm.expect(number).to.eql(5)\r",
													"// });\r",
													"\r",
													"//Check name\r",
													"pm.test(\"Check name of contributions in field data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
													"  var myKeysList = [\"name\", \"displayName\", \"policy\", \"fingerprint\", \"txCount\", \"supply\", \"volumeIn24h\", \"totalVolume\", \"numberOfHolders\", \"createdOn\", \"metadata\", \"tokenLastActivity\",  \"tokenType\", \"metadataJson\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"//Deleted level 2\r",
													"// pm.test(\"Check name of contributions in metadata data\", function () {\r",
													"//   var arrayOfResponseKeys  = Object.keys(jsonData.metadata)\r",
													"//   var myKeysList = [\"url\", \"ticker\", \"decimals\", \"logo\", \"description\"];\r",
													"//   for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"//     for (let j = 0; j < myKeysList.length; j++) {\r",
													"//         pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"//         }\r",
													"//     }\r",
													"// });\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/tokens/{{token_data_fingerprint}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"tokens",
												"{{token_data_fingerprint}}"
											],
											"variable": [
												{
													"key": "tokenId",
													"value": "asset17q7r59zlc3dgw0venc80pdv566q6yguw03f0d9"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/tokens/:tokenId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"tokens",
														":tokenId"
													],
													"variable": [
														{
															"key": "tokenId",
															"value": "enim voluptate Excepteur ullamco",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"name\": \"dolor laboris culpa\",\n  \"displayName\": \"Duis\",\n  \"policy\": \"in voluptate \",\n  \"fingerprint\": \"nulla id pariatur\",\n  \"txCount\": -4532516,\n  \"supply\": \"et pariatur amet cillum\",\n  \"volumeIn24h\": \"et quis commodo sint\",\n  \"totalVolume\": \"ex irure\",\n  \"numberOfHolders\": -11792078,\n  \"createdOn\": \"2021-09-21T20:38:07.623Z\",\n  \"metadata\": {\n    \"url\": \"fugiat aliqua magna sunt\",\n    \"ticker\": \"labore anim eiusmod\",\n    \"decimals\": -91474124,\n    \"logo\": \"laborum occaecat deserunt ad\",\n    \"description\": \"non veniam in\"\n  }\n}"
										}
									]
								},
								{
									"name": "Filter holders by token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 5000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});\r",
													"\r",
													"pm.test(\"Check currentPage value\", function () {\r",
													"    pm.expect(jsonData.currentPage).to.eql(2);\r",
													"});\r",
													"\r",
													"//Compare data type\r",
													"pm.test(\"Check data type of address\", () => {\r",
													"  pm.expect(jsonData.data[0].address).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of quantity\", () => {\r",
													"  pm.expect(jsonData.data[0].quantity).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of totalItems\", () => {\r",
													"  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of totalPages\", () => {\r",
													"  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"//Count total contribution\r",
													"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
													"  var number = Object.keys(jsonData).length;\r",
													"  pm.expect(number).to.eql(4)\r",
													"});\r",
													"\r",
													"pm.test(\"Check number of contributions in field data level 2\", function () {\r",
													"  var number = Object.keys(jsonData.data[0]).length;\r",
													"  pm.expect(number).to.eql(2)\r",
													"});\r",
													"\r",
													"//Check name\r",
													"pm.test(\"Check name of contributions in field data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
													"  var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Check name of contributions in data data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
													"  var myKeysList = [\"address\", \"quantity\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/tokens/:tokenId/top_holders?page=2&size=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"tokens",
												":tokenId",
												"top_holders"
											],
											"query": [
												{
													"key": "page",
													"value": "2",
													"description": "Zero-based page index (0..N)"
												},
												{
													"key": "size",
													"value": "20",
													"description": "The size of the page to be returned"
												},
												{
													"key": "sort",
													"value": "dolore non est",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "elit",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "tokenId",
													"value": "asset17q7r59zlc3dgw0venc80pdv566q6yguw03f0d9",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/tokens/:tokenId/top_holders?page=0&size=20&sort=ex&sort=nisi de",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"tokens",
														":tokenId",
														"top_holders"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "20"
														},
														{
															"key": "sort",
															"value": "ex"
														},
														{
															"key": "sort",
															"value": "nisi de"
														}
													],
													"variable": [
														{
															"key": "tokenId",
															"value": "enim voluptate Excepteur ullamco",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"addressId\": -56637167,\n      \"address\": \"laboris labore eu id\",\n      \"policy\": \"cillum ea elit\",\n      \"metadata\": {\n        \"url\": \"deserunt\",\n        \"ticker\": \"sed officia\",\n        \"decimals\": 81505882,\n        \"logo\": \"culpa aliquip\",\n        \"description\": \"sit adipisicing\"\n      },\n      \"name\": \"in adipisicing velit\",\n      \"displayName\": \"e\",\n      \"fingerprint\": \"enim laborum Duis\",\n      \"quantity\": 76374386\n    },\n    {\n      \"addressId\": -95565450,\n      \"address\": \"cillum cupidatat\",\n      \"policy\": \"sit\",\n      \"metadata\": {\n        \"url\": \"in ad voluptate Duis\",\n        \"ticker\": \"qui esse\",\n        \"decimals\": -32615745,\n        \"logo\": \"in\",\n        \"description\": \"dolor mollit\"\n      },\n      \"name\": \"irure dolor culpa\",\n      \"displayName\": \"qui\",\n      \"fingerprint\": \"culpa ulla\",\n      \"quantity\": 8717507\n    }\n  ],\n  \"totalItems\": 79962271,\n  \"totalPages\": -82813616,\n  \"currentPage\": 29412550\n}"
										}
									]
								},
								{
									"name": "Filter token mint transaction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 5000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});\r",
													"\r",
													"pm.test(\"Check currentPage value\", function () {\r",
													"    pm.expect(jsonData.currentPage).to.eql(0);\r",
													"});\r",
													"\r",
													"//Compare data type\r",
													"pm.test(\"Check data type of txHash\", () => {\r",
													"  pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of amount\", () => {\r",
													"  pm.expect(jsonData.data[0].amount).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of createdOn\", () => {\r",
													"        let moment = require ('moment');\r",
													"  pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
													"});\r",
													"pm.test(\"Check data type of totalItems\", () => {\r",
													"  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of totalPages\", () => {\r",
													"  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"//Count total contribution\r",
													"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
													"  var number = Object.keys(jsonData).length;\r",
													"  pm.expect(number).to.eql(4)\r",
													"});\r",
													"\r",
													"pm.test(\"Check number of contributions in field data level 2\", function () {\r",
													"  var number = Object.keys(jsonData.data[0]).length;\r",
													"  pm.expect(number).to.eql(3)\r",
													"});\r",
													"\r",
													"//Check name\r",
													"pm.test(\"Check name of contributions in field data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
													"  var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Check name of contributions in data data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
													"  var myKeysList = [\"txHash\", \"amount\", \"time\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/tokens/:tokenId/mints?page=0&size=5",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"tokens",
												":tokenId",
												"mints"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Zero-based page index (0..N)"
												},
												{
													"key": "size",
													"value": "5",
													"description": "The size of the page to be returned"
												},
												{
													"key": "sort",
													"value": "id,DESC",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "tokenId",
													"value": "asset17q7r59zlc3dgw0venc80pdv566q6yguw03f0d9",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/tokens/:tokenId/mints?page=0&size=20&sort=id,DESC",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"tokens",
														":tokenId",
														"mints"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "20"
														},
														{
															"key": "sort",
															"value": "id,DESC"
														}
													],
													"variable": [
														{
															"key": "tokenId",
															"value": "enim voluptate Excepteur ullamco",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"txHash\": \"id consectetur laborum elit in\",\n      \"amount\": \"occaecat anim aliquip\",\n      \"time\": \"1970-06-11T23:19:14.715Z\"\n    },\n    {\n      \"txHash\": \"quis dolor\",\n      \"amount\": \"nisi sit consectetur velit\",\n      \"time\": \"2001-01-25T06:12:20.905Z\"\n    }\n  ],\n  \"totalItems\": 73010671,\n  \"totalPages\": 84853465,\n  \"currentPage\": 20364577\n}"
										}
									]
								}
							]
						},
						{
							"name": "Filter transaction by token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"//Compare data type\r",
											"pm.test(\"Check data type of date\", () => {\r",
											"        let moment = require ('moment');\r",
											"  pm.expect(jsonData[0].date).to.include(moment(jsonData[0].date).format('YYYY/MM/DD'));\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of value\", () => {\r",
											"  pm.expect(jsonData[0].value).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
											"  var number = Object.keys(jsonData[0]).length;\r",
											"  pm.expect(number).to.eql(2)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData[0])\r",
											"  var myKeysList = [\"date\", \"value\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/tokens/analytics/:tokenId/:type",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"tokens",
										"analytics",
										":tokenId",
										":type"
									],
									"variable": [
										{
											"key": "tokenId",
											"value": "asset17q7r59zlc3dgw0venc80pdv566q6yguw03f0d9",
											"description": "(Required) "
										},
										{
											"key": "type",
											"value": "ONE_DAY",
											"description": "(Required) Type analytics: 1d, 1w, 1m, 3m"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/tokens/analytics/:tokenId/:type",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"tokens",
												"analytics",
												":tokenId",
												":type"
											],
											"variable": [
												{
													"key": "tokenId",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) "
												},
												{
													"key": "type",
													"value": "THREE_MONTH",
													"description": "(Required) Type analytics: 1d, 1w, 1m, 3m"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"date\": \"1974-01-28\",\n    \"value\": 97554919\n  },\n  {\n    \"date\": \"1997-05-23\",\n    \"value\": 32469025\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "stakes",
					"item": [
						{
							"name": "{stakeKey}",
							"item": [
								{
									"name": "Get top delegators",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var stt = 200\r",
													"var res_time = 5000\r",
													"var current_page = 0\r",
													"\r",
													"//Compare static data\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(stt);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
													"});\r",
													"\r",
													"pm.test(\"Compare Currentpage\", function () {\r",
													"    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
													"});\r",
													"\r",
													"//Compare format dynamic data\r",
													"pm.test(\"Check data type of the response\", () => {\r",
													"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
													"    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.data[0].stakeKey).to.be.a(\"string\");\r",
													"    pm.expect(jsonData.data[0].balance).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.data[0].poolId).to.be.a(\"string\");\r",
													"    pm.expect(typeof jsonData.data[0].tickerName).to.be.oneOf([ 'object', 'string']);\r",
													"    pm.expect(typeof jsonData.data[0].poolName).to.be.oneOf([ 'object', 'string']);\r",
													"});\r",
													"\r",
													"//Count total contribution\r",
													"pm.test(\"Check number of contributions in response data\", function () {\r",
													"  var number = Object.keys(jsonData).length;\r",
													"  pm.expect(number).to.eql(4)\r",
													"});\r",
													"\r",
													"pm.test(\"Check number of contributions in a record data\", function () {\r",
													"  var number = Object.keys(jsonData.data[0]).length;\r",
													"  pm.expect(number).to.eql(5)\r",
													"});\r",
													"\r",
													"//Check name contribution\r",
													"pm.test(\"Check name of contributions in field data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
													"  var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Check name of contributions in record data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
													"  var myKeysList = [\"stakeKey\", \"balance\", \"poolId\", \"tickerName\", \"poolName\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"//Get value\r",
													"pm.test(\"Others value exist\",function (){\r",
													"    \r",
													"    //Randome value\r",
													"    var randomNumber = Math.floor(Math.random() * jsonData.data.length);\r",
													"\r",
													"    pm.environment.set(\"stakes_stakeKey\", jsonData.data[randomNumber].stakeKey);\r",
													"    pm.environment.set(\"stakes_balance\", jsonData.data[randomNumber].balance);\r",
													"    pm.environment.set(\"stakes_poolId\", jsonData.data[randomNumber].poolId);\r",
													"    pm.environment.set(\"stakes_tickerName\", jsonData.data[randomNumber].tickerName);\r",
													"    pm.environment.set(\"stakes_poolName\", jsonData.data[randomNumber].poolName);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stakes/top-delegators",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stakes",
												"top-delegators"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Zero-based page index (0..N)",
													"disabled": true
												},
												{
													"key": "size",
													"value": "20",
													"description": "The size of the page to be returned",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "dolore non est",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "elit",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/stakes/top-delegators?page=0&size=20&sort=ex&sort=nisi de",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"stakes",
														"top-delegators"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "20"
														},
														{
															"key": "sort",
															"value": "ex"
														},
														{
															"key": "sort",
															"value": "nisi de"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"stakeKey\": \"dolore dolore\",\n      \"balance\": 28696572,\n      \"poolId\": \"fugiat sunt\",\n      \"tickerName\": \"aute aliqua\",\n      \"poolName\": \"exercitation sunt non\"\n    },\n    {\n      \"stakeKey\": \"irure\",\n      \"balance\": 36214076,\n      \"poolId\": \"dolor \",\n      \"tickerName\": \"veniam culpa cillum ullamco\",\n      \"poolName\": \"ea aliquip cupidatat deserunt\"\n    }\n  ],\n  \"totalItems\": -41501594,\n  \"totalPages\": -34602546,\n  \"currentPage\": 94159274\n}"
										}
									]
								},
								{
									"name": "Get a stake detail by stake key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var stt = 200\r",
													"var res_time = 5000\r",
													"\r",
													"//Compare static data\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(stt);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
													"});\r",
													"\r",
													"pm.test(\"Compare Stakeaddress\", function () {\r",
													"    pm.expect(jsonData.stakeAddress).to.include(pm.environment.get(\"stakes_stakeKey\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Compare PoolId\", function () {\r",
													"    pm.expect(jsonData.pool.poolId).to.include(pm.environment.get(\"stakes_poolId\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Compare PoolId\", function () {\r",
													"    pm.expect(jsonData.pool.poolName).to.eql(pm.environment.get(\"stakes_poolName\"))\r",
													"    || pm.expect(jsonData.pool.poolName).to.include(pm.environment.get(\"stakes_poolName\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Compare PoolId\", function () {\r",
													"    pm.expect(jsonData.pool.tickerName).to.eql(pm.environment.get(\"stakes_tickerName\"))\r",
													"    || pm.expect(jsonData.pool.tickerName).to.include(pm.environment.get(\"stakes_tickerName\"))\r",
													"});\r",
													"\r",
													"//Waiting data to active -> In progress checking\r",
													"// pm.test(\"Compare totalStake\", function () {\r",
													"//     pm.expect(jsonData.totalStake).to.eql(pm.environment.get(\"stakes_balance\"));\r",
													"// });\r",
													"\r",
													"//Compare format dynamic data\r",
													"pm.test(\"Check data type of the response\", () => {\r",
													"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
													"    pm.expect(jsonData.stakeAddress).to.be.a(\"string\");\r",
													"    pm.expect(jsonData.totalStake).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.rewardAvailable).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.rewardWithdrawn).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.pool).to.be.an(\"object\");\r",
													"    pm.expect(jsonData.rewardPools).to.be.an(\"array\");\r",
													"});\r",
													"\r",
													"//Count total contribution\r",
													"pm.test(\"Check number of contributions in response data\", function () {\r",
													"  var number = Object.keys(jsonData).length;\r",
													"  pm.expect(number).to.eql(7)\r",
													"});\r",
													"\r",
													"pm.test(\"Check number of contributions in pool data\", function () {\r",
													"  var number = Object.keys(jsonData.pool).length;\r",
													"  pm.expect(number).to.eql(5)\r",
													"});\r",
													"\r",
													"//Check name contribution\r",
													"pm.test(\"Check name of contributions in response data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
													"  var myKeysList = [\"status\", \"stakeAddress\", \"totalStake\", \"rewardAvailable\", \"rewardWithdrawn\", \"pool\", \"rewardPools\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Check name of contributions in pool data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData.pool)\r",
													"  var myKeysList = [\"tickerName\", \"poolName\", \"poolId\", \"logoUrl\", \"iconUrl\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stakes/{{stakes_stakeKey}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stakes",
												"{{stakes_stakeKey}}"
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/stakes/:stakeKey",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"stakes",
														":stakeKey"
													],
													"variable": [
														{
															"key": "stakeKey",
															"value": "enim voluptate Excepteur ullamco",
															"description": "(Required) Stake key"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"status\": \"DEACTIVATED\",\n  \"stakeAddress\": \"ut aliqua id nostrud\",\n  \"totalStake\": 85099477,\n  \"rewardAvailable\": 9303668,\n  \"rewardWithdrawn\": -78301382,\n  \"pool\": {\n    \"tickerName\": \"est deserunt quis\",\n    \"poolName\": \"voluptate fugiat cillum\",\n    \"poolId\": \"in reprehenderit\"\n  },\n  \"rewardPools\": [\n    \"ea est\",\n    \"Excepteur reprehenderi\"\n  ]\n}"
										}
									]
								},
								{
									"name": "Get withdrawal transaction of stake key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var stt = 200\r",
													"var res_time = 5000\r",
													"var current_page = 0\r",
													"\r",
													"//Compare static data\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(stt);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
													"});\r",
													"\r",
													"pm.test(\"Compare Currentpage\", function () {\r",
													"    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
													"});\r",
													"\r",
													"//Compare format dynamic data\r",
													"pm.test(\"Check data type of the response\", () => {\r",
													"    let moment = require ('moment');\r",
													"\r",
													"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
													"    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
													"    pm.expect(typeof jsonData.data[0].fee).to.be.oneOf([ 'object', 'number']);\r",
													"    pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.data[0].blockNo).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
													"    pm.expect(typeof jsonData.data[0].txId).to.be.oneOf([ 'object', 'string']);\r",
													"    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");    \r",
													"    pm.expect(jsonData.data[0].amount).to.be.a(\"number\");   \r",
													"});\r",
													"\r",
													"//Count total contribution\r",
													"pm.test(\"Check number of contributions in response data\", function () {\r",
													"  var number = Object.keys(jsonData).length;\r",
													"  pm.expect(number).to.eql(4)\r",
													"});\r",
													"\r",
													"pm.test(\"Check number of contributions in a record data\", function () {\r",
													"  var number = Object.keys(jsonData.data[0]).length;\r",
													"  pm.expect(number).to.eql(8)\r",
													"});\r",
													"\r",
													"//Check name contribution\r",
													"pm.test(\"Check name of contributions in field data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
													"  var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Check name of contributions in record data\", function () {\r",
													"    var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
													"    var myKeysList = [\"time\", \"fee\", \"amount\", \"txHash\", \"txId\", \"epochNo\", \"blockNo\", \"epochSlotNo\"];\r",
													"    for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"        pm.expect(arrayOfResponseKeys[i]).to.be.oneOf(myKeysList);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/withdrawal-history",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stakes",
												":stakeKey",
												"withdrawal-history"
											],
											"query": [
												{
													"key": "page",
													"value": "",
													"description": "Zero-based page index (0..N)",
													"disabled": true
												},
												{
													"key": "size",
													"value": "20",
													"description": "The size of the page to be returned",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "dolore non est",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "elit",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "stakeKey",
													"value": "stake1u8v6dwu5tumz850n3uq2sepd9hxz7tjupnjnn5cktzats6qs3u0kv",
													"description": "(Required) Stake key"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/withdrawal-history?page=0&size=20&sort=ex&sort=nisi de",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"stakes",
														":stakeKey",
														"withdrawal-history"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "20"
														},
														{
															"key": "sort",
															"value": "ex"
														},
														{
															"key": "sort",
															"value": "nisi de"
														}
													],
													"variable": [
														{
															"key": "stakeKey",
															"value": "enim voluptate Excepteur ullamco",
															"description": "(Required) Stake key"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"time\": \"2018-12-27T06:20:16.603Z\",\n      \"txHash\": \"ipsum in ut\",\n      \"txId\": 42301109,\n      \"epochSlotNo\": 25509584,\n      \"epochNo\": 63328981,\n      \"amount\": -54873387,\n      \"fee\": 4144030,\n      \"blockNo\": -38193569\n    },\n    {\n      \"time\": \"1986-02-08T17:50:52.672Z\",\n      \"txHash\": \"adipisicing irure eiusmod reprehenderit laborum\",\n      \"txId\": 97485354,\n      \"epochSlotNo\": 84050974,\n      \"epochNo\": -21092501,\n      \"amount\": -10675888,\n      \"fee\": 1427659,\n      \"blockNo\": -93743081\n    }\n  ],\n  \"totalItems\": 61563279,\n  \"totalPages\": -81860932,\n  \"currentPage\": -72994741\n}"
										}
									]
								},
								{
									"name": "Get transactions of stake key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var stt = 200\r",
													"var res_time = 5000\r",
													"var current_page = 0\r",
													"\r",
													"//Compare static data\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(stt);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
													"});\r",
													"\r",
													"pm.test(\"Compare Currentpage\", function () {\r",
													"    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
													"});\r",
													"\r",
													"//Compare format dynamic data\r",
													"pm.test(\"Check data type of the response\", () => {\r",
													"    let moment = require ('moment');\r",
													"\r",
													"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
													"    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.data[0].hash).to.be.a(\"string\");\r",
													"    pm.expect(jsonData.data[0].blockNo).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.data[0].blockHash).to.be.a(\"string\");\r",
													"    pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.data[0].slot).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
													"    // pm.expect(jsonData.data.addressesInput).to.be.an(\"array\");\r",
													"    // pm.expect(jsonData.data.addressesOutput).to.be.an(\"array\");\r",
													"    pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.data[0].totalOutput).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.data[0].balance).to.be.a(\"number\");\r",
													"    // pm.expect(jsonData.data.tokens).to.be.an(\"array\");\r",
													"});\r",
													"\r",
													"//Count total contribution\r",
													"pm.test(\"Check number of contributions in response data\", function () {\r",
													"  var number = Object.keys(jsonData).length;\r",
													"  pm.expect(number).to.eql(4)\r",
													"});\r",
													"\r",
													"pm.test(\"Check number of contributions in a record data\", function () {\r",
													"  var number = Object.keys(jsonData.data[0]).length;\r",
													"  pm.expect(number).to.eql(13)\r",
													"});\r",
													"\r",
													"pm.test(\"Check number of record\", function () {\r",
													"  var number = Object.keys(jsonData.data).length;\r",
													"  pm.expect(number).to.eql(10)\r",
													"});\r",
													"\r",
													"//Check name contribution\r",
													"pm.test(\"Check name of contributions in field data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
													"  var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Check name of contributions in record data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
													"  var myKeysList = [\"hash\", \"blockNo\", \"blockHash\", \"epochNo\", \"epochSlotNo\", \"slot\", \"time\", \"addressesInput\", \"addressesOutput\", \"fee\", \"totalOutput\", \"balance\", \"tokens\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/txs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stakes",
												":stakeKey",
												"txs"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Zero-based page index (0..N)",
													"disabled": true
												},
												{
													"key": "size",
													"value": "20",
													"description": "The size of the page to be returned",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "dolore non est",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "elit",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "stakeKey",
													"value": "stake178uvw34lh566mkv2kqrech64vssxqqrux65z3fsl6txujqcr24yys",
													"description": "(Required) Stake key"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/txs?page=0&size=20&sort=ex&sort=nisi de",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"stakes",
														":stakeKey",
														"txs"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "20"
														},
														{
															"key": "sort",
															"value": "ex"
														},
														{
															"key": "sort",
															"value": "nisi de"
														}
													],
													"variable": [
														{
															"key": "stakeKey",
															"value": "enim voluptate Excepteur ullamco",
															"description": "(Required) Stake key"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"hash\": \"Excepteur sed labore\",\n      \"blockNo\": -46806813,\n      \"blockHash\": \"nisi in incididunt quis\",\n      \"epochNo\": -60608740,\n      \"epochSlotNo\": 68641533,\n      \"slot\": -54192140,\n      \"time\": \"1953-04-19T18:45:29.774Z\",\n      \"addressesInput\": [\n        \"consequat id\",\n        \"irure dolore\"\n      ],\n      \"addressesOutput\": [\n        \"dolor ea\",\n        \"magna laborum\"\n      ],\n      \"fee\": 14511110,\n      \"totalOutput\": 33083216,\n      \"balance\": 91663821,\n      \"tokens\": [\n        {\n          \"addressId\": -2475162,\n          \"address\": \"consequat\",\n          \"policy\": \"est qui in in\",\n          \"metadata\": {\n            \"url\": \"ea voluptate commodo nisi nostrud\",\n            \"ticker\": \"ex aliqua\",\n            \"decimals\": 35611207,\n            \"logo\": \"nostrud Excepteur qui\",\n            \"description\": \"cillum\"\n          },\n          \"name\": \"do fugiat reprehenderit ipsu\",\n          \"displayName\": \"occaecat ex\",\n          \"fingerprint\": \"minim d\",\n          \"quantity\": -28150056\n        },\n        {\n          \"addressId\": -70424671,\n          \"address\": \"laboris\",\n          \"policy\": \"dolor in incididunt\",\n          \"metadata\": {\n            \"url\": \"Excepteur reprehenderit\",\n            \"ticker\": \"sed Du\",\n            \"decimals\": 21239598,\n            \"logo\": \"ut enim\",\n            \"description\": \"amet officia nulla\"\n          },\n          \"name\": \"laborum reprehenderit deserunt\",\n          \"displayName\": \"eu nisi voluptate\",\n          \"fingerprint\": \"sed in\",\n          \"quantity\": 73188167\n        }\n      ]\n    },\n    {\n      \"hash\": \"occaecat non anim labore\",\n      \"blockNo\": -32853053,\n      \"blockHash\": \"pariatur sed dolore dolore\",\n      \"epochNo\": 92981403,\n      \"epochSlotNo\": 57548782,\n      \"slot\": 93943643,\n      \"time\": \"1977-06-16T06:16:08.168Z\",\n      \"addressesInput\": [\n        \"cillum enim\",\n        \"velit Duis minim aute\"\n      ],\n      \"addressesOutput\": [\n        \"officia fugiat Lorem\",\n        \"sint\"\n      ],\n      \"fee\": 87483890,\n      \"totalOutput\": 66035495,\n      \"balance\": -36872582,\n      \"tokens\": [\n        {\n          \"addressId\": 40282102,\n          \"address\": \"dolore ea Lorem eu consectetur\",\n          \"policy\": \"sed cillum\",\n          \"metadata\": {\n            \"url\": \"est exercitation irure\",\n            \"ticker\": \"ex voluptate\",\n            \"decimals\": 66574392,\n            \"logo\": \"exercitation eiusmod velit\",\n            \"description\": \"incididunt irure ut nostrud\"\n          },\n          \"name\": \"amet laboris sunt aute sint\",\n          \"displayName\": \"do\",\n          \"fingerprint\": \"mollit officia commodo enim in\",\n          \"quantity\": 96432812\n        },\n        {\n          \"addressId\": 61875921,\n          \"address\": \"dolore sit\",\n          \"policy\": \"sit dolor minim in\",\n          \"metadata\": {\n            \"url\": \"voluptate veniam laborum exercita\",\n            \"ticker\": \"dolore dolor\",\n            \"decimals\": -85521489,\n            \"logo\": \"sunt mollit nisi\",\n            \"description\": \"proident\"\n          },\n          \"name\": \"nisi aliquip anim\",\n          \"displayName\": \"cillum aute\",\n          \"fingerprint\": \"ut dolore\",\n          \"quantity\": -50581416\n        }\n      ]\n    }\n  ],\n  \"totalItems\": -30498291,\n  \"totalPages\": 48123678,\n  \"currentPage\": -67438345\n}"
										}
									]
								},
								{
									"name": "Get stake history of stake key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var stt = 200\r",
													"var res_time = 5000\r",
													"var current_page = 0\r",
													"\r",
													"//Compare static data\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(stt);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
													"});\r",
													"\r",
													"pm.test(\"Compare Currentpage\", function () {\r",
													"    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
													"});\r",
													"\r",
													"//Compare format dynamic data\r",
													"pm.test(\"Check data type of the response\", () => {\r",
													"    let moment = require ('moment');\r",
													"\r",
													"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
													"    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
													"    \r",
													"    if (jsonData.data[0].fee != null){\r",
													"        pm.expect(jsonData.data[0].fee).to.be.a(\"number\")\r",
													"    } else {\r",
													"        pm.expect(jsonData.data[0].fee).to.be.null\r",
													"    };\r",
													"\r",
													"    pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.data[0].blockNo).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");    \r",
													"    pm.expect(jsonData.data[0].deposit).to.be.a(\"number\");   \r",
													"    pm.expect(jsonData.data[0].blockIndex).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.data[0].action).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"//Count total contribution\r",
													"pm.test(\"Check number of contributions in response data\", function () {\r",
													"    var number = Object.keys(jsonData).length;\r",
													"    pm.expect(number).to.eql(4)\r",
													"});\r",
													"\r",
													"pm.test(\"Check number of contributions in a record data\", function () {\r",
													"    var number = Object.keys(jsonData.data[0]).length;\r",
													"    pm.expect(number).to.eql(9)\r",
													"});\r",
													"\r",
													"//Check name contribution\r",
													"pm.test(\"Check name of contributions in field data\", function () {\r",
													"    var arrayOfResponseKeys  = Object.keys(jsonData)\r",
													"    var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
													"    for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"        for (let j = 0; j < myKeysList.length; j++) {\r",
													"            pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Check name of contributions in record data\", function () {\r",
													"    var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
													"    var myKeysList = [\"time\", \"fee\", \"blockIndex\", \"txHash\", \"deposit\", \"epochNo\", \"blockNo\",\"epochSlotNo\", \"action\"];\r",
													"    for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"        pm.expect(arrayOfResponseKeys[i]).to.be.oneOf(myKeysList);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/stake-history",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stakes",
												":stakeKey",
												"stake-history"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Zero-based page index (0..N)",
													"disabled": true
												},
												{
													"key": "size",
													"value": "20",
													"description": "The size of the page to be returned",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "dolore non est",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "elit",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "stakeKey",
													"value": "stake1u9pwlay8fvev5yfvnpx8c057n3m0aa5g493qw44zqdycz6sm0cph9",
													"description": "(Required) Stake key"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/stake-history?page=0&size=20&sort=ex&sort=nisi de",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"stakes",
														":stakeKey",
														"stake-history"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "20"
														},
														{
															"key": "sort",
															"value": "ex"
														},
														{
															"key": "sort",
															"value": "nisi de"
														}
													],
													"variable": [
														{
															"key": "stakeKey",
															"value": "enim voluptate Excepteur ullamco",
															"description": "(Required) Stake key"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"time\": \"1957-12-23T12:35:29.705Z\",\n      \"txHash\": \"pariatur\",\n      \"deposit\": 30610829,\n      \"epochSlotNo\": -13365997,\n      \"epochNo\": 92963422,\n      \"fee\": -35664038,\n      \"blockNo\": -97846688,\n      \"blockIndex\": -20422519,\n      \"action\": \"nul\"\n    },\n    {\n      \"time\": \"1999-05-09T04:49:53.077Z\",\n      \"txHash\": \"Duis pariatur dolor\",\n      \"deposit\": -35117243,\n      \"epochSlotNo\": 8475137,\n      \"epochNo\": -43733210,\n      \"fee\": -27898075,\n      \"blockNo\": 67189709,\n      \"blockIndex\": -90661070,\n      \"action\": \"occaecat laborum veniam\"\n    }\n  ],\n  \"totalItems\": -66781591,\n  \"totalPages\": 66195551,\n  \"currentPage\": -51007974\n}"
										}
									]
								},
								{
									"name": "Get all address of stake",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var stt = 200\r",
													"var res_time = 5000\r",
													"var current_page = 0\r",
													"\r",
													"//Compare static data\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(stt);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
													"});\r",
													"\r",
													"pm.test(\"Compare Currentpage\", function () {\r",
													"    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
													"});\r",
													"\r",
													"//Compare format dynamic data\r",
													"pm.test(\"Check data type of the response\", () => {\r",
													"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
													"    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.data[0].txCount).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.data[0].balance).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.data[0].address).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"//Count total contribution\r",
													"pm.test(\"Check number of contributions in response data\", function () {\r",
													"  var number = Object.keys(jsonData).length;\r",
													"  pm.expect(number).to.eql(4)\r",
													"});\r",
													"\r",
													"pm.test(\"Check number of contributions in a record data\", function () {\r",
													"  var number = Object.keys(jsonData.data[0]).length;\r",
													"  pm.expect(number).to.eql(3)\r",
													"});\r",
													"\r",
													"//Check name contribution\r",
													"pm.test(\"Check name of contributions in field data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
													"  var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Check name of contributions in record data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
													"  var myKeysList = [\"address\", \"txCount\", \"balance\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/list-address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stakes",
												":stakeKey",
												"list-address"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Zero-based page index (0..N)",
													"disabled": true
												},
												{
													"key": "size",
													"value": "20",
													"description": "The size of the page to be returned",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "dolore non est",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "elit",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "stakeKey",
													"value": "stake1uypy44wqjznc5w9ns9gsguz4ta83jekrg9d0wupa7j3zsacwvq5ex",
													"description": "(Required) Stake key"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/list-address?page=0&size=20&sort=ex&sort=nisi de",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"stakes",
														":stakeKey",
														"list-address"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "20"
														},
														{
															"key": "sort",
															"value": "ex"
														},
														{
															"key": "sort",
															"value": "nisi de"
														}
													],
													"variable": [
														{
															"key": "stakeKey",
															"value": "enim voluptate Excepteur ullamco",
															"description": "(Required) Stake key"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"address\": \"elit fugiat magna et\",\n      \"txCount\": -96260110,\n      \"balance\": -31166932\n    },\n    {\n      \"address\": \"ea officia culpa\",\n      \"txCount\": 76870377,\n      \"balance\": 78684995\n    }\n  ],\n  \"totalItems\": -86817919,\n  \"totalPages\": -14279308,\n  \"currentPage\": 727956\n}"
										}
									]
								},
								{
									"name": "Get reward transaction of stake key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var stt = 200\r",
													"var res_time = 5000\r",
													"var current_page = 0\r",
													"\r",
													"//Compare static data\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(stt);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
													"});\r",
													"\r",
													"pm.test(\"Compare Currentpage\", function () {\r",
													"    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
													"});\r",
													"\r",
													"//Compare format dynamic data\r",
													"pm.test(\"Check data type of the response\", () => {\r",
													"    let moment = require ('moment');\r",
													"\r",
													"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
													"    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
													"    pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.data[0].blockNo).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");    \r",
													"    pm.expect(jsonData.data[0].amount).to.be.a(\"string\");   \r",
													"    pm.expect(jsonData.data[0].blockIndex).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"//Count total contribution\r",
													"pm.test(\"Check number of contributions in response data\", function () {\r",
													"    var number = Object.keys(jsonData).length;\r",
													"    pm.expect(number).to.eql(4)\r",
													"});\r",
													"\r",
													"pm.test(\"Check number of contributions in a record data\", function () {\r",
													"    var number = Object.keys(jsonData.data[0]).length;\r",
													"    pm.expect(number).to.eql(7)\r",
													"});\r",
													"\r",
													"//Check name contribution\r",
													"pm.test(\"Check name of contributions in field data\", function () {\r",
													"    var arrayOfResponseKeys  = Object.keys(jsonData)\r",
													"    var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
													"    for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"        for (let j = 0; j < myKeysList.length; j++) {\r",
													"            pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Check name of contributions in record data\", function () {\r",
													"    var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
													"    var myKeysList = [\"time\", \"blockIndex\", \"amount\", \"txHash\", \"epochNo\", \"blockNo\", \"epochSlotNo\"];\r",
													"    for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"        pm.expect(arrayOfResponseKeys[i]).to.be.oneOf(myKeysList);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/instantaneous-rewards",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stakes",
												":stakeKey",
												"instantaneous-rewards"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Zero-based page index (0..N)",
													"disabled": true
												},
												{
													"key": "size",
													"value": "20",
													"description": "The size of the page to be returned",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "dolore non est",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "elit",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "stakeKey",
													"value": "stake1uypy44wqjznc5w9ns9gsguz4ta83jekrg9d0wupa7j3zsacwvq5ex",
													"description": "(Required) Stake key"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/instantaneous-rewards?page=0&size=20&sort=ex&sort=nisi de",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"stakes",
														":stakeKey",
														"instantaneous-rewards"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "20"
														},
														{
															"key": "sort",
															"value": "ex"
														},
														{
															"key": "sort",
															"value": "nisi de"
														}
													],
													"variable": [
														{
															"key": "stakeKey",
															"value": "enim voluptate Excepteur ullamco",
															"description": "(Required) Stake key"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"time\": \"2005-06-27T06:09:09.385Z\",\n      \"txHash\": \"eiusmod sit\",\n      \"epochSlotNo\": 33428001,\n      \"epochNo\": -55085995,\n      \"amount\": \"officia sint fugiat cill\",\n      \"blockNo\": 67801809,\n      \"blockIndex\": -96050441\n    },\n    {\n      \"time\": \"1967-09-26T07:57:01.688Z\",\n      \"txHash\": \"non eu adipisicing tempor\",\n      \"epochSlotNo\": -66192336,\n      \"epochNo\": -53252436,\n      \"amount\": \"irure et\",\n      \"blockNo\": 70424806,\n      \"blockIndex\": 19976863\n    }\n  ],\n  \"totalItems\": 277587,\n  \"totalPages\": -41029825,\n  \"currentPage\": 28918008\n}"
										}
									]
								},
								{
									"name": "Get delegation history of stake key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"var stt = 200\r",
													"var res_time = 5000\r",
													"var current_page = 0\r",
													"var randomNumber = Math.floor(Math.random() * jsonData.data.length);\r",
													"\r",
													"//Compare static data\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(stt);\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is less than 5000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
													"});\r",
													"\r",
													"pm.test(\"Compare Currentpage\", function () {\r",
													"    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
													"});\r",
													"\r",
													"//Compare format dynamic data\r",
													"pm.test(\"Check data type of the response\", () => {\r",
													"    let moment = require ('moment');\r",
													"    \r",
													"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
													"    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
													"    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
													"\r",
													"    //random index cho array\r",
													"    if (jsonData.data[randomNumber].length > 6) {\r",
													"\r",
													"        pm.expect(jsonData.data[randomNumber].time).to.include(moment(jsonData.data[randomNumber].time).format('YYYY/MM/DD HH:mm:ss'));\r",
													"        pm.expect(jsonData.data[randomNumber].txHash).to.be.a(\"string\");\r",
													"        pm.expect(jsonData.data[randomNumber].epochNo).to.be.a(\"number\");\r",
													"        pm.expect(jsonData.data[randomNumber].blockNo).to.be.a(\"number\");\r",
													"        pm.expect(jsonData.data[randomNumber].epochSlotNo).to.be.a(\"number\");\r",
													"        pm.expect(jsonData.data[randomNumber].poolData).to.be.a(\"string\");\r",
													"        pm.expect(jsonData.data[randomNumber].poolId).to.be.a(\"string\");\r",
													"        pm.expect(jsonData.data[randomNumber].tickerName).to.be.a(\"string\");\r",
													"            \r",
													"    } else {\r",
													"\r",
													"        pm.expect(jsonData.data[randomNumber].time).to.include(moment(jsonData.data[randomNumber].time).format('YYYY/MM/DD HH:mm:ss'));\r",
													"        pm.expect(jsonData.data[randomNumber].txHash).to.be.a(\"string\");\r",
													"        pm.expect(jsonData.data[randomNumber].epochNo).to.be.a(\"number\");\r",
													"        pm.expect(jsonData.data[randomNumber].blockNo).to.be.a(\"number\");\r",
													"        pm.expect(jsonData.data[randomNumber].epochSlotNo).to.be.a(\"number\");\r",
													"        pm.expect(jsonData.data[randomNumber].poolId).to.be.a(\"string\");\r",
													"\r",
													"    }\r",
													"\r",
													"    \r",
													"});\r",
													"\r",
													"//Count total contribution\r",
													"pm.test(\"Check number of contributions in response data\", function () {\r",
													"  var number = Object.keys(jsonData).length;\r",
													"  pm.expect(number).to.eql(4)\r",
													"});\r",
													"\r",
													"//Check name contribution\r",
													"pm.test(\"Check name of contributions in field data\", function () {\r",
													"    var arrayOfResponseKeys  = Object.keys(jsonData)\r",
													"    var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
													"    \r",
													"    for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"        for (let j = 0; j < myKeysList.length; j++) {\r",
													"            pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Check name of contributions in record data\", function () {\r",
													"    var arrayOfResponseKeys  = Object.keys(jsonData.data[randomNumber])\r",
													"    console.log(randomNumber);\r",
													"    console.log(arrayOfResponseKeys.length);\r",
													"\r",
													"    if (arrayOfResponseKeys.length > 6) {\r",
													"        var myKeysList = [\"time\", \"txHash\", \"poolId\", \"tickerName\", \"poolData\", \"epochNo\", \"blockNo\", \"epochSlotNo\"];\r",
													"    } else {\r",
													"        var myKeysList = [\"time\", \"txHash\", \"poolId\", \"epochNo\", \"blockNo\", \"epochSlotNo\"];\r",
													"    }\r",
													"\r",
													"    for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"        pm.expect(arrayOfResponseKeys[i]).to.be.oneOf(myKeysList);\r",
													"    }\r",
													"});\r",
													"\r",
													"//Scenario\r",
													"pm.test(\"Compare value between Get top delegators and Get delegation history of stake key\", function () {\r",
													"    var stakes_poolId = pm.environment.get(\"stakes_poolId\");\r",
													"\r",
													"    for (let i = 0; i < jsonData.data.length; i++) {\r",
													"        if (jsonData.data[i].poolId === stakes_poolId) {\r",
													"            pm.expect(jsonData.data[i].poolId).to.be.include(stakes_poolId);\r",
													"        }\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stakes/{{stakes_stakeKey}}/delegation-history",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stakes",
												"{{stakes_stakeKey}}",
												"delegation-history"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Zero-based page index (0..N)",
													"disabled": true
												},
												{
													"key": "size",
													"value": "20",
													"description": "The size of the page to be returned",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "dolore non est",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "elit",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/delegation-history?page=0&size=20&sort=ex&sort=nisi de",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"stakes",
														":stakeKey",
														"delegation-history"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "20"
														},
														{
															"key": "sort",
															"value": "ex"
														},
														{
															"key": "sort",
															"value": "nisi de"
														}
													],
													"variable": [
														{
															"key": "stakeKey",
															"value": "enim voluptate Excepteur ullamco",
															"description": "(Required) Stake key"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"time\": \"1975-04-16T11:45:49.946Z\",\n      \"poolId\": \"ut est dolor dolor\",\n      \"stakeAddress\": \"dolor nisi reprehenderit anim\",\n      \"poolData\": \"Lorem aliquip\",\n      \"tickerName\": \"eiusmod sed sunt ipsum\",\n      \"txHash\": \"officia adipisicing non\",\n      \"outSum\": -33769766,\n      \"epochSlotNo\": -92422933,\n      \"epochNo\": 37486967,\n      \"fee\": -7898698,\n      \"blockNo\": -4993602\n    },\n    {\n      \"time\": \"1943-12-08T01:13:37.039Z\",\n      \"poolId\": \"Duis quis do\",\n      \"stakeAddress\": \"do dolore exercitation culpa\",\n      \"poolData\": \"velit dolore dolor Lorem\",\n      \"tickerName\": \"tempo\",\n      \"txHash\": \"in est Excepteur fugiat\",\n      \"outSum\": -84218188,\n      \"epochSlotNo\": -41868088,\n      \"epochNo\": 625573,\n      \"fee\": -58659298,\n      \"blockNo\": -37980674\n    }\n  ],\n  \"totalItems\": -65267270,\n  \"totalPages\": -93836451,\n  \"currentPage\": -37714910\n}"
										}
									]
								}
							]
						},
						{
							"name": "get Data For Stake Registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var stt = 200\r",
											"var res_time = 5000\r",
											"var current_page = 0\r",
											"\r",
											"//Compare static data\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(stt);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
											"});\r",
											"\r",
											"pm.test(\"Compare Currentpage\", function () {\r",
											"    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
											"});\r",
											"\r",
											"//Compare format dynamic data\r",
											"pm.test(\"Check data type of the response\", () => {\r",
											"    let moment = require ('moment');\r",
											"\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].txId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[0].txTime).to.include(moment(jsonData.data[0].txTime).format('YYYY/MM/DD HH:mm:ss'));\r",
											"    pm.expect(jsonData.data[0].block).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].epoch).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].slotNo).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].stakeKey).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in response data\", function () {\r",
											"  var number = Object.keys(jsonData).length;\r",
											"  pm.expect(number).to.eql(4)\r",
											"});\r",
											"\r",
											"pm.test(\"Check number of contributions in a record data\", function () {\r",
											"  var number = Object.keys(jsonData.data[0]).length;\r",
											"  pm.expect(number).to.eql(8)\r",
											"});\r",
											"\r",
											"//Check name contribution\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
											"  var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check name of contributions in record data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
											"  var myKeysList = [\"txId\", \"txHash\", \"txTime\", \"block\", \"epoch\", \"slotNo\", \"epochSlotNo\", \"stakeKey\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/stakes/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"stakes",
										"registration"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)",
											"disabled": true
										},
										{
											"key": "size",
											"value": "20",
											"description": "The size of the page to be returned",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dolore non est",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "elit",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stakes/registration?page=0&size=20&sort=ex&sort=nisi de",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stakes",
												"registration"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "20"
												},
												{
													"key": "sort",
													"value": "ex"
												},
												{
													"key": "sort",
													"value": "nisi de"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"txId\": -47415799,\n      \"txHash\": \"Lorem id\",\n      \"txTime\": \"2012-11-25T02:34:29.611Z\",\n      \"block\": 42308495,\n      \"epoch\": 27968414,\n      \"slotNo\": 76405842,\n      \"epochSlotNo\": 95611944,\n      \"stakeKey\": \"ullamco\"\n    },\n    {\n      \"txId\": 83570792,\n      \"txHash\": \"non pariatur\",\n      \"txTime\": \"2013-05-23T00:36:49.582Z\",\n      \"block\": 28418594,\n      \"epoch\": 86215319,\n      \"slotNo\": -44986141,\n      \"epochSlotNo\": -96199069,\n      \"stakeKey\": \"nulla ex in labore\"\n    }\n  ],\n  \"totalItems\": 61631532,\n  \"totalPages\": 77901863,\n  \"currentPage\": 80781008\n}"
								}
							]
						},
						{
							"name": "Get the highest and lowest balance address",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/stakes/min-max-balance/:stakeKey",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"stakes",
										"min-max-balance",
										":stakeKey"
									],
									"variable": [
										{
											"key": "stakeKey",
											"value": "enim voluptate Excepteur ullamco",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stakes/min-max-balance/:stakeKey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stakes",
												"min-max-balance",
												":stakeKey"
											],
											"variable": [
												{
													"key": "stakeKey",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "[\n  -27729487,\n  -41033476\n]"
								}
							]
						},
						{
							"name": "get Data For Stake De Registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var stt = 200\r",
											"var res_time = 5000\r",
											"var current_page = 0\r",
											"\r",
											"//Compare static data\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(stt);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
											"});\r",
											"\r",
											"pm.test(\"Compare Currentpage\", function () {\r",
											"    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
											"});\r",
											"\r",
											"//Compare format dynamic data\r",
											"pm.test(\"Check data type of the response\", () => {\r",
											"    let moment = require ('moment');\r",
											"\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].txId).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[0].txTime).to.include(moment(jsonData.data[0].txTime).format('YYYY/MM/DD HH:mm:ss'));\r",
											"    pm.expect(jsonData.data[0].block).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].epoch).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].slotNo).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].stakeKey).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in response data\", function () {\r",
											"  var number = Object.keys(jsonData).length;\r",
											"  pm.expect(number).to.eql(4)\r",
											"});\r",
											"\r",
											"pm.test(\"Check number of contributions in a record data\", function () {\r",
											"  var number = Object.keys(jsonData.data[0]).length;\r",
											"  pm.expect(number).to.eql(8)\r",
											"});\r",
											"\r",
											"//Check name contribution\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
											"  var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check name of contributions in record data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
											"  var myKeysList = [\"txId\", \"txHash\", \"txTime\", \"block\", \"epoch\", \"slotNo\", \"epochSlotNo\", \"stakeKey\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/stakes/de-registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"stakes",
										"de-registration"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)",
											"disabled": true
										},
										{
											"key": "size",
											"value": "20",
											"description": "The size of the page to be returned",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dolore non est",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "elit",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stakes/de-registration?page=0&size=20&sort=ex&sort=nisi de",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stakes",
												"de-registration"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "20"
												},
												{
													"key": "sort",
													"value": "ex"
												},
												{
													"key": "sort",
													"value": "nisi de"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"txId\": -98621904,\n      \"txHash\": \"enim eiusmod proident\",\n      \"txTime\": \"1994-11-19T17:30:14.481Z\",\n      \"block\": 87783625,\n      \"epoch\": -36549353,\n      \"slotNo\": -94342578,\n      \"epochSlotNo\": -43738260,\n      \"stakeKey\": \"aliqua esse dolor\"\n    },\n    {\n      \"txId\": -31721255,\n      \"txHash\": \"nulla cillum mollit sed\",\n      \"txTime\": \"2022-10-01T23:31:16.326Z\",\n      \"block\": 97540724,\n      \"epoch\": -89703749,\n      \"slotNo\": -61602724,\n      \"epochSlotNo\": 27497566,\n      \"stakeKey\": \"sed qui dolor sit\"\n    }\n  ],\n  \"totalItems\": 24560076,\n  \"totalPages\": 21076638,\n  \"currentPage\": -72670358\n}"
								}
							]
						},
						{
							"name": "Get active stake, live stake and total stake",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var stt = 200\r",
											"var res_time = 5000\r",
											"\r",
											"//Compare static data\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(stt);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
											"});\r",
											"\r",
											"//Compare format dynamic data\r",
											"pm.test(\"Check data type of the response\", () => {\r",
											"    pm.expect(jsonData.activeStake).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.liveStake).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in response data\", function () {\r",
											"  var number = Object.keys(jsonData).length;\r",
											"  pm.expect(number).to.eql(2)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/stakes/analytics",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"stakes",
										"analytics"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stakes/analytics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stakes",
												"analytics"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"activeStake\": -45589361,\n  \"liveStake\": 67412918\n}"
								}
							]
						},
						{
							"name": "Get stake balance analytics",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/stakes/analytics-reward/:stakeKey",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"stakes",
										"analytics-reward",
										":stakeKey"
									],
									"variable": [
										{
											"key": "stakeKey",
											"value": "enim voluptate Excepteur ullamco",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stakes/analytics-reward/:stakeKey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stakes",
												"analytics-reward",
												":stakeKey"
											],
											"variable": [
												{
													"key": "stakeKey",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"epoch\": 33648155,\n    \"value\": -48877460\n  },\n  {\n    \"epoch\": 74095361,\n    \"value\": 6718973\n  }\n]"
								}
							]
						},
						{
							"name": "Get stake balance analytics",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/stakes/analytics-balance/:stakeKey/:type",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"stakes",
										"analytics-balance",
										":stakeKey",
										":type"
									],
									"variable": [
										{
											"key": "stakeKey",
											"value": "enim voluptate Excepteur ullamco",
											"description": "(Required) "
										},
										{
											"key": "type",
											"value": "THREE_MONTH",
											"description": "(Required) Type analytics: 1d, 1w, 1m, 3m"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stakes/analytics-balance/:stakeKey/:type",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stakes",
												"analytics-balance",
												":stakeKey",
												":type"
											],
											"variable": [
												{
													"key": "stakeKey",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) "
												},
												{
													"key": "type",
													"value": "THREE_MONTH",
													"description": "(Required) Type analytics: 1d, 1w, 1m, 3m"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"date\": \"1974-01-28\",\n    \"value\": 97554919\n  },\n  {\n    \"date\": \"1997-05-23\",\n    \"value\": 32469025\n  }\n]"
								}
							]
						},
						{
							"name": "Get a stake detail by stake key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var stt = 200\r",
											"var res_time = 5000\r",
											"var stake_address = \"stake1u9tqcg5qatru0k7h45vtldj7j3c3zhgr6ndglgwu866qglqkzv6c2\"\r",
											"var pool_id = \"pool1w7c2j0px43jmudhf48ezp7dy8j7904c9l3wc7809lhh2z026hch\"\r",
											"\r",
											"//Compare static data\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(stt);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
											"});\r",
											"\r",
											"pm.test(\"Compare Stakeaddress\", function () {\r",
											"    pm.expect(jsonData.stakeAddress).to.include(stake_address);\r",
											"});\r",
											"\r",
											"pm.test(\"Compare PoolId\", function () {\r",
											"    pm.expect(jsonData.pool.poolId).to.include(pool_id);\r",
											"});\r",
											"\r",
											"//Compare format dynamic data\r",
											"pm.test(\"Check data type of the response\", () => {\r",
											"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.stakeAddress).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.totalStake).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.rewardAvailable).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.rewardWithdrawn).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.pool).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.rewardPools).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in response data\", function () {\r",
											"  var number = Object.keys(jsonData).length;\r",
											"  pm.expect(number).to.eql(7)\r",
											"});\r",
											"\r",
											"pm.test(\"Check number of contributions in pool data\", function () {\r",
											"  var number = Object.keys(jsonData.pool).length;\r",
											"  pm.expect(number).to.eql(5)\r",
											"});\r",
											"\r",
											"//Check name contribution\r",
											"pm.test(\"Check name of contributions in response data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
											"  var myKeysList = [\"status\", \"stakeAddress\", \"totalStake\", \"rewardAvailable\", \"rewardWithdrawn\", \"pool\", \"rewardPools\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check name of contributions in pool field\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData.pool)\r",
											"  var myKeysList = [\"tickerName\", \"poolName\", \"poolId\", \"logoUrl\", \"iconUrl\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/stakes/address/:address",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"stakes",
										"address",
										":address"
									],
									"variable": [
										{
											"key": "address",
											"value": "addr1q8pusk379txj05qkqefk6yh5ah757qqt0cshserew99fks2kps3gp6k8clda0tgch7m9a9r3z9ws84x637sac045q37q6tdtvz",
											"description": "(Required) Address"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stakes/address/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stakes",
												"address",
												":address"
											],
											"variable": [
												{
													"key": "address",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) Address"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"status\": \"ACTIVE\",\n  \"stakeAddress\": \"exercitation in eiusmod occaecat\",\n  \"totalStake\": 51974979,\n  \"rewardAvailable\": 76531293,\n  \"rewardWithdrawn\": -18505654,\n  \"pool\": {\n    \"tickerName\": \"id Ut\",\n    \"poolName\": \"deserunt occaec\",\n    \"poolId\": \"do nostrud veniam\"\n  },\n  \"rewardPools\": [\n    \"Lorem cillum\",\n    \"dolor ex consequat amet\"\n  ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "stake-lifecycle/{stakeKey}",
					"item": [
						{
							"name": "withdrawals",
							"item": [
								{
									"name": "get Withdrawals",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/withdrawals?txHash=enim voluptate Excepteur ullamco&fromDate=1954-04-24T02:25:02.171Z&toDate=1954-04-24T02:25:02.171Z&page=0&size=20&sort=id,DESC",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stake-lifecycle",
												":stakeKey",
												"withdrawals"
											],
											"query": [
												{
													"key": "txHash",
													"value": "enim voluptate Excepteur ullamco"
												},
												{
													"key": "fromDate",
													"value": "1954-04-24T02:25:02.171Z"
												},
												{
													"key": "toDate",
													"value": "1954-04-24T02:25:02.171Z"
												},
												{
													"key": "page",
													"value": "0",
													"description": "Zero-based page index (0..N)"
												},
												{
													"key": "size",
													"value": "20",
													"description": "The size of the page to be returned"
												},
												{
													"key": "sort",
													"value": "id,DESC",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
												}
											],
											"variable": [
												{
													"key": "stakeKey",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) stake address view"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/withdrawals?txHash=enim voluptate Excepteur ullamco&fromDate=1954-04-24T02:25:02.171Z&toDate=1954-04-24T02:25:02.171Z&page=0&size=20&sort=id,DESC",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"stake-lifecycle",
														":stakeKey",
														"withdrawals"
													],
													"query": [
														{
															"key": "txHash",
															"value": "enim voluptate Excepteur ullamco"
														},
														{
															"key": "fromDate",
															"value": "1954-04-24T02:25:02.171Z"
														},
														{
															"key": "toDate",
															"value": "1954-04-24T02:25:02.171Z"
														},
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "20"
														},
														{
															"key": "sort",
															"value": "id,DESC"
														}
													],
													"variable": [
														{
															"key": "stakeKey",
															"value": "enim voluptate Excepteur ullamco",
															"description": "(Required) stake address view"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"txHash\": \"non incididunt culpa sint qui\",\n      \"value\": -71458948,\n      \"fee\": 10702194,\n      \"time\": \"1956-12-06T23:13:41.758Z\"\n    },\n    {\n      \"txHash\": \"sed non anim sint Lorem\",\n      \"value\": -73053401,\n      \"fee\": -27945621,\n      \"time\": \"2006-08-21T08:44:51.861Z\"\n    }\n  ],\n  \"totalItems\": -76775085,\n  \"totalPages\": -10964816,\n  \"currentPage\": -4664917\n}"
										}
									]
								},
								{
									"name": "get Detail Withdrawal",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/withdrawals/:hash",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stake-lifecycle",
												":stakeKey",
												"withdrawals",
												":hash"
											],
											"variable": [
												{
													"key": "stakeKey",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) stake address view"
												},
												{
													"key": "hash",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) tx hash"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/withdrawals/:hash",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"stake-lifecycle",
														":stakeKey",
														"withdrawals",
														":hash"
													],
													"variable": [
														{
															"key": "stakeKey",
															"value": "enim voluptate Excepteur ullamco",
															"description": "(Required) stake address view"
														},
														{
															"key": "hash",
															"value": "enim voluptate Excepteur ullamco",
															"description": "(Required) tx hash"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"txHash\": \"commodo et\",\n  \"amount\": 73785277,\n  \"fee\": 88839491,\n  \"time\": \"1947-10-22T18:43:03.406Z\",\n  \"stakeTotalAmount\": -74986966,\n  \"stakeRewardAvailable\": 54988549\n}"
										}
									]
								}
							]
						},
						{
							"name": "delegations",
							"item": [
								{
									"name": "get Delegations",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/delegations?txHash=enim voluptate Excepteur ullamco&fromDate=1954-04-24T02:25:02.171Z&toDate=1954-04-24T02:25:02.171Z&page=0&size=20&sort=tx,DESC",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stake-lifecycle",
												":stakeKey",
												"delegations"
											],
											"query": [
												{
													"key": "txHash",
													"value": "enim voluptate Excepteur ullamco"
												},
												{
													"key": "fromDate",
													"value": "1954-04-24T02:25:02.171Z"
												},
												{
													"key": "toDate",
													"value": "1954-04-24T02:25:02.171Z"
												},
												{
													"key": "page",
													"value": "0",
													"description": "Zero-based page index (0..N)"
												},
												{
													"key": "size",
													"value": "20",
													"description": "The size of the page to be returned"
												},
												{
													"key": "sort",
													"value": "tx,DESC",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
												}
											],
											"variable": [
												{
													"key": "stakeKey",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) stake address view"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/delegations?txHash=enim voluptate Excepteur ullamco&fromDate=1954-04-24T02:25:02.171Z&toDate=1954-04-24T02:25:02.171Z&page=0&size=20&sort=tx,DESC",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"stake-lifecycle",
														":stakeKey",
														"delegations"
													],
													"query": [
														{
															"key": "txHash",
															"value": "enim voluptate Excepteur ullamco"
														},
														{
															"key": "fromDate",
															"value": "1954-04-24T02:25:02.171Z"
														},
														{
															"key": "toDate",
															"value": "1954-04-24T02:25:02.171Z"
														},
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "20"
														},
														{
															"key": "sort",
															"value": "tx,DESC"
														}
													],
													"variable": [
														{
															"key": "stakeKey",
															"value": "enim voluptate Excepteur ullamco",
															"description": "(Required) stake address view"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"txHash\": \"do cillum ut anim\",\n      \"outSum\": 73772194,\n      \"fee\": -57597501,\n      \"time\": \"1992-06-16T06:12:26.455Z\"\n    },\n    {\n      \"txHash\": \"enim magna amet laborum\",\n      \"outSum\": -6895418,\n      \"fee\": -64340205,\n      \"time\": \"1973-12-12T05:27:43.964Z\"\n    }\n  ],\n  \"totalItems\": 34054613,\n  \"totalPages\": -99778426,\n  \"currentPage\": -43808607\n}"
										}
									]
								},
								{
									"name": "get Delegation Detail",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/delegations/:hash",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stake-lifecycle",
												":stakeKey",
												"delegations",
												":hash"
											],
											"variable": [
												{
													"key": "stakeKey",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) stake address view"
												},
												{
													"key": "hash",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) tx hash"
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/delegations/:hash",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"stake-lifecycle",
														":stakeKey",
														"delegations",
														":hash"
													],
													"variable": [
														{
															"key": "stakeKey",
															"value": "enim voluptate Excepteur ullamco",
															"description": "(Required) stake address view"
														},
														{
															"key": "hash",
															"value": "enim voluptate Excepteur ullamco",
															"description": "(Required) tx hash"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"txHash\": \"quis ut ad occaecat proident\",\n  \"blockNo\": -298026,\n  \"epoch\": -92058668,\n  \"outSum\": -60910978,\n  \"fee\": 58162253,\n  \"poolId\": \"Ut\",\n  \"poolName\": \"qui ut\",\n  \"time\": \"2004-03-01T18:43:07.248Z\",\n  \"stakeTotalAmount\": -2129612\n}"
										}
									]
								}
							]
						},
						{
							"name": "get Stake Life Cycle",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"stake-lifecycle",
										":stakeKey"
									],
									"variable": [
										{
											"key": "stakeKey",
											"value": "enim voluptate Excepteur ullamco",
											"description": "(Required) Stake key"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stake-lifecycle",
												":stakeKey"
											],
											"variable": [
												{
													"key": "stakeKey",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) Stake key"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"hasRegistration\": true,\n  \"hasDelegation\": true,\n  \"hashRewards\": false,\n  \"hasWithdrawal\": false,\n  \"hasDeRegistration\": true\n}"
								}
							]
						},
						{
							"name": "get Wallet Activities",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/wallet-activity?page=0&size=20&sort=tx,DESC",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"stake-lifecycle",
										":stakeKey",
										"wallet-activity"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)"
										},
										{
											"key": "size",
											"value": "20",
											"description": "The size of the page to be returned"
										},
										{
											"key": "sort",
											"value": "tx,DESC",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
										}
									],
									"variable": [
										{
											"key": "stakeKey",
											"value": "enim voluptate Excepteur ullamco",
											"description": "(Required) stake address view"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/wallet-activity?page=0&size=20&sort=tx,DESC",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stake-lifecycle",
												":stakeKey",
												"wallet-activity"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "20"
												},
												{
													"key": "sort",
													"value": "tx,DESC"
												}
											],
											"variable": [
												{
													"key": "stakeKey",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) stake address view"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"txHash\": \"aute nulla ut commodo\",\n      \"amount\": -4525281,\n      \"fee\": -68475975,\n      \"time\": \"1978-03-05T03:58:51.722Z\",\n      \"type\": \"FEE_PAID\",\n      \"status\": \"PENDING\"\n    },\n    {\n      \"txHash\": \"qui volupt\",\n      \"amount\": 17099594,\n      \"fee\": -64834611,\n      \"time\": \"1994-08-05T07:50:19.567Z\",\n      \"type\": \"UNKNOWN\",\n      \"status\": \"FAIL\"\n    }\n  ],\n  \"totalItems\": -53011264,\n  \"totalPages\": 69186284,\n  \"currentPage\": 46462972\n}"
								}
							]
						},
						{
							"name": "get Rewards",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/rewards?page=0&size=20&sort=id,DESC",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"stake-lifecycle",
										":stakeKey",
										"rewards"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)"
										},
										{
											"key": "size",
											"value": "20",
											"description": "The size of the page to be returned"
										},
										{
											"key": "sort",
											"value": "id,DESC",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
										}
									],
									"variable": [
										{
											"key": "stakeKey",
											"value": "enim voluptate Excepteur ullamco",
											"description": "(Required) stake address view"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/rewards?page=0&size=20&sort=id,DESC",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stake-lifecycle",
												":stakeKey",
												"rewards"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "20"
												},
												{
													"key": "sort",
													"value": "id,DESC"
												}
											],
											"variable": [
												{
													"key": "stakeKey",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) stake address view"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"epoch\": 44133318,\n      \"time\": \"1943-09-18T08:18:55.212Z\",\n      \"amount\": 41763932\n    },\n    {\n      \"epoch\": -85047688,\n      \"time\": \"1953-08-01T05:38:09.089Z\",\n      \"amount\": -40139738\n    }\n  ],\n  \"totalItems\": 77402501,\n  \"totalPages\": -64447442,\n  \"currentPage\": 55477996\n}"
								}
							]
						},
						{
							"name": "get Reward Activities",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/reward-activity?page=0&size=20&sort=time,DESC",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"stake-lifecycle",
										":stakeKey",
										"reward-activity"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)"
										},
										{
											"key": "size",
											"value": "20",
											"description": "The size of the page to be returned"
										},
										{
											"key": "sort",
											"value": "time,DESC",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
										}
									],
									"variable": [
										{
											"key": "stakeKey",
											"value": "enim voluptate Excepteur ullamco",
											"description": "(Required) stake address view"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/reward-activity?page=0&size=20&sort=time,DESC",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stake-lifecycle",
												":stakeKey",
												"reward-activity"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "20"
												},
												{
													"key": "sort",
													"value": "time,DESC"
												}
											],
											"variable": [
												{
													"key": "stakeKey",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) stake address view"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"epochNo\": 9230869,\n      \"amount\": -63807264,\n      \"time\": \"2021-09-15T15:18:32.714Z\",\n      \"type\": \"REWARD_RECEIVED\"\n    },\n    {\n      \"epochNo\": 8541830,\n      \"amount\": -7886810,\n      \"time\": \"2013-05-29T15:49:33.074Z\",\n      \"type\": \"REWARD_WITHDRAWN\"\n    }\n  ],\n  \"totalItems\": -46981655,\n  \"totalPages\": 65087046,\n  \"currentPage\": 79857619\n}"
								}
							]
						},
						{
							"name": "get Stake Registrations",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/registrations?txHash=enim voluptate Excepteur ullamco&fromDate=1954-04-24T02:25:02.171Z&toDate=1954-04-24T02:25:02.171Z&page=0&size=20&sort=tx,DESC",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"stake-lifecycle",
										":stakeKey",
										"registrations"
									],
									"query": [
										{
											"key": "txHash",
											"value": "enim voluptate Excepteur ullamco"
										},
										{
											"key": "fromDate",
											"value": "1954-04-24T02:25:02.171Z"
										},
										{
											"key": "toDate",
											"value": "1954-04-24T02:25:02.171Z"
										},
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)"
										},
										{
											"key": "size",
											"value": "20",
											"description": "The size of the page to be returned"
										},
										{
											"key": "sort",
											"value": "tx,DESC",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
										}
									],
									"variable": [
										{
											"key": "stakeKey",
											"value": "enim voluptate Excepteur ullamco",
											"description": "(Required) Stake key"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/registrations?txHash=enim voluptate Excepteur ullamco&fromDate=1954-04-24T02:25:02.171Z&toDate=1954-04-24T02:25:02.171Z&page=0&size=20&sort=tx,DESC",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stake-lifecycle",
												":stakeKey",
												"registrations"
											],
											"query": [
												{
													"key": "txHash",
													"value": "enim voluptate Excepteur ullamco"
												},
												{
													"key": "fromDate",
													"value": "1954-04-24T02:25:02.171Z"
												},
												{
													"key": "toDate",
													"value": "1954-04-24T02:25:02.171Z"
												},
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "20"
												},
												{
													"key": "sort",
													"value": "tx,DESC"
												}
											],
											"variable": [
												{
													"key": "stakeKey",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) Stake key"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"txHash\": \"labore eu\",\n      \"fee\": 23957913,\n      \"deposit\": 20484447,\n      \"time\": \"1979-11-20T17:10:52.694Z\"\n    },\n    {\n      \"txHash\": \"laboris sed Duis culpa\",\n      \"fee\": -94369687,\n      \"deposit\": 93776981,\n      \"time\": \"1959-06-20T21:44:15.257Z\"\n    }\n  ],\n  \"totalItems\": 24592217,\n  \"totalPages\": 69098316,\n  \"currentPage\": 73343224\n}"
								}
							]
						},
						{
							"name": "get Stake De Registrations",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/de-registrations?txHash=enim voluptate Excepteur ullamco&fromDate=1954-04-24T02:25:02.171Z&toDate=1954-04-24T02:25:02.171Z&page=0&size=20&sort=tx,DESC",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"stake-lifecycle",
										":stakeKey",
										"de-registrations"
									],
									"query": [
										{
											"key": "txHash",
											"value": "enim voluptate Excepteur ullamco"
										},
										{
											"key": "fromDate",
											"value": "1954-04-24T02:25:02.171Z"
										},
										{
											"key": "toDate",
											"value": "1954-04-24T02:25:02.171Z"
										},
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)"
										},
										{
											"key": "size",
											"value": "20",
											"description": "The size of the page to be returned"
										},
										{
											"key": "sort",
											"value": "tx,DESC",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
										}
									],
									"variable": [
										{
											"key": "stakeKey",
											"value": "enim voluptate Excepteur ullamco",
											"description": "(Required) Stake key"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/de-registrations?txHash=enim voluptate Excepteur ullamco&fromDate=1954-04-24T02:25:02.171Z&toDate=1954-04-24T02:25:02.171Z&page=0&size=20&sort=tx,DESC",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"stake-lifecycle",
												":stakeKey",
												"de-registrations"
											],
											"query": [
												{
													"key": "txHash",
													"value": "enim voluptate Excepteur ullamco"
												},
												{
													"key": "fromDate",
													"value": "1954-04-24T02:25:02.171Z"
												},
												{
													"key": "toDate",
													"value": "1954-04-24T02:25:02.171Z"
												},
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "20"
												},
												{
													"key": "sort",
													"value": "tx,DESC"
												}
											],
											"variable": [
												{
													"key": "stakeKey",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) Stake key"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"txHash\": \"labore eu\",\n      \"fee\": 23957913,\n      \"deposit\": 20484447,\n      \"time\": \"1979-11-20T17:10:52.694Z\"\n    },\n    {\n      \"txHash\": \"laboris sed Duis culpa\",\n      \"fee\": -94369687,\n      \"deposit\": 93776981,\n      \"time\": \"1959-06-20T21:44:15.257Z\"\n    }\n  ],\n  \"totalItems\": 24592217,\n  \"totalPages\": 69098316,\n  \"currentPage\": 73343224\n}"
								}
							]
						}
					]
				},
				{
					"name": "protocols",
					"item": [
						{
							"name": "Get current protocol latest change",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/protocols/latest",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"protocols",
										"latest"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/protocols/latest",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"protocols",
												"latest"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"epochChange\": {\n    \"startEpoch\": -8083734,\n    \"endEpoch\": -85634192\n  },\n  \"minFeeA\": {\n    \"time\": \"1978-07-11T12:50:33.239Z\",\n    \"transactionHash\": \"ut culpa ipsum sunt quis\",\n    \"value\": {},\n    \"status\": \"UPDATED\"\n  },\n  \"minFeeB\": {\n    \"time\": \"1988-01-03T15:04:54.571Z\",\n    \"transactionHash\": \"dolor ut aliquip amet\",\n    \"value\": {},\n    \"status\": \"UPDATED\"\n  },\n  \"maxBlockSize\": {\n    \"time\": \"1969-03-19T11:45:00.257Z\",\n    \"transactionHash\": \"sed\",\n    \"value\": {},\n    \"status\": \"NOT_CHANGE\"\n  },\n  \"maxTxSize\": {\n    \"time\": \"2017-01-26T14:59:21.670Z\",\n    \"transactionHash\": \"laborum\",\n    \"value\": {},\n    \"status\": \"UPDATED\"\n  },\n  \"maxBhSize\": {\n    \"time\": \"1994-01-22T08:44:23.608Z\",\n    \"transactionHash\": \"in non dolor esse Ut\",\n    \"value\": {},\n    \"status\": \"NOT_EXIST\"\n  },\n  \"keyDeposit\": {\n    \"time\": \"2016-02-20T22:45:36.292Z\",\n    \"transactionHash\": \"consequat ipsum quis et\",\n    \"value\": {},\n    \"status\": \"NOT_EXIST\"\n  },\n  \"poolDeposit\": {\n    \"time\": \"1958-04-25T14:20:55.855Z\",\n    \"transactionHash\": \"consequat laborum incidid\",\n    \"value\": {},\n    \"status\": \"NOT_CHANGE\"\n  },\n  \"maxEpoch\": {\n    \"time\": \"1991-12-10T14:53:44.960Z\",\n    \"transactionHash\": \"in adipisicing\",\n    \"value\": {},\n    \"status\": \"NOT_EXIST\"\n  },\n  \"optimalPoolCount\": {\n    \"time\": \"2003-07-22T08:14:04.802Z\",\n    \"transactionHash\": \"dolore quis ali\",\n    \"value\": {},\n    \"status\": \"ADDED\"\n  },\n  \"influence\": {\n    \"time\": \"1975-04-08T19:55:35.635Z\",\n    \"transactionHash\": \"commodo in\",\n    \"value\": {},\n    \"status\": \"NOT_EXIST\"\n  },\n  \"monetaryExpandRate\": {\n    \"time\": \"1967-12-10T02:00:51.795Z\",\n    \"transactionHash\": \"Excepteur\",\n    \"value\": {},\n    \"status\": \"NOT_CHANGE\"\n  },\n  \"treasuryGrowthRate\": {\n    \"time\": \"1967-06-12T09:07:35.786Z\",\n    \"transactionHash\": \"labore quis nostrud dolor eu\",\n    \"value\": {},\n    \"status\": \"ADDED\"\n  },\n  \"decentralisation\": {\n    \"time\": \"1985-05-31T19:40:31.559Z\",\n    \"transactionHash\": \"dolore la\",\n    \"value\": {},\n    \"status\": \"UPDATED\"\n  },\n  \"entropy\": {\n    \"time\": \"1969-05-22T00:06:10.463Z\",\n    \"transactionHash\": \"enim\",\n    \"value\": {},\n    \"status\": \"ADDED\"\n  },\n  \"protocolMajor\": {\n    \"time\": \"2008-02-01T23:02:23.810Z\",\n    \"transactionHash\": \"sed consectetur pariatur\",\n    \"value\": {},\n    \"status\": \"NOT_EXIST\"\n  },\n  \"protocolMinor\": {\n    \"time\": \"2012-06-27T23:12:08.181Z\",\n    \"transactionHash\": \"esse est sunt amet eiusmod\",\n    \"value\": {},\n    \"status\": \"UPDATED\"\n  },\n  \"minUtxoValue\": {\n    \"time\": \"1976-01-18T10:40:25.810Z\",\n    \"transactionHash\": \"in\",\n    \"value\": {},\n    \"status\": \"UPDATED\"\n  },\n  \"minPoolCost\": {\n    \"time\": \"1951-10-27T15:20:56.879Z\",\n    \"transactionHash\": \"fugiat irure culpa labore\",\n    \"value\": {},\n    \"status\": \"UPDATED\"\n  },\n  \"costModel\": {\n    \"time\": \"1982-06-14T07:14:34.752Z\",\n    \"transactionHash\": \"anim eu\",\n    \"value\": {},\n    \"status\": \"NOT_CHANGE\"\n  },\n  \"priceMem\": {\n    \"time\": \"2018-10-24T18:28:09.118Z\",\n    \"transactionHash\": \"proident occaecat laboris\",\n    \"value\": {},\n    \"status\": \"UPDATED\"\n  },\n  \"priceStep\": {\n    \"time\": \"1990-06-26T09:01:25.634Z\",\n    \"transactionHash\": \"quis pariatur\",\n    \"value\": {},\n    \"status\": \"NOT_CHANGE\"\n  },\n  \"maxTxExMem\": {\n    \"time\": \"1954-07-24T03:59:27.541Z\",\n    \"transactionHash\": \"eu minim\",\n    \"value\": {},\n    \"status\": \"ADDED\"\n  },\n  \"maxTxExSteps\": {\n    \"time\": \"1982-01-04T08:58:57.402Z\",\n    \"transactionHash\": \"nisi veniam do cillum aute\",\n    \"value\": {},\n    \"status\": \"ADDED\"\n  },\n  \"maxBlockExMem\": {\n    \"time\": \"1953-04-23T09:07:23.488Z\",\n    \"transactionHash\": \"nisi irure adi\",\n    \"value\": {},\n    \"status\": \"NOT_CHANGE\"\n  },\n  \"maxBlockExSteps\": {\n    \"time\": \"1997-09-19T11:49:05.203Z\",\n    \"transactionHash\": \"esse in eiusmod aliqua\",\n    \"value\": {},\n    \"status\": \"NOT_CHANGE\"\n  },\n  \"maxValSize\": {\n    \"time\": \"1981-10-10T19:30:07.243Z\",\n    \"transactionHash\": \"et irure\",\n    \"value\": {},\n    \"status\": \"NOT_CHANGE\"\n  },\n  \"collateralPercent\": {\n    \"time\": \"1948-06-21T12:44:30.971Z\",\n    \"transactionHash\": \"do est\",\n    \"value\": {},\n    \"status\": \"NOT_EXIST\"\n  },\n  \"maxCollateralInputs\": {\n    \"time\": \"1967-01-21T15:02:09.630Z\",\n    \"transactionHash\": \"enim dolor\",\n    \"value\": {},\n    \"status\": \"NOT_CHANGE\"\n  },\n  \"coinsPerUtxoSize\": {\n    \"time\": \"2013-11-26T14:45:12.580Z\",\n    \"transactionHash\": \"fugiat velit eu Duis\",\n    \"value\": {},\n    \"status\": \"NOT_EXIST\"\n  },\n  \"timestamp\": \"1964-05-01T17:23:35.050Z\",\n  \"empty\": true\n}"
								}
							]
						},
						{
							"name": "Get current protocol history change",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/protocols/histories/filter/:protocolsTypes?startTime=20167949&endTime=20167949",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"protocols",
										"histories",
										"filter",
										":protocolsTypes"
									],
									"query": [
										{
											"key": "startTime",
											"value": "20167949"
										},
										{
											"key": "endTime",
											"value": "20167949"
										}
									],
									"variable": [
										{
											"key": "protocolsTypes",
											"value": "PRICE_STEP,MONETARY_EXPAND_RATE",
											"description": "(Required) protocol want to filter"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/protocols/histories/filter/:protocolsTypes?startTime=20167949&endTime=20167949",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"protocols",
												"histories",
												"filter",
												":protocolsTypes"
											],
											"query": [
												{
													"key": "startTime",
													"value": "20167949"
												},
												{
													"key": "endTime",
													"value": "20167949"
												}
											],
											"variable": [
												{
													"key": "protocolsTypes",
													"value": "PRICE_STEP,MONETARY_EXPAND_RATE",
													"description": "(Required) protocol want to filter"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"epochChanges\": [\n    {\n      \"startEpoch\": -2593736,\n      \"endEpoch\": -41540811\n    },\n    {\n      \"startEpoch\": 80675001,\n      \"endEpoch\": -24366975\n    }\n  ],\n  \"minFeeA\": [\n    {\n      \"time\": \"1955-12-18T06:06:19.857Z\",\n      \"transactionHash\": \"in ipsum\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    },\n    {\n      \"time\": \"2009-05-11T03:39:12.513Z\",\n      \"transactionHash\": \"non fugiat Duis nisi\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    }\n  ],\n  \"minFeeB\": [\n    {\n      \"time\": \"2007-07-31T12:42:59.551Z\",\n      \"transactionHash\": \"nulla officia ex esse\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    },\n    {\n      \"time\": \"2007-08-28T01:20:51.351Z\",\n      \"transactionHash\": \"in in\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    }\n  ],\n  \"maxBlockSize\": [\n    {\n      \"time\": \"2022-01-22T03:38:20.470Z\",\n      \"transactionHash\": \"in minim\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    },\n    {\n      \"time\": \"1990-08-08T06:24:55.524Z\",\n      \"transactionHash\": \"fugiat ut \",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    }\n  ],\n  \"maxTxSize\": [\n    {\n      \"time\": \"1969-04-21T01:53:27.253Z\",\n      \"transactionHash\": \"ullamco\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    },\n    {\n      \"time\": \"1971-08-06T21:00:27.047Z\",\n      \"transactionHash\": \"ut aute veniam\",\n      \"value\": {},\n      \"status\": \"NOT_EXIST\"\n    }\n  ],\n  \"maxBhSize\": [\n    {\n      \"time\": \"1996-09-09T20:18:14.993Z\",\n      \"transactionHash\": \"cupidatat anim consequat\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    },\n    {\n      \"time\": \"1989-05-26T11:59:53.617Z\",\n      \"transactionHash\": \"nulla enim\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    }\n  ],\n  \"keyDeposit\": [\n    {\n      \"time\": \"1952-05-17T17:22:15.459Z\",\n      \"transactionHash\": \"sint est qui\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    },\n    {\n      \"time\": \"1945-07-04T12:16:49.606Z\",\n      \"transactionHash\": \"ut sint non officia deserunt\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    }\n  ],\n  \"poolDeposit\": [\n    {\n      \"time\": \"1960-03-04T02:11:57.011Z\",\n      \"transactionHash\": \"laboris voluptate dolore\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    },\n    {\n      \"time\": \"2021-12-18T23:28:42.156Z\",\n      \"transactionHash\": \"consequat laboris esse ex\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    }\n  ],\n  \"maxEpoch\": [\n    {\n      \"time\": \"1967-11-25T15:43:31.933Z\",\n      \"transactionHash\": \"officia ut adipisic\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    },\n    {\n      \"time\": \"1972-08-23T21:12:15.437Z\",\n      \"transactionHash\": \"occaecat anim\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    }\n  ],\n  \"optimalPoolCount\": [\n    {\n      \"time\": \"1977-12-01T18:11:06.572Z\",\n      \"transactionHash\": \"officia enim\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    },\n    {\n      \"time\": \"1949-02-23T17:59:22.904Z\",\n      \"transactionHash\": \"non sit\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    }\n  ],\n  \"influence\": [\n    {\n      \"time\": \"1987-07-13T22:34:55.451Z\",\n      \"transactionHash\": \"eiusmod occaecat deserunt\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    },\n    {\n      \"time\": \"1994-03-21T08:56:59.585Z\",\n      \"transactionHash\": \"in cillum ut nostrud\",\n      \"value\": {},\n      \"status\": \"NOT_EXIST\"\n    }\n  ],\n  \"monetaryExpandRate\": [\n    {\n      \"time\": \"2013-01-18T16:53:28.811Z\",\n      \"transactionHash\": \"anim laborum pariatur sit\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    },\n    {\n      \"time\": \"1949-04-21T14:55:49.652Z\",\n      \"transactionHash\": \"sed fugiat ex ea\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    }\n  ],\n  \"treasuryGrowthRate\": [\n    {\n      \"time\": \"2001-03-29T05:54:55.883Z\",\n      \"transactionHash\": \"Duis cupidatat minim fugiat\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    },\n    {\n      \"time\": \"2020-10-13T16:51:05.700Z\",\n      \"transactionHash\": \"aliquip consequat laboris reprehenderit\",\n      \"value\": {},\n      \"status\": \"NOT_EXIST\"\n    }\n  ],\n  \"decentralisation\": [\n    {\n      \"time\": \"1963-03-21T01:45:13.779Z\",\n      \"transactionHash\": \"Excepteur occaecat enim ut\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    },\n    {\n      \"time\": \"1961-05-12T12:57:09.466Z\",\n      \"transactionHash\": \"Excepteur dolor dolore non laborum\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    }\n  ],\n  \"entropy\": [\n    {\n      \"time\": \"1989-04-26T16:46:17.107Z\",\n      \"transactionHash\": \"ullamco consectetur eiusmod laboris et\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    },\n    {\n      \"time\": \"1981-04-14T06:58:03.250Z\",\n      \"transactionHash\": \"ea et\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    }\n  ],\n  \"protocolMajor\": [\n    {\n      \"time\": \"1992-12-17T08:09:00.295Z\",\n      \"transactionHash\": \"sint occaecat cupidatat quis\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    },\n    {\n      \"time\": \"1985-03-08T00:04:41.442Z\",\n      \"transactionHash\": \"officia Lorem nulla conseq\",\n      \"value\": {},\n      \"status\": \"NOT_EXIST\"\n    }\n  ],\n  \"protocolMinor\": [\n    {\n      \"time\": \"2007-10-05T23:24:57.035Z\",\n      \"transactionHash\": \"cillum ad in\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    },\n    {\n      \"time\": \"2017-12-16T07:36:52.901Z\",\n      \"transactionHash\": \"Ut\",\n      \"value\": {},\n      \"status\": \"NOT_EXIST\"\n    }\n  ],\n  \"minUtxoValue\": [\n    {\n      \"time\": \"2005-06-28T02:38:27.622Z\",\n      \"transactionHash\": \"nisi Lorem in\",\n      \"value\": {},\n      \"status\": \"NOT_EXIST\"\n    },\n    {\n      \"time\": \"2020-07-10T07:53:02.256Z\",\n      \"transactionHash\": \"dolore officia Duis nisi\",\n      \"value\": {},\n      \"status\": \"NOT_EXIST\"\n    }\n  ],\n  \"minPoolCost\": [\n    {\n      \"time\": \"1960-10-30T15:12:26.841Z\",\n      \"transactionHash\": \"labore\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    },\n    {\n      \"time\": \"1990-06-29T19:12:15.791Z\",\n      \"transactionHash\": \"amet cillum commodo\",\n      \"value\": {},\n      \"status\": \"NOT_EXIST\"\n    }\n  ],\n  \"costModel\": [\n    {\n      \"time\": \"1997-04-19T14:06:42.687Z\",\n      \"transactionHash\": \"eiusmod Excepteur\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    },\n    {\n      \"time\": \"1970-07-11T09:43:38.117Z\",\n      \"transactionHash\": \"aliqua\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    }\n  ],\n  \"priceMem\": [\n    {\n      \"time\": \"2022-09-02T09:33:49.572Z\",\n      \"transactionHash\": \"Ut ad fugiat\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    },\n    {\n      \"time\": \"1995-01-18T21:32:22.139Z\",\n      \"transactionHash\": \"fugiat ad id sit in\",\n      \"value\": {},\n      \"status\": \"NOT_EXIST\"\n    }\n  ],\n  \"priceStep\": [\n    {\n      \"time\": \"2009-06-17T04:09:21.090Z\",\n      \"transactionHash\": \"in\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    },\n    {\n      \"time\": \"1999-04-12T14:17:44.775Z\",\n      \"transactionHash\": \"dolore tempor in\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    }\n  ],\n  \"maxTxExMem\": [\n    {\n      \"time\": \"1999-04-14T13:43:04.400Z\",\n      \"transactionHash\": \"pariatur laborum et reprehenderit \",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    },\n    {\n      \"time\": \"1995-03-21T11:47:20.081Z\",\n      \"transactionHash\": \"nisi pariatur nulla cupidatat\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    }\n  ],\n  \"maxTxExSteps\": [\n    {\n      \"time\": \"1961-06-08T21:42:13.312Z\",\n      \"transactionHash\": \"fugiat in ex eu\",\n      \"value\": {},\n      \"status\": \"NOT_EXIST\"\n    },\n    {\n      \"time\": \"2020-05-26T15:28:42.388Z\",\n      \"transactionHash\": \"adipisicing eu exercitation\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    }\n  ],\n  \"maxBlockExMem\": [\n    {\n      \"time\": \"2008-05-23T12:22:52.883Z\",\n      \"transactionHash\": \"in sed occaecat nulla dolor\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    },\n    {\n      \"time\": \"1959-04-14T03:53:53.815Z\",\n      \"transactionHash\": \"Lorem non ipsum sed eu\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    }\n  ],\n  \"maxBlockExSteps\": [\n    {\n      \"time\": \"2009-06-05T13:47:33.779Z\",\n      \"transactionHash\": \"ad\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    },\n    {\n      \"time\": \"1954-02-10T10:02:55.266Z\",\n      \"transactionHash\": \"quis Ut nulla in veniam\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    }\n  ],\n  \"maxValSize\": [\n    {\n      \"time\": \"1984-07-28T01:30:42.766Z\",\n      \"transactionHash\": \"officia ut Duis dolore\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    },\n    {\n      \"time\": \"1984-03-08T08:12:40.905Z\",\n      \"transactionHash\": \"adipisicing irure velit\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    }\n  ],\n  \"collateralPercent\": [\n    {\n      \"time\": \"2009-07-21T03:11:17.277Z\",\n      \"transactionHash\": \"Lorem est dolore adipisicing\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    },\n    {\n      \"time\": \"1967-12-25T08:39:30.121Z\",\n      \"transactionHash\": \"et exercitation\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    }\n  ],\n  \"maxCollateralInputs\": [\n    {\n      \"time\": \"1980-04-06T23:49:54.345Z\",\n      \"transactionHash\": \"i\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    },\n    {\n      \"time\": \"1984-04-04T22:04:35.862Z\",\n      \"transactionHash\": \"adipisicing laborum cupidatat reprehenderit\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    }\n  ],\n  \"coinsPerUtxoSize\": [\n    {\n      \"time\": \"1973-08-12T08:46:08.879Z\",\n      \"transactionHash\": \"aliqua veniam sed\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    },\n    {\n      \"time\": \"1954-07-21T11:13:37.107Z\",\n      \"transactionHash\": \"cillum anim nulla\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Get fixed protocols parameters ",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/protocols/fixed",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"protocols",
										"fixed"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/protocols/fixed",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"protocols",
												"fixed"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"activeSlotsCoeff\": 38472906.30725953,\n  \"genDelegs\": {},\n  \"updateQuorum\": 26281426,\n  \"networkId\": \"irure minim sit dolore\",\n  \"initialFunds\": \"aliqua proident ullamco laboris\",\n  \"maxLovelaceSupply\": 34501317,\n  \"networkMagic\": 64586052,\n  \"epochLength\": 65885149,\n  \"timestamp\": \"ipsum in dolor Excepteur aliquip\",\n  \"slotsPerKESPeriod\": 45633513,\n  \"slotLength\": -39612032,\n  \"maxKESEvolutions\": 59288711,\n  \"securityParam\": -49693833\n}"
								}
							]
						}
					]
				},
				{
					"name": "pools",
					"item": [
						{
							"name": "get Data For Pool Registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check currentPage value\", function () {\r",
											"    pm.expect(jsonData.currentPage).to.eql(0);\r",
											"});\r",
											"\r",
											"//Compare data type\r",
											"pm.test(\"Check data type of txId\", () => {\r",
											"  pm.expect(jsonData.data[0].txId).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of txHash\", () => {\r",
											"  pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of txTime\", () => {\r",
											"        let moment = require ('moment');\r",
											"  pm.expect(jsonData.data[0].txTime).to.include(moment(jsonData.data[0].txTime).format('YYYY/MM/DD HH:mm:ss'));\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of epoch\", () => {\r",
											"  pm.expect(jsonData.data[0].epoch).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of block\", () => {\r",
											"  pm.expect(jsonData.data[0].block).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of slotNo\", () => {\r",
											"  pm.expect(jsonData.data[0].slotNo).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of poolName\", () => {\r",
											"  pm.expect(jsonData.data[0].poolName).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of pledge\", () => {\r",
											"  pm.expect(jsonData.data[0].pledge).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of cost\", () => {\r",
											"  pm.expect(jsonData.data[0].cost).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of margin\", () => {\r",
											"  pm.expect(jsonData.data[0].margin).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of poolId\", () => {\r",
											"  pm.expect(jsonData.data[0].poolId).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of poolView\", () => {\r",
											"  pm.expect(jsonData.data[0].poolView).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check data type of stakeKey\", () => {\r",
											"  pm.expect(jsonData.data[0].stakeKey).to.be.a(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of totalItems\", () => {\r",
											"  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of totalPages\", () => {\r",
											"  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
											"  var number = Object.keys(jsonData).length;\r",
											"  pm.expect(number).to.eql(4)\r",
											"});\r",
											"\r",
											"pm.test(\"Check number of contributions in field data level 2\", function () {\r",
											"  var number = Object.keys(jsonData.data[0]).length;\r",
											"  pm.expect(number).to.eql(13)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
											"  var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check name of contributions in data data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
											"  var myKeysList = [\"txId\", \"txHash\", \"txTime\", \"epoch\", \"block\", \"slotNo\", \"poolName\",\"pledge\", \"cost\", \"margin\", \"poolId\", \"poolView\", \"stakeKey\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/pools/registration?page=0&size=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"pools",
										"registration"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)"
										},
										{
											"key": "size",
											"value": "10",
											"description": "The size of the page to be returned"
										},
										{
											"key": "sort",
											"value": "dolore non est",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "elit",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pools/registration?page=0&size=10&sort=ex&sort=nisi de",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pools",
												"registration"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "sort",
													"value": "ex"
												},
												{
													"key": "sort",
													"value": "nisi de"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"txId\": -69105617,\n      \"txHash\": \"ipsum consequat\",\n      \"txTime\": \"1979-01-14T06:11:09.451Z\",\n      \"epoch\": 58005434,\n      \"block\": -11347924,\n      \"slotNo\": -25506253,\n      \"poolName\": \"proident sit nostrud\",\n      \"pledge\": 72661275,\n      \"cost\": -84924338,\n      \"margin\": -38106200.452744246,\n      \"poolId\": 87913724,\n      \"poolView\": \"minim enim cillum pariatur\",\n      \"stakeKey\": [\n        \"cupidatat dolor nostrud \",\n        \"voluptate qui sed\"\n      ]\n    },\n    {\n      \"txId\": -97346069,\n      \"txHash\": \"Duis officia mollit\",\n      \"txTime\": \"1997-09-04T01:11:29.956Z\",\n      \"epoch\": -37269032,\n      \"block\": -13099803,\n      \"slotNo\": 98165798,\n      \"poolName\": \"nostrud in al\",\n      \"pledge\": -85658157,\n      \"cost\": 68109134,\n      \"margin\": -38178066.14987656,\n      \"poolId\": -66965963,\n      \"poolView\": \"aliqua commodo pariatur\",\n      \"stakeKey\": [\n        \"ut exercitation\",\n        \"velit amet non\"\n      ]\n    }\n  ],\n  \"totalItems\": -73194652,\n  \"totalPages\": -87965948,\n  \"currentPage\": 24124953\n}"
								}
							]
						},
						{
							"name": "get Data For Pool De Registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check currentPage value\", function () {\r",
											"    pm.expect(jsonData.currentPage).to.eql(0);\r",
											"});\r",
											"\r",
											"//Compare data type\r",
											"pm.test(\"Check data type of txId\", () => {\r",
											"  pm.expect(jsonData.data[0].txId).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of txHash\", () => {\r",
											"  pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of txTime\", () => {\r",
											"        let moment = require ('moment');\r",
											"  pm.expect(jsonData.data[0].txTime).to.include(moment(jsonData.data[0].txTime).format('YYYY/MM/DD HH:mm:ss'));\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of epoch\", () => {\r",
											"  pm.expect(jsonData.data[0].epoch).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of block\", () => {\r",
											"  pm.expect(jsonData.data[0].block).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of slotNo\", () => {\r",
											"  pm.expect(jsonData.data[0].slotNo).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of poolName\", () => {\r",
											"  pm.expect(typeof jsonData.data[0].poolName).to.be.oneOf([ 'object', 'string']);\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of pledge\", () => {\r",
											"  pm.expect(jsonData.data[0].pledge).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of cost\", () => {\r",
											"  pm.expect(jsonData.data[0].cost).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of margin\", () => {\r",
											"  pm.expect(jsonData.data[0].margin).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of poolId\", () => {\r",
											"  pm.expect(jsonData.data[0].poolId).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of poolView\", () => {\r",
											"  pm.expect(jsonData.data[0].poolView).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check data type of stakeKey\", () => {\r",
											"  pm.expect(jsonData.data[0].stakeKey).to.be.a(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of totalItems\", () => {\r",
											"  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of totalPages\", () => {\r",
											"  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
											"  var number = Object.keys(jsonData).length;\r",
											"  pm.expect(number).to.eql(4)\r",
											"});\r",
											"\r",
											"pm.test(\"Check number of contributions in field data level 2\", function () {\r",
											"  var number = Object.keys(jsonData.data[0]).length;\r",
											"  pm.expect(number).to.eql(13)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
											"  var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check name of contributions in data data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
											"  var myKeysList = [\"txId\", \"txHash\", \"txTime\", \"epoch\", \"block\", \"slotNo\", \"poolName\",\"pledge\", \"cost\", \"margin\", \"poolId\", \"poolView\", \"stakeKey\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/pools/de-registration?page=0&size=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"pools",
										"de-registration"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)"
										},
										{
											"key": "size",
											"value": "10",
											"description": "The size of the page to be returned"
										},
										{
											"key": "sort",
											"value": "dolore non est",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "elit",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pools/de-registration?page=0&size=10&sort=ex&sort=nisi de",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pools",
												"de-registration"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "sort",
													"value": "ex"
												},
												{
													"key": "sort",
													"value": "nisi de"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"txId\": 59970717,\n      \"txHash\": \"exercitation nisi Ut adipisicing dolore\",\n      \"txTime\": \"2018-04-01T15:17:36.768Z\",\n      \"epoch\": 83063203,\n      \"block\": 83258535,\n      \"slotNo\": -31320831,\n      \"poolName\": \"in dolore do\",\n      \"pledge\": 48314021,\n      \"cost\": 57138225,\n      \"margin\": 67869859.80957842,\n      \"poolId\": -88171498,\n      \"poolView\": \"eu non elit\",\n      \"stakeKey\": [\n        \"ex Ut tempor\",\n        \"exercitation consequat cillum qui\"\n      ]\n    },\n    {\n      \"txId\": -65986589,\n      \"txHash\": \"est\",\n      \"txTime\": \"1973-03-23T00:06:08.327Z\",\n      \"epoch\": -27681178,\n      \"block\": -29657854,\n      \"slotNo\": 96714466,\n      \"poolName\": \"mollit quis tempor nisi laborum\",\n      \"pledge\": 4580049,\n      \"cost\": 7575966,\n      \"margin\": 75229326.36893436,\n      \"poolId\": 19382966,\n      \"poolView\": \"ex exercitation cillum commodo\",\n      \"stakeKey\": [\n        \"sunt qui culpa irure\",\n        \"incididunt\"\n      ]\n    }\n  ],\n  \"totalItems\": -82708800,\n  \"totalPages\": -1180880,\n  \"currentPage\": -25444804\n}"
								}
							]
						}
					]
				},
				{
					"name": "pool-lifecycle",
					"item": [
						{
							"name": "pool Status",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/pool-lifecycle/status?poolView=enim voluptate Excepteur ullamco",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"pool-lifecycle",
										"status"
									],
									"query": [
										{
											"key": "poolView",
											"value": "enim voluptate Excepteur ullamco",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pool-lifecycle/status?poolView=enim voluptate Excepteur ullamco",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pool-lifecycle",
												"status"
											],
											"query": [
												{
													"key": "poolView",
													"value": "enim voluptate Excepteur ullamco"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"isRegistration\": true,\n  \"isUpdate\": false,\n  \"isReward\": false,\n  \"isDeRegistration\": true\n}"
								}
							]
						},
						{
							"name": "reward",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/pool-lifecycle/reward?poolView=enim voluptate Excepteur ullamco&page=0&size=10&sort=dolore non est&sort=elit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"pool-lifecycle",
										"reward"
									],
									"query": [
										{
											"key": "poolView",
											"value": "enim voluptate Excepteur ullamco",
											"description": "(Required) "
										},
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)"
										},
										{
											"key": "size",
											"value": "10",
											"description": "The size of the page to be returned"
										},
										{
											"key": "sort",
											"value": "dolore non est",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
										},
										{
											"key": "sort",
											"value": "elit",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pool-lifecycle/reward?poolView=enim voluptate Excepteur ullamco&page=0&size=10&sort=ex&sort=nisi de",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pool-lifecycle",
												"reward"
											],
											"query": [
												{
													"key": "poolView",
													"value": "enim voluptate Excepteur ullamco"
												},
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "sort",
													"value": "ex"
												},
												{
													"key": "sort",
													"value": "nisi de"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"epochNo\": -90244740,\n      \"time\": \"2011-01-30T12:18:46.402Z\",\n      \"amount\": 24369350,\n      \"rewardAccount\": \"eu\"\n    },\n    {\n      \"epochNo\": -13285645,\n      \"time\": \"1948-11-16T02:10:27.739Z\",\n      \"amount\": -56522047,\n      \"rewardAccount\": \"aliquip veniam\"\n    }\n  ],\n  \"totalItems\": 20384927,\n  \"totalPages\": -19710502,\n  \"currentPage\": -71748238\n}"
								}
							]
						},
						{
							"name": "registration",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/pool-lifecycle/registration?page=0&size=10&sort=dolore non est&sort=elit&poolView=enim voluptate Excepteur ullamco&txHash=enim voluptate Excepteur ullamco&fromDate=1954-04-24T02:25:02.171Z&toDate=1954-04-24T02:25:02.171Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"pool-lifecycle",
										"registration"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)"
										},
										{
											"key": "size",
											"value": "10",
											"description": "The size of the page to be returned"
										},
										{
											"key": "sort",
											"value": "dolore non est",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
										},
										{
											"key": "sort",
											"value": "elit",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
										},
										{
											"key": "poolView",
											"value": "enim voluptate Excepteur ullamco",
											"description": "(Required) "
										},
										{
											"key": "txHash",
											"value": "enim voluptate Excepteur ullamco",
											"description": "(Required) "
										},
										{
											"key": "fromDate",
											"value": "1954-04-24T02:25:02.171Z",
											"description": "(Required) "
										},
										{
											"key": "toDate",
											"value": "1954-04-24T02:25:02.171Z",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pool-lifecycle/registration?page=0&size=10&sort=ex&sort=nisi de&poolView=enim voluptate Excepteur ullamco&txHash=enim voluptate Excepteur ullamco&fromDate=1954-04-24T02:25:02.171Z&toDate=1954-04-24T02:25:02.171Z",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pool-lifecycle",
												"registration"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "sort",
													"value": "ex"
												},
												{
													"key": "sort",
													"value": "nisi de"
												},
												{
													"key": "poolView",
													"value": "enim voluptate Excepteur ullamco"
												},
												{
													"key": "txHash",
													"value": "enim voluptate Excepteur ullamco"
												},
												{
													"key": "fromDate",
													"value": "1954-04-24T02:25:02.171Z"
												},
												{
													"key": "toDate",
													"value": "1954-04-24T02:25:02.171Z"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"poolUpdateId\": -47425695,\n      \"txHash\": \"dolor\",\n      \"fee\": 69321080,\n      \"time\": \"1989-08-24T09:01:17.508Z\",\n      \"margin\": 26823053.221254647,\n      \"poolHold\": -36425394\n    },\n    {\n      \"poolUpdateId\": 66369558,\n      \"txHash\": \"amet ad veniam cillum consequat\",\n      \"fee\": 90348507,\n      \"time\": \"1954-06-02T08:30:54.664Z\",\n      \"margin\": -6625953.422391534,\n      \"poolHold\": 60447307\n    }\n  ],\n  \"totalItems\": -47105249,\n  \"totalPages\": 89779985,\n  \"currentPage\": -79157103\n}"
								}
							]
						},
						{
							"name": "registration List",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/pool-lifecycle/registration-list?poolView=enim voluptate Excepteur ullamco&page=0&size=10&sort=dolore non est&sort=elit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"pool-lifecycle",
										"registration-list"
									],
									"query": [
										{
											"key": "poolView",
											"value": "enim voluptate Excepteur ullamco",
											"description": "(Required) "
										},
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)"
										},
										{
											"key": "size",
											"value": "10",
											"description": "The size of the page to be returned"
										},
										{
											"key": "sort",
											"value": "dolore non est",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
										},
										{
											"key": "sort",
											"value": "elit",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pool-lifecycle/registration-list?poolView=enim voluptate Excepteur ullamco&page=0&size=10&sort=ex&sort=nisi de",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pool-lifecycle",
												"registration-list"
											],
											"query": [
												{
													"key": "poolView",
													"value": "enim voluptate Excepteur ullamco"
												},
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "sort",
													"value": "ex"
												},
												{
													"key": "sort",
													"value": "nisi de"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"poolUpdateId\": 42128162,\n      \"txHash\": \"anim\",\n      \"totalFee\": 79640432,\n      \"time\": \"1958-05-11T07:43:08.613Z\",\n      \"fee\": -38351875,\n      \"stakeKeys\": [\n        \"ut ut mollit sit\",\n        \"in commodo do ea\"\n      ],\n      \"deposit\": -388423\n    },\n    {\n      \"poolUpdateId\": 12242651,\n      \"txHash\": \"Duis in laborum\",\n      \"totalFee\": -797268,\n      \"time\": \"1992-11-17T23:06:14.692Z\",\n      \"fee\": -84808011,\n      \"stakeKeys\": [\n        \"ipsum occaecat\",\n        \"et incididunt ullamco est\"\n      ],\n      \"deposit\": 11049389\n    }\n  ],\n  \"totalItems\": 42509867,\n  \"totalPages\": 27554074,\n  \"currentPage\": -67218611\n}"
								}
							]
						},
						{
							"name": "registration Detail",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/pool-lifecycle/registration-detail?poolView=enim voluptate Excepteur ullamco&id=15312893",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"pool-lifecycle",
										"registration-detail"
									],
									"query": [
										{
											"key": "poolView",
											"value": "enim voluptate Excepteur ullamco",
											"description": "(Required) "
										},
										{
											"key": "id",
											"value": "15312893",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pool-lifecycle/registration-detail?poolView=enim voluptate Excepteur ullamco&id=15312893",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pool-lifecycle",
												"registration-detail"
											],
											"query": [
												{
													"key": "poolView",
													"value": "enim voluptate Excepteur ullamco"
												},
												{
													"key": "id",
													"value": "15312893"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"poolId\": \"ad sed sunt\",\n  \"poolName\": \"laboris esse\",\n  \"poolView\": \"consequat Excepteur officia sin\",\n  \"txHash\": \"laborum ipsum\",\n  \"totalFee\": 21795540,\n  \"time\": \"1948-03-28T03:17:21.581Z\",\n  \"fee\": -63257135,\n  \"rewardAccount\": \"ut aliqua irure\",\n  \"stakeKeys\": [\n    \"consectetur voluptate officia\",\n    \"adipisicing ea ut\"\n  ],\n  \"vrfKey\": \"sint cupidatat mollit in\",\n  \"pledge\": -24495467,\n  \"margin\": 71754437.05046588,\n  \"cost\": -68379001,\n  \"deposit\": 88815932\n}"
								}
							]
						},
						{
							"name": "pool Update",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/pool-lifecycle/pool-update?page=0&size=10&sort=dolore non est&sort=elit&poolView=enim voluptate Excepteur ullamco&txHash=enim voluptate Excepteur ullamco&fromDate=1954-04-24T02:25:02.171Z&toDate=1954-04-24T02:25:02.171Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"pool-lifecycle",
										"pool-update"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)"
										},
										{
											"key": "size",
											"value": "10",
											"description": "The size of the page to be returned"
										},
										{
											"key": "sort",
											"value": "dolore non est",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
										},
										{
											"key": "sort",
											"value": "elit",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
										},
										{
											"key": "poolView",
											"value": "enim voluptate Excepteur ullamco",
											"description": "(Required) "
										},
										{
											"key": "txHash",
											"value": "enim voluptate Excepteur ullamco",
											"description": "(Required) "
										},
										{
											"key": "fromDate",
											"value": "1954-04-24T02:25:02.171Z",
											"description": "(Required) "
										},
										{
											"key": "toDate",
											"value": "1954-04-24T02:25:02.171Z",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pool-lifecycle/pool-update?page=0&size=10&sort=ex&sort=nisi de&poolView=enim voluptate Excepteur ullamco&txHash=enim voluptate Excepteur ullamco&fromDate=1954-04-24T02:25:02.171Z&toDate=1954-04-24T02:25:02.171Z",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pool-lifecycle",
												"pool-update"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "sort",
													"value": "ex"
												},
												{
													"key": "sort",
													"value": "nisi de"
												},
												{
													"key": "poolView",
													"value": "enim voluptate Excepteur ullamco"
												},
												{
													"key": "txHash",
													"value": "enim voluptate Excepteur ullamco"
												},
												{
													"key": "fromDate",
													"value": "1954-04-24T02:25:02.171Z"
												},
												{
													"key": "toDate",
													"value": "1954-04-24T02:25:02.171Z"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"poolUpdateId\": 48820905,\n      \"txHash\": \"ad\",\n      \"fee\": -66668713,\n      \"time\": \"1951-03-06T05:17:47.748Z\",\n      \"margin\": 64822200.7065475,\n      \"poolHold\": 55039736\n    },\n    {\n      \"poolUpdateId\": -81102570,\n      \"txHash\": \"aute aliqua occaecat mollit esse\",\n      \"fee\": -17318537,\n      \"time\": \"1988-04-01T04:36:21.058Z\",\n      \"margin\": -67770271.21947557,\n      \"poolHold\": 15595817\n    }\n  ],\n  \"totalItems\": 41274782,\n  \"totalPages\": -52327625,\n  \"currentPage\": 12613005\n}"
								}
							]
						},
						{
							"name": "pool Update 1",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/pool-lifecycle/pool-update-list?poolView=enim voluptate Excepteur ullamco&page=0&size=10&sort=dolore non est&sort=elit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"pool-lifecycle",
										"pool-update-list"
									],
									"query": [
										{
											"key": "poolView",
											"value": "enim voluptate Excepteur ullamco",
											"description": "(Required) "
										},
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)"
										},
										{
											"key": "size",
											"value": "10",
											"description": "The size of the page to be returned"
										},
										{
											"key": "sort",
											"value": "dolore non est",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
										},
										{
											"key": "sort",
											"value": "elit",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pool-lifecycle/pool-update-list?poolView=enim voluptate Excepteur ullamco&page=0&size=10&sort=ex&sort=nisi de",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pool-lifecycle",
												"pool-update-list"
											],
											"query": [
												{
													"key": "poolView",
													"value": "enim voluptate Excepteur ullamco"
												},
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "sort",
													"value": "ex"
												},
												{
													"key": "sort",
													"value": "nisi de"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"poolUpdateId\": -23964378,\n      \"poolId\": \"ea dolore\",\n      \"poolName\": \"ea sit magna consectetur\",\n      \"poolView\": \"dolore exercitation\",\n      \"previousPledge\": -77384168,\n      \"previousMargin\": -52690814.308673285,\n      \"txHash\": \"adipisicing irure quis Excepteur\",\n      \"time\": \"1963-05-10T20:46:19.440Z\",\n      \"stakeKeys\": [\n        \"laboris veniam minim\",\n        \"quis eiusmod officia commodo\"\n      ],\n      \"fee\": -38245840,\n      \"rewardAccount\": \"minim eu fugiat id\",\n      \"vrfKey\": \"irure cillum ullamco\",\n      \"pledge\": 49281525,\n      \"margin\": -87677367.7945931,\n      \"cost\": -35306060,\n      \"deposit\": -11231219\n    },\n    {\n      \"poolUpdateId\": 18576265,\n      \"poolId\": \"aliqua et incididunt\",\n      \"poolName\": \"officia Duis dolor aute\",\n      \"poolView\": \"Lorem\",\n      \"previousPledge\": -59669294,\n      \"previousMargin\": 95147840.89292866,\n      \"txHash\": \"qui Lorem\",\n      \"time\": \"1971-10-17T21:48:04.572Z\",\n      \"stakeKeys\": [\n        \"dolore sit \",\n        \"nisi velit aliquip\"\n      ],\n      \"fee\": -77528817,\n      \"rewardAccount\": \"velit nulla\",\n      \"vrfKey\": \"tempor eu\",\n      \"pledge\": 65090872,\n      \"margin\": 94731966.57400602,\n      \"cost\": -80442670,\n      \"deposit\": -71858897\n    }\n  ],\n  \"totalItems\": 46148844,\n  \"totalPages\": -59094533,\n  \"currentPage\": 9060657\n}"
								}
							]
						},
						{
							"name": "pool Update 2",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/pool-lifecycle/pool-update-detail?id=15312893",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"pool-lifecycle",
										"pool-update-detail"
									],
									"query": [
										{
											"key": "id",
											"value": "15312893",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pool-lifecycle/pool-update-detail?id=15312893",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pool-lifecycle",
												"pool-update-detail"
											],
											"query": [
												{
													"key": "id",
													"value": "15312893"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"poolUpdateId\": -22163848,\n  \"poolId\": \"qui aliqua\",\n  \"poolName\": \"Ut dolore consequat ut\",\n  \"poolView\": \"velit incididunt\",\n  \"previousPledge\": 7578174,\n  \"previousMargin\": -33776120.22978136,\n  \"txHash\": \"sint Excepteur\",\n  \"time\": \"1966-06-24T15:20:38.418Z\",\n  \"stakeKeys\": [\n    \"in cupidatat ipsum ut\",\n    \"exercitation mollit irure pariatur\"\n  ],\n  \"fee\": 9374420,\n  \"rewardAccount\": \"est laborum\",\n  \"vrfKey\": \"quis reprehenderit sed\",\n  \"pledge\": 39942495,\n  \"margin\": 32477270.090514183,\n  \"cost\": 22592684,\n  \"deposit\": 61013480\n}"
								}
							]
						},
						{
							"name": "pool Info",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/pool-lifecycle/pool-info?poolView=enim voluptate Excepteur ullamco",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"pool-lifecycle",
										"pool-info"
									],
									"query": [
										{
											"key": "poolView",
											"value": "enim voluptate Excepteur ullamco",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pool-lifecycle/pool-info?poolView=enim voluptate Excepteur ullamco",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pool-lifecycle",
												"pool-info"
											],
											"query": [
												{
													"key": "poolView",
													"value": "enim voluptate Excepteur ullamco"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"poolId\": \"in ex fugiat proident ad\",\n  \"poolName\": \"proident dolor\",\n  \"poolView\": \"pariatur tempor offic\",\n  \"poolSize\": 92060211,\n  \"rewardAvailable\": 69038801,\n  \"status\": \"cupidatat consectetur\",\n  \"epochNo\": -80802551,\n  \"stakeKeys\": [\n    \"fugiat dolore\",\n    \"enim elit est\"\n  ],\n  \"rewardAccounts\": [\n    \"sunt\",\n    \"pariatur cupidatat qui\"\n  ]\n}"
								}
							]
						},
						{
							"name": "pool Owner",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/pool-lifecycle/owner?stakeKey=enim voluptate Excepteur ullamco&page=0&size=10&sort=dolore non est&sort=elit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"pool-lifecycle",
										"owner"
									],
									"query": [
										{
											"key": "stakeKey",
											"value": "enim voluptate Excepteur ullamco",
											"description": "(Required) "
										},
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)"
										},
										{
											"key": "size",
											"value": "10",
											"description": "The size of the page to be returned"
										},
										{
											"key": "sort",
											"value": "dolore non est",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
										},
										{
											"key": "sort",
											"value": "elit",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pool-lifecycle/owner?stakeKey=enim voluptate Excepteur ullamco&page=0&size=10&sort=ex&sort=nisi de",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pool-lifecycle",
												"owner"
											],
											"query": [
												{
													"key": "stakeKey",
													"value": "enim voluptate Excepteur ullamco"
												},
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "sort",
													"value": "ex"
												},
												{
													"key": "sort",
													"value": "nisi de"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    \"proident in ulla\",\n    \"fugiat aliqua voluptate\"\n  ],\n  \"totalItems\": -56263739,\n  \"totalPages\": -54242326,\n  \"currentPage\": -27125763\n}"
								}
							]
						},
						{
							"name": "de Registration",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/pool-lifecycle/de-registration?page=0&size=10&sort=dolore non est&sort=elit&poolView=enim voluptate Excepteur ullamco&txHash=enim voluptate Excepteur ullamco&fromDate=1954-04-24T02:25:02.171Z&toDate=1954-04-24T02:25:02.171Z",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"pool-lifecycle",
										"de-registration"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)"
										},
										{
											"key": "size",
											"value": "10",
											"description": "The size of the page to be returned"
										},
										{
											"key": "sort",
											"value": "dolore non est",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
										},
										{
											"key": "sort",
											"value": "elit",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
										},
										{
											"key": "poolView",
											"value": "enim voluptate Excepteur ullamco",
											"description": "(Required) "
										},
										{
											"key": "txHash",
											"value": "enim voluptate Excepteur ullamco",
											"description": "(Required) "
										},
										{
											"key": "fromDate",
											"value": "1954-04-24T02:25:02.171Z",
											"description": "(Required) "
										},
										{
											"key": "toDate",
											"value": "1954-04-24T02:25:02.171Z",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/pool-lifecycle/de-registration?page=0&size=10&sort=ex&sort=nisi de&poolView=enim voluptate Excepteur ullamco&txHash=enim voluptate Excepteur ullamco&fromDate=1954-04-24T02:25:02.171Z&toDate=1954-04-24T02:25:02.171Z",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"pool-lifecycle",
												"de-registration"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "sort",
													"value": "ex"
												},
												{
													"key": "sort",
													"value": "nisi de"
												},
												{
													"key": "poolView",
													"value": "enim voluptate Excepteur ullamco"
												},
												{
													"key": "txHash",
													"value": "enim voluptate Excepteur ullamco"
												},
												{
													"key": "fromDate",
													"value": "1954-04-24T02:25:02.171Z"
												},
												{
													"key": "toDate",
													"value": "1954-04-24T02:25:02.171Z"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"poolId\": \"voluptate\",\n      \"poolName\": \"ullamco elit commodo nulla\",\n      \"poolView\": \"culpa veniam\",\n      \"stakeKeys\": [\n        \"aliqua ad\",\n        \"anim do ex\"\n      ],\n      \"txHash\": \"in sit Lorem dolore\",\n      \"totalFee\": -83248116,\n      \"poolHold\": -65311943,\n      \"time\": \"1968-10-13T20:10:15.262Z\",\n      \"fee\": 93610262,\n      \"retiringEpoch\": 30343914\n    },\n    {\n      \"poolId\": \"in aliquip\",\n      \"poolName\": \"ea elit incididunt dolore ullamco\",\n      \"poolView\": \"dolore\",\n      \"stakeKeys\": [\n        \"proident consequat\",\n        \"voluptate dolor\"\n      ],\n      \"txHash\": \"Duis ea\",\n      \"totalFee\": -85401982,\n      \"poolHold\": -95063387,\n      \"time\": \"1950-07-28T23:51:14.938Z\",\n      \"fee\": 57406273,\n      \"retiringEpoch\": 88698610\n    }\n  ],\n  \"totalItems\": -28990246,\n  \"totalPages\": -64381518,\n  \"currentPage\": 13932269\n}"
								}
							]
						}
					]
				},
				{
					"name": "policies/{policyId}",
					"item": [
						{
							"name": "Get a policy detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var stt = 200\r",
											"var res_time = 5000\r",
											"var policyId = \"3d67069772c7ff1a14ea648c2de179fb3517759ac48c8f29ed1624ac\"\r",
											"var policyScript = \"{\\\"type\\\":\\\"all\\\",\\\"scripts\\\":[{\\\"type\\\":\\\"sig\\\",\\\"keyHash\\\":\\\"8f1e976f58e8069f69260158033906c163118c94d3489e09e4884baf\\\"},{\\\"type\\\":\\\"before\\\",\\\"slot\\\":62095772}]}\"\r",
											"\r",
											"//Compare static data\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(stt);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
											"});\r",
											"\r",
											"pm.test(\"Compare policyId\", function () {\r",
											"    pm.expect(jsonData.policyId).to.include(policyId);\r",
											"});\r",
											"\r",
											"pm.test(\"Compare policyScript\", function () {\r",
											"    pm.expect(jsonData.policyScript).to.include(policyScript);\r",
											"});\r",
											"\r",
											"//Compare format dynamic data\r",
											"pm.test(\"Check data type of totalToken\", () => {\r",
											"  pm.expect(jsonData.totalToken).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"//Compare total property\r",
											"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
											"  var number = Object.keys(jsonData).length;\r",
											"  pm.expect(number).to.eql(3)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
											"  var myKeysList = [\"policyId\", \"totalToken\", \"policyScript\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/policies/:policyId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"policies",
										":policyId"
									],
									"variable": [
										{
											"key": "policyId",
											"value": "3d67069772c7ff1a14ea648c2de179fb3517759ac48c8f29ed1624ac",
											"description": "(Required) Policy hash"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/policies/:policyId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"policies",
												":policyId"
											],
											"variable": [
												{
													"key": "policyId",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) Policy hash"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"policyId\": \"ut Duis\",\n  \"totalToken\": 29354792,\n  \"policyScript\": \"nisi\"\n}"
								}
							]
						},
						{
							"name": "Get tokens by policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var stt = 200\r",
											"var res_time = 5000\r",
											"var current_page = 0\r",
											"\r",
											"//Compare static data\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(stt);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
											"});\r",
											"\r",
											"pm.test(\"Compare Currentpage\", function () {\r",
											"    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
											"});\r",
											"\r",
											"//Compare format dynamic data\r",
											"pm.test(\"Check data type of id\", () => {\r",
											"  pm.expect(jsonData.data[0].id).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of name\", () => {\r",
											"  pm.expect(jsonData.data[0].name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of displayName\", () => {\r",
											"  pm.expect(jsonData.data[0].displayName).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of policy\", () => {\r",
											"  pm.expect(jsonData.data[0].policy).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of fingerprint\", () => {\r",
											"  pm.expect(jsonData.data[0].fingerprint).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of txCount\", () => {\r",
											"  pm.expect(jsonData.data[0].txCount).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of supply\", () => {\r",
											"  pm.expect(jsonData.data[0].supply).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of totalVolume\", () => {\r",
											"  pm.expect(jsonData.data[0].totalVolume).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of createdOn\", () => {\r",
											"        let moment = require ('moment');\r",
											"  pm.expect(jsonData.data[0].createdOn).to.include(moment(jsonData.data[0].createdOn).format('YYYY/MM/DD HH:mm:ss'));\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of totalItems\", () => {\r",
											"  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of totalPages\", () => {\r",
											"  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"//Compare total property\r",
											"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
											"  var number = Object.keys(jsonData).length;\r",
											"  pm.expect(number).to.eql(4)\r",
											"});\r",
											"\r",
											"pm.test(\"Check number of contributions in field data level 2\", function () {\r",
											"  var number = Object.keys(jsonData.data[0]).length;\r",
											"  pm.expect(number).to.eql(9)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
											"  var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check name of contributions in data data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
											"  var myKeysList = [\"id\", \"name\", \"displayName\", \"policy\", \"fingerprint\", \"txCount\", \"supply\", \"totalVolume\", \"createdOn\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/policies/:policyId/tokens",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"policies",
										":policyId",
										"tokens"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)",
											"disabled": true
										},
										{
											"key": "size",
											"value": "20",
											"description": "The size of the page to be returned",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "policyId",
											"value": "4429f7b432125357388b1d676c2d503b6d6fc78c414934bef9882e26",
											"description": "(Required) Policy hash"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/policies/:policyId/tokens?page=0&size=20&sort=ex&sort=nisi de",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"policies",
												":policyId",
												"tokens"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "20"
												},
												{
													"key": "sort",
													"value": "ex"
												},
												{
													"key": "sort",
													"value": "nisi de"
												}
											],
											"variable": [
												{
													"key": "policyId",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) Policy hash"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"id\": 11516470,\n      \"name\": \"officia in aliquip incididunt ea\",\n      \"displayName\": \"velit consequat\",\n      \"policy\": \"elit ad ut anim\",\n      \"fingerprint\": \"non ut sit ex\",\n      \"txCount\": 91830408,\n      \"supply\": \"veniam\",\n      \"volumeIn24h\": \"ut mollit\",\n      \"totalVolume\": \"aliqua cillum ut\",\n      \"numberOfHolders\": -86312415,\n      \"createdOn\": \"1979-06-15T01:09:51.664Z\",\n      \"metadata\": {\n        \"url\": \"velit nostrud elit\",\n        \"ticker\": \"Duis eu\",\n        \"decimals\": -99689615,\n        \"logo\": \"proident qui\",\n        \"description\": \"sint laborum eiusmod\"\n      }\n    },\n    {\n      \"id\": 32581234,\n      \"name\": \"reprehenderit dolor\",\n      \"displayName\": \"incididunt eiusmod\",\n      \"policy\": \"irure ad Duis\",\n      \"fingerprint\": \"consectetur velit\",\n      \"txCount\": -35390961,\n      \"supply\": \"magna et ad quis\",\n      \"volumeIn24h\": \"eiusmod quis\",\n      \"totalVolume\": \"ea proident officia\",\n      \"numberOfHolders\": 37158182,\n      \"createdOn\": \"1986-12-28T04:27:00.897Z\",\n      \"metadata\": {\n        \"url\": \"exercitation mollit sit\",\n        \"ticker\": \"sunt velit ad elit\",\n        \"decimals\": -86674359,\n        \"logo\": \"voluptate\",\n        \"description\": \"dolore ipsum ut\"\n      }\n    }\n  ],\n  \"totalItems\": -29023080,\n  \"totalPages\": -23360559,\n  \"currentPage\": -75704619\n}"
								}
							]
						},
						{
							"name": "Get holders by policy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var stt = 200\r",
											"var res_time = 5000\r",
											"var current_page = 0\r",
											"\r",
											"//Compare static data\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(stt);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
											"});\r",
											"\r",
											"pm.test(\"Compare Currentpage\", function () {\r",
											"    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
											"});\r",
											"\r",
											"//Compare format dynamic data\r",
											"pm.test(\"Check data type of address\", () => {\r",
											"  pm.expect(jsonData.data[0].address).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of name\", () => {\r",
											"  pm.expect(jsonData.data[0].name).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of displayName\", () => {\r",
											"  pm.expect(jsonData.data[0].displayName).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of fingerprint\", () => {\r",
											"  pm.expect(jsonData.data[0].fingerprint).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of quantity\", () => {\r",
											"  pm.expect(jsonData.data[0].quantity).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"//Compare total property\r",
											"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
											"  var number = Object.keys(jsonData).length;\r",
											"  pm.expect(number).to.eql(4)\r",
											"});\r",
											"\r",
											"pm.test(\"Check number of contributions in field data level 2\", function () {\r",
											"  var number = Object.keys(jsonData.data[0]).length;\r",
											"  pm.expect(number).to.eql(5)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
											"  var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check name of contributions in data data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
											"  var myKeysList = [\"address\", \"name\", \"displayName\", \"fingerprint\", \"quantity\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/policies/:policyId/holders?page=0&size=20",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"policies",
										":policyId",
										"holders"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)"
										},
										{
											"key": "size",
											"value": "20",
											"description": "The size of the page to be returned"
										}
									],
									"variable": [
										{
											"key": "policyId",
											"value": "4429f7b432125357388b1d676c2d503b6d6fc78c414934bef9882e26",
											"description": "(Required) Policy hash"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/policies/:policyId/holders?page=0&size=20&sort=ex&sort=nisi de",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"policies",
												":policyId",
												"holders"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "20"
												},
												{
													"key": "sort",
													"value": "ex"
												},
												{
													"key": "sort",
													"value": "nisi de"
												}
											],
											"variable": [
												{
													"key": "policyId",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) Policy hash"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"addressId\": -97014357,\n      \"address\": \"dolore non sint fugiat dolor\",\n      \"policy\": \"dolore occaecat ut\",\n      \"metadata\": {\n        \"url\": \"sed ea consectetur\",\n        \"ticker\": \"laboris Lorem esse nostrud\",\n        \"decimals\": -81176225,\n        \"logo\": \"esse minim cupidatat\",\n        \"description\": \"ipsum Excepteur ad mag\"\n      },\n      \"name\": \"dolor consectetur\",\n      \"displayName\": \"irure in\",\n      \"fingerprint\": \"sint cillum\",\n      \"quantity\": -65976550\n    },\n    {\n      \"addressId\": 57474225,\n      \"address\": \"non eu ut\",\n      \"policy\": \"sunt dolor\",\n      \"metadata\": {\n        \"url\": \"occaecat Excepteur\",\n        \"ticker\": \"in non nisi commodo\",\n        \"decimals\": -42639989,\n        \"logo\": \"eu est minim\",\n        \"description\": \"nulla commodo in minim\"\n      },\n      \"name\": \"adipisicing Ut\",\n      \"displayName\": \"adipisic\",\n      \"fingerprint\": \"in\",\n      \"quantity\": 52137399\n    }\n  ],\n  \"totalItems\": -17693588,\n  \"totalPages\": -40021544,\n  \"currentPage\": -88844091\n}"
								}
							]
						}
					]
				},
				{
					"name": "epochs",
					"item": [
						{
							"name": "Get current epoch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// var stt = \"200\";\r",
											"// stt = pm.variables.get(\"stt\");\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"// pm.test(\"Status code is 400\", function () {\r",
											"//     pm.response.to.have.status(400);\r",
											"// });\r",
											"\r",
											"pm.test(\"Check totalSlot value\", function () {\r",
											"    pm.expect(jsonData.totalSlot).to.eql(432000);\r",
											"});\r",
											"\r",
											"//Compare data type\r",
											"pm.test(\"Check data type of no\", () => {\r",
											"  pm.expect(jsonData.no).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of slot\", () => {\r",
											"  pm.expect(jsonData.slot).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of account\", () => {\r",
											"  pm.expect(jsonData.account).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check data type of startTime\", () => {\r",
											"        let moment = require ('moment');\r",
											"  pm.expect(jsonData.startTime).to.include(moment(jsonData.startTime).format('YYYY/MM/DD HH:mm:ss'));\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of endTime\", () => {\r",
											"        let moment = require ('moment');\r",
											"  pm.expect(jsonData.endTime).to.include(moment(jsonData.endTime).format('YYYY/MM/DD HH:mm:ss'));\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
											"  var number = Object.keys(jsonData).length;\r",
											"  pm.expect(number).to.eql(6)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
											"  var myKeysList = [\"no\", \"slot\", \"totalSlot\", \"account\", \"startTime\", \"endTime\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"//Get value\r",
											"pm.test(\"Others value exist\",function (){\r",
											"    pm.environment.set(\"epoch_no\", jsonData.no);\r",
											"    pm.environment.set(\"epoch_startTime\", jsonData.startTime);\r",
											"    pm.environment.set(\"epoch_endTime\", jsonData.endTime);\r",
											"    console.log(jsonData.no);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/epochs/current",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"epochs",
										"current"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/epochs/current",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"epochs",
												"current"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"no\": -49760808,\n  \"slot\": 27209690,\n  \"totalSlot\": 13295715,\n  \"account\": 21035673\n}"
								}
							]
						},
						{
							"name": "Get all epoch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check currentPage value\", function () {\r",
											"    pm.expect(jsonData.currentPage).to.eql(0);\r",
											"});\r",
											"\r",
											"pm.test(\"Check maxSlot value\", function () {\r",
											"    pm.expect(jsonData.data[0].maxSlot).to.eql(432000);\r",
											"});\r",
											"\r",
											"//Compare data type\r",
											"pm.test(\"Check data type of no\", () => {\r",
											"  pm.expect(jsonData.data[0].no).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of status\", () => {\r",
											"  pm.expect(jsonData.data[0].status).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of blkCount\", () => {\r",
											"  pm.expect(jsonData.data[0].blkCount).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of outSum\", () => {\r",
											"  pm.expect(jsonData.data[0].outSum).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of txCount\", () => {\r",
											"  pm.expect(jsonData.data[0].txCount).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of startTime\", () => {\r",
											"        let moment = require ('moment');\r",
											"  pm.expect(jsonData.data[0].startTime).to.include(moment(jsonData.data[0].startTime).format('YYYY/MM/DD HH:mm:ss'));\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of endTime\", () => {\r",
											"        let moment = require ('moment');\r",
											"  pm.expect(jsonData.data[0].endTime).to.include(moment(jsonData.data[0].endTime).format('YYYY/MM/DD HH:mm:ss'));\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of maxSlot\", () => {\r",
											"  pm.expect(jsonData.data[0].maxSlot).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of rewardsDistributed\", () => {\r",
											"  pm.expect(typeof jsonData.data[0].rewardsDistributed).to.be.oneOf([ 'object', 'number']);\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
											"  var number = Object.keys(jsonData).length;\r",
											"  pm.expect(number).to.eql(4)\r",
											"});\r",
											"\r",
											"pm.test(\"Check number of contributions in field data level 2\", function () {\r",
											"  var number = Object.keys(jsonData.data[0]).length;\r",
											"  pm.expect(number).to.eql(9)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
											"  var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check name of contributions in data data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
											"  var myKeysList = [\"no\", \"status\", \"blkCount\", \"outSum\", \"txCount\", \"startTime\", \"endTime\",\"maxSlot\", \"rewardsDistributed\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"//Scenario\r",
											"pm.test(\"Compare value between current epoch and Get all epoch\", function () {\r",
											"    //Main compare\r",
											"    pm.expect(jsonData.data[0].no).to.eql(pm.environment.get(\"epoch_no\"));\r",
											"    pm.expect(jsonData.data[0].status).to.include(\"IN_PROGRESS\");\r",
											"    pm.expect(jsonData.data[1].status).to.include(\"REWARDING\");\r",
											"    pm.expect(jsonData.data[2].status).to.include(\"REWARDING\");\r",
											"    pm.expect(jsonData.data[0].startTime).to.eql(pm.environment.get(\"epoch_startTime\"));\r",
											"    pm.expect(jsonData.data[0].endTime).to.eql(pm.environment.get(\"epoch_endTime\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Others value exist\",function (){\r",
											"    pm.environment.set(\"epoch_status\", jsonData.data[0].status);\r",
											"    pm.environment.set(\"epoch_blkCount\", jsonData.data[0].blkCount);\r",
											"    pm.environment.set(\"epoch_outSum\", jsonData.data[0].outSum);\r",
											"    pm.environment.set(\"epoch_txCount\", jsonData.data[0].txCount);\r",
											"    pm.environment.set(\"epoch_rewardsDistributed\", jsonData.data[0].rewardsDistributed);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/epochs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"epochs"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Zero-based page index (0..N)",
											"disabled": true
										},
										{
											"key": "size",
											"value": "10",
											"description": "The size of the page to be returned",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "id,DESC",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/epochs?page=0&size=10&sort=id,DESC",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"epochs"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "sort",
													"value": "id,DESC"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"no\": -14763808,\n      \"status\": \"SYNCING\",\n      \"blkCount\": -59660988,\n      \"outSum\": 53748687,\n      \"txCount\": 71930017,\n      \"startTime\": \"2010-12-14T02:53:21.805Z\",\n      \"endTime\": \"1944-03-17T02:52:10.564Z\",\n      \"maxSlot\": -11379555,\n      \"rewardsDistributed\": 7762142\n    },\n    {\n      \"no\": -21733243,\n      \"status\": \"REWARDING\",\n      \"blkCount\": -25410140,\n      \"outSum\": -6895808,\n      \"txCount\": 45662307,\n      \"startTime\": \"2006-06-21T03:32:03.525Z\",\n      \"endTime\": \"2016-07-20T20:31:05.790Z\",\n      \"maxSlot\": -77766185,\n      \"rewardsDistributed\": 60406465\n    }\n  ],\n  \"totalItems\": -39444843,\n  \"totalPages\": 57485604,\n  \"currentPage\": -94098841\n}"
								}
							]
						},
						{
							"name": "Get block list of epoch by its no",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check currentPage value\", function () {\r",
											"    pm.expect(jsonData.currentPage).to.eql(0);\r",
											"});\r",
											"\r",
											"//Compare data type\r",
											"pm.test(\"Check data type of blockNo\", () => {\r",
											"  pm.expect(jsonData.data[0].blockNo).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of slotNo\", () => {\r",
											"  pm.expect(jsonData.data[0].slotNo).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of epochNo\", () => {\r",
											"  pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of epochSlotNo\", () => {\r",
											"  pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of hash\", () => {\r",
											"  pm.expect(jsonData.data[0].hash).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of time\", () => {\r",
											"        let moment = require ('moment');\r",
											"  pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of totalFees\", () => {\r",
											"  pm.expect(jsonData.data[0].totalFees).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of totalOutput\", () => {\r",
											"  pm.expect(jsonData.data[0].totalOutput).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of slotLeader\", () => {\r",
											"  pm.expect(jsonData.data[0].slotLeader).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
											"  var number = Object.keys(jsonData).length;\r",
											"  pm.expect(number).to.eql(4)\r",
											"});\r",
											"\r",
											"pm.test(\"Check number of contributions in field data level 2\", function () {\r",
											"  var number = Object.keys(jsonData.data[0]).length;\r",
											"  pm.expect(number).to.eql(10)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
											"  var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check name of contributions in data data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
											"  var myKeysList = [\"blockNo\", \"slotNo\", \"epochNo\", \"epochSlotNo\", \"hash\", \"time\", \"txCount\",\"totalFees\", \"totalOutput\", \"slotLeader\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"//Check scenario\r",
											"pm.test(\"Compare totalItems at api get list of epoch by its no  with api get a epoch detail by its no\",function (){\r",
											"    pm.expect(jsonData.totalItems).to.eql(pm.environment.get(\"epoch_blkCount\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/epochs/{{epoch_no}}/blocks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"epochs",
										"{{epoch_no}}",
										"blocks"
									],
									"query": [
										{
											"key": "page",
											"value": "5",
											"description": "Zero-based page index (0..N)",
											"disabled": true
										},
										{
											"key": "size",
											"value": "2",
											"description": "The size of the page to be returned",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "id,DESC",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/epochs/:no/blocks?page=0&size=10&sort=id,DESC",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"epochs",
												":no",
												"blocks"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "sort",
													"value": "id,DESC"
												}
											],
											"variable": [
												{
													"key": "no",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) Epoch Number"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"blockNo\": -22704027,\n      \"slotNo\": -51391264,\n      \"epochNo\": -39090089,\n      \"epochSlotNo\": -69014650,\n      \"hash\": \"eu do sed\",\n      \"time\": \"1960-04-06T07:38:09.311Z\",\n      \"txCount\": 9531849,\n      \"totalFees\": -15376531,\n      \"totalOutput\": 10922088,\n      \"slotLeader\": \"sed\"\n    },\n    {\n      \"blockNo\": -9568011,\n      \"slotNo\": -69442798,\n      \"epochNo\": -40946229,\n      \"epochSlotNo\": -431988,\n      \"hash\": \"non aliquip ea\",\n      \"time\": \"1967-04-18T02:55:05.212Z\",\n      \"txCount\": -2102511,\n      \"totalFees\": -65864555,\n      \"totalOutput\": -22661063,\n      \"slotLeader\": \"Duis aute\"\n    }\n  ],\n  \"totalItems\": -14558241,\n  \"totalPages\": 63797617,\n  \"currentPage\": 9576109\n}"
								}
							]
						},
						{
							"name": "Get a epoch detail by its no",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check no value\", function () {\r",
											"    pm.expect(jsonData.no).to.eql(pm.environment.get(\"epoch_no\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check status value\", function () {\r",
											"    pm.expect(jsonData.status).to.include(pm.environment.get(\"epoch_status\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check blkCount value\", function () {\r",
											"    pm.expect(jsonData.blkCount).to.eql(pm.environment.get(\"epoch_blkCount\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check outSum value\", function () {\r",
											"    pm.expect((jsonData.outSum/10**6).toFixed(2)).to.eql((pm.environment.get(\"epoch_outSum\")/10**6).toFixed(2));\r",
											"});\r",
											"\r",
											"pm.test(\"Check startTime value\", function () {\r",
											"    pm.expect(jsonData.startTime).to.include(pm.environment.get(\"epoch_startTime\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check endTime value\", function () {\r",
											"    pm.expect(jsonData.endTime).to.contain(pm.environment.get(\"epoch_endTime\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check maxSlot value\", function () {\r",
											"    pm.expect(jsonData.maxSlot).to.eql(432000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check txCount value\", function () {\r",
											"    pm.expect(jsonData.txCount).to.eql(pm.environment.get(\"epoch_txCount\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check rewardsDistributed value\", function () {\r",
											"    pm.expect(jsonData.rewardsDistributed).to.eql(pm.environment.get(\"epoch_rewardsDistributed\"));\r",
											"});\r",
											"\r",
											"//Compare data type\r",
											"pm.test(\"Check data type of the response\", () => {\r",
											"    let moment = require ('moment');\r",
											"    pm.expect(jsonData.no).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.status).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.blkCount).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.outSum).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.txCount).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.startTime).to.include(moment(jsonData.startTime).format('YYYY/MM/DD HH:mm:ss'));\r",
											"    pm.expect(jsonData.endTime).to.include(moment(jsonData.endTime).format('YYYY/MM/DD HH:mm:ss'));\r",
											"    pm.expect(jsonData.maxSlot).to.be.a(\"number\");\r",
											"    pm.expect(typeof jsonData.rewardsDistributed).to.be.oneOf([ 'object', 'number']);\r",
											"  });\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
											"  var number = Object.keys(jsonData).length;\r",
											"  pm.expect(number).to.eql(9)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
											"  var myKeysList = [\"no\", \"status\", \"blkCount\", \"outSum\", \"txCount\", \"startTime\", \"endTime\", \"maxSlot\", \"rewardsDistributed\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/epochs/{{epoch_no}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"epochs",
										"{{epoch_no}}"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/epochs/:no",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"epochs",
												":no"
											],
											"variable": [
												{
													"key": "no",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) Epoch Number"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"no\": 74154396,\n  \"status\": \"SYNCING\",\n  \"blkCount\": -55420243,\n  \"outSum\": -9787853,\n  \"txCount\": 16035949,\n  \"startTime\": \"1977-12-28T02:53:59.986Z\",\n  \"endTime\": \"1957-04-28T06:13:32.677Z\",\n  \"maxSlot\": -18548224,\n  \"rewardsDistributed\": -71488647\n}"
								}
							]
						}
					]
				},
				{
					"name": "delegations",
					"item": [
						{
							"name": "Find Top(default is 3) Delegation Pool order by pool size",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var stt = 200\r",
											"var res_time = 5000\r",
											"\r",
											"//Compare static data\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(stt);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
											"});\r",
											"\r",
											"//Compare data type\r",
											"pm.test(\"Check data type of id\", () => {\r",
											"  pm.expect(jsonData[0].id).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of poolId\", () => {\r",
											"  pm.expect(jsonData[0].poolId).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of poolName\", () => {\r",
											"  pm.expect(jsonData[0].poolName).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of poolSize\", () => {\r",
											"  pm.expect(jsonData[0].poolSize).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of reward\", () => {\r",
											"  pm.expect(jsonData[0].reward).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of feePercent\", () => {\r",
											"  pm.expect(jsonData[0].feePercent).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of feeAmount\", () => {\r",
											"  pm.expect(jsonData[0].feeAmount).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of pledge\", () => {\r",
											"  pm.expect(jsonData[0].pledge).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of saturation\", () => {\r",
											"  pm.expect(jsonData[0].saturation).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of stakeLimit\", () => {\r",
											"  pm.expect(typeof jsonData[0].stakeLimit).to.be.oneOf([ 'object', 'number']);\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of reserves\", () => {\r",
											"  pm.expect(typeof jsonData[0].reserves).to.be.oneOf([ 'object', 'number']);\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of numberDelegators\", () => {\r",
											"  pm.expect(typeof jsonData[0].numberDelegators).to.be.oneOf([ 'object', 'number']);\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of epochBlock\", () => {\r",
											"  pm.expect(typeof jsonData[0].epochBlock).to.be.oneOf([ 'object', 'number']);\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of lifetimeBlock\", () => {\r",
											"  pm.expect(typeof jsonData[0].lifetimeBlock).to.be.oneOf([ 'object', 'number']);\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of lifetimeRos\", () => {\r",
											"  pm.expect(typeof jsonData[0].lifetimeRos).to.be.oneOf([ 'object', 'number']);\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of kparam\", () => {\r",
											"  pm.expect(typeof jsonData[0].kparam).to.be.oneOf([ 'object', 'number']);\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
											"  var number = Object.keys(jsonData[0]).length;\r",
											"  pm.expect(number).to.eql(16)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData[0])\r",
											"  var myKeysList = [\"id\", \"poolId\", \"poolName\", \"poolSize\", \"reward\", \"feePercent\", \"feeAmount\", \"pledge\", \"saturation\", \"stakeLimit\", \"reserves\", \"numberDelegators\", \"epochBlock\", \"lifetimeBlock\", \"lifetimeRos\", \"kparam\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"//Check scenario\r",
											"pm.test(\"Others value exist\",function (){\r",
											"    \r",
											"    //Randome value 0-10\r",
											"    var sampleArr = [0,1,2,3,4,5,6,7,8,9]\r",
											"    var randomIndex = Math.floor(Math.random() * sampleArr.length);\r",
											"    console.log(randomIndex);\r",
											"\r",
											"    pm.environment.set(\"delegation_poolId\", jsonData[randomIndex].poolId);\r",
											"    pm.environment.set(\"delegation_poolName\", jsonData[randomIndex].poolName);\r",
											"    pm.environment.set(\"delegation_poolSize\", jsonData[randomIndex].poolSize);\r",
											"    pm.environment.set(\"delegation_reward\", jsonData[randomIndex].reward);\r",
											"    pm.environment.set(\"delegation_saturation\", jsonData[randomIndex].saturation);\r",
											"    //pm.environment.set(\"delegation_stakeLimit\", jsonData[randomIndex].stakeLimit); out of scope (the value not use on FE)\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/delegations/top",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"delegations",
										"top"
									],
									"query": [
										{
											"key": "page",
											"value": "49540002",
											"description": "(Required) ",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/delegations/top?page=<integer>&size=<integer>&sort=<string>,<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"delegations",
												"top"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "size",
													"value": "<integer>"
												},
												{
													"key": "sort",
													"value": "<string>,<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": 3582894,\n    \"poolId\": \"consequat adipisicing Duis aliquip ex\",\n    \"poolName\": \"nostrud\",\n    \"poolSize\": 14731364,\n    \"reward\": 96686489.89773166,\n    \"feePercent\": 70993240.3232114,\n    \"feeAmount\": 32154986,\n    \"pledge\": -66983487,\n    \"saturation\": -78598465.9928881,\n    \"stakeLimit\": -9779525.051954344,\n    \"reserves\": 9067232,\n    \"kparam\": -68590999\n  },\n  {\n    \"id\": 74328075,\n    \"poolId\": \"culpa ad\",\n    \"poolName\": \"fugiat aliquip mollit Duis dolore\",\n    \"poolSize\": -74928420,\n    \"reward\": -86023865.92985769,\n    \"feePercent\": -39992146.37116823,\n    \"feeAmount\": 51348307,\n    \"pledge\": 76515746,\n    \"saturation\": -85664211.0819026,\n    \"stakeLimit\": 28665945.73204489,\n    \"reserves\": -5650423,\n    \"kparam\": -5469041\n  }\n]"
								}
							]
						},
						{
							"name": "get Data For Pool Detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var stt = 200\r",
											"var res_time = 5000\r",
											"var poolName = \"StakeNuts\"\r",
											"var hashView = \"0f292fcaa02b8b2f9b3c8f9fd8e0bb21abedb692a6d5058df3ef2735\"\r",
											"var createDate = \"2020/07/29 22:00:31\"\r",
											"\r",
											"//Compare static data\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(stt);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
											"});\r",
											"\r",
											"pm.test(\"Compare poolName\", function () {\r",
											"    pm.expect(jsonData.poolName).to.eql(pm.environment.get(\"delegation_poolName\"))\r",
											"    || pm.expect(jsonData.poolName).to.include(pm.environment.get(\"delegation_poolName\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of createDate\", () => {\r",
											"        let moment = require ('moment');\r",
											"  pm.expect(jsonData.createDate).to.include(moment(jsonData.createDate).format('YYYY/MM/DD HH:mm:ss'));\r",
											"});\r",
											"\r",
											"pm.test(\"Compare poolSize\", function () {\r",
											"    pm.expect(jsonData.poolSize).to.eql(pm.environment.get(\"delegation_poolSize\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Compare reward\", function () {\r",
											"    pm.expect(jsonData.reward).to.eql(pm.environment.get(\"delegation_reward\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Compare saturation\", function () {\r",
											"    pm.expect(jsonData.saturation).to.eql(pm.environment.get(\"delegation_saturation\"));\r",
											"});\r",
											"\r",
											"//Compare format dynamic data\r",
											"pm.test(\"Check data type of poolName\", () => {\r",
											"  pm.expect(typeof jsonData.poolName).to.be.oneOf([ 'object', 'string']);\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of tickerName\", () => {\r",
											"  pm.expect(typeof jsonData.tickerName).to.be.oneOf([ 'object', 'string']);\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of hashView\", () => {\r",
											"  pm.expect(jsonData.hashView).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of createDate\", () => {\r",
											"        let moment = require ('moment');\r",
											"  pm.expect(jsonData.createDate).to.include(moment(jsonData.createDate).format('YYYY/MM/DD HH:mm:ss'));\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of rewardAccounts\", () => {\r",
											"  pm.expect(jsonData.rewardAccounts).to.be.a(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of ownerAccounts\", () => {\r",
											"  pm.expect(jsonData.ownerAccounts).to.be.a(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of poolSize\", () => {\r",
											"  pm.expect(jsonData.poolSize).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of stakeLimit\", () => {\r",
											"  pm.expect(jsonData.stakeLimit).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of delegators\", () => {\r",
											"  pm.expect(jsonData.delegators).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of saturation\", () => {\r",
											"  pm.expect(jsonData.saturation).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of reward\", () => {\r",
											"  pm.expect(jsonData.reward).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of ros\", () => {\r",
											"  pm.expect(jsonData.ros).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of pledge\", () => {\r",
											"  pm.expect(jsonData.pledge).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of cost\", () => {\r",
											"  pm.expect(jsonData.cost).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of margin\", () => {\r",
											"  pm.expect(jsonData.margin).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of epochBlock\", () => {\r",
											"  pm.expect(jsonData.epochBlock).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of lifetimeBlock\", () => {\r",
											"  pm.expect(jsonData.lifetimeBlock).to.be.a(\"number\");\r",
											"});\r",
											"//Compare total property\r",
											"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
											"  var number = Object.keys(jsonData).length;\r",
											"  pm.expect(number).to.eql(17)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
											"  var myKeysList = [\"poolName\", \"tickerName\", \"hashView\", \"createDate\", \"rewardAccounts\", \"ownerAccounts\", \"poolSize\",\"stakeLimit\", \"delegators\", \"saturation\", \"reward\", \"ros\", \"pledge\", \"cost\", \"margin\", \"epochBlock\", \"lifetimeBlock\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/delegations/pool-detail-header/{{delegation_poolId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"delegations",
										"pool-detail-header",
										"{{delegation_poolId}}"
									],
									"variable": [
										{
											"key": "poolView",
											"value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/delegations/pool-detail-header/:poolView",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"delegations",
												"pool-detail-header",
												":poolView"
											],
											"variable": [
												{
													"key": "poolView",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"poolName\": \"Excepteur\",\n  \"tickerName\": \"eu amet tempor\",\n  \"hashView\": \"Duis\",\n  \"createDate\": \"2018-02-24T10:58:22.405Z\",\n  \"rewardAccounts\": [\n    \"laboris magna dolor\",\n    \"occaecat\"\n  ],\n  \"ownerAccounts\": [\n    \"dolor aliquip\",\n    \"consectetur et\"\n  ],\n  \"poolSize\": -43266925,\n  \"stakeLimit\": -27399170.704859838,\n  \"delegators\": -44942479,\n  \"saturation\": -41829384.80113334,\n  \"reward\": -46697121.19380853,\n  \"ros\": -94606826.06914848,\n  \"pledge\": -28383056,\n  \"cost\": 52199517,\n  \"margin\": -24101332.466295972,\n  \"epochBlock\": 58539520,\n  \"lifetimeBlock\": -90504000\n}"
								}
							]
						},
						{
							"name": "get Data For Pool Table",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var stt = 200\r",
											"var res_time = 5000\r",
											"var current_page = 0\r",
											"\r",
											"//Compare static data\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(stt);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
											"});\r",
											"\r",
											"pm.test(\"Compare Currentpage\", function () {\r",
											"    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
											"});\r",
											"\r",
											"//Compare data type\r",
											"pm.test(\"Check data type of id\", () => {\r",
											"  pm.expect(jsonData.data[0].id).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of poolId\", () => {\r",
											"  pm.expect(jsonData.data[0].poolId).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of poolName\", () => {\r",
											"  pm.expect(jsonData.data[0].poolName).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of poolSize\", () => {\r",
											"  pm.expect(jsonData.data[0].poolSize).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of reward\", () => {\r",
											"  pm.expect(jsonData.data[0].reward).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of feePercent\", () => {\r",
											"  pm.expect(jsonData.data[0].feePercent).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of feeAmount\", () => {\r",
											"  pm.expect(jsonData.data[0].feeAmount).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of pledge\", () => {\r",
											"  pm.expect(jsonData.data[0].pledge).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of saturation\", () => {\r",
											"  pm.expect(jsonData.data[0].saturation).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of stakeLimit\", () => {\r",
											"  pm.expect(typeof jsonData.data[0].stakeLimit).to.be.oneOf([ 'object', 'number']);\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of reserves\", () => {\r",
											"  pm.expect(typeof jsonData.data[0].reserves).to.be.oneOf([ 'object', 'number']);\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of kparam\", () => {\r",
											"  pm.expect(typeof jsonData.data[0].kparam).to.be.oneOf([ 'object', 'number']);\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of totalItems\", () => {\r",
											"  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of totalPages\", () => {\r",
											"  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
											"  var number = Object.keys(jsonData).length;\r",
											"  pm.expect(number).to.eql(4)\r",
											"});\r",
											"\r",
											"pm.test(\"Check number of contributions in field data level 2\", function () {\r",
											"  var number = Object.keys(jsonData.data[0]).length;\r",
											"  pm.expect(number).to.eql(16)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
											"  var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check name of contributions in data data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
											"  var myKeysList = [\"id\", \"poolId\", \"poolName\", \"poolSize\", \"reward\", \"feePercent\", \"feeAmount\",\"pledge\", \"saturation\", \"stakeLimit\", \"reserves\", \"numberDelegators\", \"epochBlock\", \"lifetimeBlock\", \"lifetimeRos\",\"kparam\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/delegations/pool-list?search=a",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"delegations",
										"pool-list"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)",
											"disabled": true
										},
										{
											"key": "size",
											"value": "10",
											"description": "The size of the page to be returned",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "dolore non est",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "elit",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
											"disabled": true
										},
										{
											"key": "search",
											"value": "a",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/delegations/pool-list?page=0&size=10&sort=ex&sort=nisi de&search=enim voluptate Excepteur ullamco",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"delegations",
												"pool-list"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "sort",
													"value": "ex"
												},
												{
													"key": "sort",
													"value": "nisi de"
												},
												{
													"key": "search",
													"value": "enim voluptate Excepteur ullamco"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"id\": 56657873,\n      \"poolId\": \"proident\",\n      \"poolName\": \"minim\",\n      \"poolSize\": -35015109,\n      \"reward\": -87194384.21063441,\n      \"feePercent\": -3583589.273017168,\n      \"feeAmount\": 45846948,\n      \"pledge\": -29794943,\n      \"saturation\": 30561231.61416036,\n      \"stakeLimit\": 41801323.04536271,\n      \"reserves\": -94468756,\n      \"kparam\": -63319024\n    },\n    {\n      \"id\": -79129436,\n      \"poolId\": \"quis deserunt proident\",\n      \"poolName\": \"qui reprehenderit mol\",\n      \"poolSize\": 44633391,\n      \"reward\": -25826389.001877278,\n      \"feePercent\": 92971093.67675361,\n      \"feeAmount\": -97385751,\n      \"pledge\": 37012105,\n      \"saturation\": 48226713.54193923,\n      \"stakeLimit\": 60597120.692383915,\n      \"reserves\": -84556101,\n      \"kparam\": -36002111\n    }\n  ],\n  \"totalItems\": 96964772,\n  \"totalPages\": -62017864,\n  \"currentPage\": -43079151\n}"
								}
							]
						},
						{
							"name": "get Epoch List For Pool Detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"var stt = 200\r",
											"var res_time = 5000\r",
											"\r",
											"//Compare static data\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(stt);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Compare currentPage\", function () {\r",
											"    pm.expect(jsonData.currentPage).to.eql(pm.environment.get(\"page\"));\r",
											"});\r",
											"\r",
											"//Set Next value for size\r",
											"const sizes = pm.collectionVariables.get(\"sizes\");\r",
											"if (sizes && sizes.length > 0){\r",
											"    postman.setNextRequest(\"Loop Query Parameter\");\r",
											"} else {\r",
											"    postman.setNextRequest(null);\r",
											"}\r",
											"\r",
											"//Compare data type\r",
											"pm.test(\"Check data type\", () => {\r",
											"    if(jsonData.data.length > 0){\r",
											"        pm.expect(jsonData.data[0].epoch).to.be.a(\"number\");\r",
											"        pm.expect(jsonData.data[0].block).to.be.a(\"number\");\r",
											"        pm.expect(jsonData.data[0].stakeAmount).to.be.a(\"number\");\r",
											"        pm.expect(jsonData.data[0].delegators).to.be.a(\"number\");\r",
											"        pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
											"        pm.expect(jsonData.data[0].ros).to.be.a(\"number\");\r",
											"        pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
											"        pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
											"    }\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
											"  var number = Object.keys(jsonData).length;\r",
											"  pm.expect(number).to.eql(4)\r",
											"});\r",
											"\r",
											"pm.test(\"Check number of contributions in field data level 2\", function () {\r",
											"    if (jsonData.data.length > 0) {\r",
											"        var number = Object.keys(jsonData.data[0]).length;\r",
											"        pm.expect(number).to.eql(6)\r",
											"    }\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"    var arrayOfResponseKeys  = Object.keys(jsonData)\r",
											"    var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
											"    for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"        for (let j = 0; j < myKeysList.length; j++) {\r",
											"            pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"            }\r",
											"        }\r",
											"});\r",
											"\r",
											"pm.test(\"Check name of contributions in data data\", function () {\r",
											"    if (jsonData.data.length > 0) {\r",
											"        var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
											"        var myKeysList = [\"epoch\", \"block\", \"stakeAmount\", \"delegators\", \"fee\", \"ros\"];\r",
											"        for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"            for (let j = 0; j < myKeysList.length; j++) {\r",
											"                pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"            }\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let pages = pm.environment.get(\"pages\");\r",
											"let sizes = pm.environment.get(\"sizes\");\r",
											"\r",
											"if(!pages || pages.length == 0) {\r",
											"    pages = [0, 5, 10, 15];\r",
											"};\r",
											"\r",
											"if(!sizes || sizes.length == 0) {\r",
											"    sizes = [5, 10, 15, 20];\r",
											"};\r",
											"\r",
											"let currentPage = pages.shift();\r",
											"let currentsize = sizes.shift();\r",
											"\r",
											"pm.environment.set(\"page\", currentPage);\r",
											"pm.environment.set(\"pages\", pages);\r",
											"\r",
											"pm.environment.set(\"size\", currentsize);\r",
											"pm.environment.set(\"sizes\", sizes);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/delegations/pool-detail-epochs?poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy&page={{page}}&size={{size}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"delegations",
										"pool-detail-epochs"
									],
									"query": [
										{
											"key": "poolView",
											"value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
											"description": "(Required) "
										},
										{
											"key": "page",
											"value": "{{page}}",
											"description": "Zero-based page index (0..N)"
										},
										{
											"key": "size",
											"value": "{{size}}",
											"description": "The size of the page to be returned"
										},
										{
											"key": "sort",
											"value": "dolore non est",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "elit",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/delegations/pool-detail-epochs?poolView=enim voluptate Excepteur ullamco&page=0&size=10&sort=ex&sort=nisi de",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"delegations",
												"pool-detail-epochs"
											],
											"query": [
												{
													"key": "poolView",
													"value": "enim voluptate Excepteur ullamco"
												},
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "sort",
													"value": "ex"
												},
												{
													"key": "sort",
													"value": "nisi de"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"epoch\": -92654896,\n      \"block\": 55846836,\n      \"stakeAmount\": -74072003,\n      \"delegators\": -89940416,\n      \"fee\": 40222707,\n      \"ros\": 63789713.64269903\n    },\n    {\n      \"epoch\": 94289102,\n      \"block\": -42009602,\n      \"stakeAmount\": 74708702,\n      \"delegators\": 37432306,\n      \"fee\": 43018810,\n      \"ros\": 98181883.15364954\n    }\n  ],\n  \"totalItems\": 36477099,\n  \"totalPages\": -40687813,\n  \"currentPage\": 71106016\n}"
								}
							]
						},
						{
							"name": "get Delegator For Pool Detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var stt = 200\r",
											"var res_time = 5000\r",
											"var current_page = 0\r",
											"\r",
											"//Compare static data\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(stt);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
											"});\r",
											"\r",
											"pm.test(\"Compare Currentpage\", function () {\r",
											"    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
											"});\r",
											"\r",
											"//Compare data type\r",
											"pm.test(\"Check data type of stakeAddressId\", () => {\r",
											"  pm.expect(jsonData.data[0].stakeAddressId).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of totalStake\", () => {\r",
											"  pm.expect(jsonData.data[0].totalStake).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of time\", () => {\r",
											"        let moment = require ('moment');\r",
											"  pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of fee\", () => {\r",
											"  pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of view\", () => {\r",
											"  pm.expect(jsonData.data[0].view).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of totalItems\", () => {\r",
											"  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of totalPages\", () => {\r",
											"  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
											"  var number = Object.keys(jsonData).length;\r",
											"  pm.expect(number).to.eql(4)\r",
											"});\r",
											"\r",
											"pm.test(\"Check number of contributions in field data level 2\", function () {\r",
											"  var number = Object.keys(jsonData.data[0]).length;\r",
											"  pm.expect(number).to.eql(5)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
											"  var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check name of contributions in data data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
											"  var myKeysList = [\"stakeAddressId\", \"totalStake\", \"time\", \"fee\", \"view\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/delegations/pool-detail-delegators?poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"delegations",
										"pool-detail-delegators"
									],
									"query": [
										{
											"key": "poolView",
											"value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
											"description": "(Required) "
										},
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)",
											"disabled": true
										},
										{
											"key": "size",
											"value": "10",
											"description": "The size of the page to be returned",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/delegations/pool-detail-delegators?poolView=enim voluptate Excepteur ullamco&page=0&size=10&sort=ex&sort=nisi de",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"delegations",
												"pool-detail-delegators"
											],
											"query": [
												{
													"key": "poolView",
													"value": "enim voluptate Excepteur ullamco"
												},
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "10"
												},
												{
													"key": "sort",
													"value": "ex"
												},
												{
													"key": "sort",
													"value": "nisi de"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"stakeAddressId\": -32681859,\n      \"totalStake\": 14284070,\n      \"time\": \"1971-03-27T21:37:41.991Z\",\n      \"fee\": 89033495,\n      \"view\": \"in\"\n    },\n    {\n      \"stakeAddressId\": -35256305,\n      \"totalStake\": -57712460,\n      \"time\": \"1957-03-08T01:55:29.442Z\",\n      \"fee\": -4704659,\n      \"view\": \"sit sunt laborum \"\n    }\n  ],\n  \"totalItems\": 12071567,\n  \"totalPages\": -48613013,\n  \"currentPage\": -36622601\n}"
								}
							]
						},
						{
							"name": "get Analytics For Pool Detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"var stt = 200\r",
											"var res_time = 5000\r",
											"\r",
											"//Compare static data\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(stt);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
											"});\r",
											"\r",
											"//Compare data type\r",
											"pm.test(\"Check data type of highest\", () => {\r",
											"  pm.expect(jsonData.epochChart.highest).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of lowest\", () => {\r",
											"  pm.expect(jsonData.epochChart.lowest).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of epochNo\", () => {\r",
											"  pm.expect(jsonData.epochChart.dataByDays[0].epochNo).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of totalStake\", () => {\r",
											"  pm.expect(jsonData.epochChart.dataByDays[0].totalStake).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of highest\", () => {\r",
											"  pm.expect(jsonData.delegatorChart.highest).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of lowest\", () => {\r",
											"  pm.expect(jsonData.delegatorChart.lowest).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of epochNo\", () => {\r",
											"  pm.expect(jsonData.delegatorChart.dataByDays[0].epochNo).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of numberDelegator\", () => {\r",
											"  pm.expect(jsonData.delegatorChart.dataByDays[0].numberDelegator).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
											"  var number = Object.keys(jsonData).length;\r",
											"  pm.expect(number).to.eql(2)\r",
											"});\r",
											"\r",
											"pm.test(\"Check number of contributions in field data level 2\", function () {\r",
											"  var number = Object.keys(jsonData.epochChart).length;\r",
											"  pm.expect(number).to.eql(3)\r",
											"});\r",
											"\r",
											"pm.test(\"Check number of contributions in field data level 2\", function () {\r",
											"  var number = Object.keys(jsonData.delegatorChart).length;\r",
											"  pm.expect(number).to.eql(3)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data level 1\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
											"  var myKeysList = [\"epochChart\", \"delegatorChart\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check name of contributions in epochChart data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData.epochChart)\r",
											"  var myKeysList = [\"highest\", \"lowest\", \"dataByDays\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check name of contributions in delegatorChart data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData.delegatorChart)\r",
											"  var myKeysList = [\"highest\", \"lowest\", \"dataByDays\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/delegations/pool-detail-analytics?poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"delegations",
										"pool-detail-analytics"
									],
									"query": [
										{
											"key": "poolView",
											"value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/delegations/pool-detail-analytics?poolView=enim voluptate Excepteur ullamco",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"delegations",
												"pool-detail-analytics"
											],
											"query": [
												{
													"key": "poolView",
													"value": "enim voluptate Excepteur ullamco"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"epochChart\": {\n    \"highest\": 95116071,\n    \"lowest\": 94994121,\n    \"dataByDays\": [\n      {\n        \"epochNo\": 64196947,\n        \"totalStake\": -65716731\n      },\n      {\n        \"epochNo\": 26212799,\n        \"totalStake\": -21704251\n      }\n    ]\n  },\n  \"delegatorChart\": {\n    \"highest\": 54482618,\n    \"lowest\": -58021728,\n    \"dataByDays\": [\n      {\n        \"epochNo\": -43580719,\n        \"numberDelegator\": 31863401\n      },\n      {\n        \"epochNo\": 21100263,\n        \"numberDelegator\": -68460321\n      }\n    ]\n  }\n}"
								}
							]
						},
						{
							"name": "get Data For Delegation Header",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"var stt = 200\r",
											"var res_time = 5000\r",
											"\r",
											"//Compare static data\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(stt);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
											"});\r",
											"\r",
											"//Compare format dynamic data\r",
											"pm.test(\"Check data type of epochNo\", () => {\r",
											"  pm.expect(jsonData.epochNo).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of countDownEndTime\", () => {\r",
											"  pm.expect(jsonData.countDownEndTime).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of epochSlotNo\", () => {\r",
											"  pm.expect(jsonData.epochSlotNo).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of liveStake\", () => {\r",
											"  pm.expect(jsonData.liveStake).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of delegators\", () => {\r",
											"  pm.expect(jsonData.delegators).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"//Compare total property\r",
											"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
											"  var number = Object.keys(jsonData).length;\r",
											"  pm.expect(number).to.eql(7)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
											"  var myKeysList = [\"epochNo\", \"countDownEndTime\", \"epochSlotNo\", \"liveStake\", \"delegators\", \"activePools\", \"retiredPools\"];\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/delegations/header",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"delegations",
										"header"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/delegations/header",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"delegations",
												"header"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"epochNo\": 49668737,\n  \"countDownEndTime\": 80617641,\n  \"epochSlotNo\": 20660255,\n  \"liveStake\": 31682705,\n  \"delegators\": 86659213\n}"
								}
							]
						}
					]
				},
				{
					"name": "blocks",
					"item": [
						{
							"name": "Get all block",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check currentPage value\", function () {\r",
											"    pm.expect(jsonData.currentPage).to.eql(0);\r",
											"});\r",
											"\r",
											"//Compare data type\r",
											"pm.test(\"Check data type of the response\", () => {\r",
											"  pm.expect(jsonData.data[0].blockNo).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check data type of slotNo\", () => {\r",
											"  pm.expect(jsonData.data[0].slotNo).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of epochNo\", () => {\r",
											"  pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of epochSlotNo\", () => {\r",
											"  pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of hash\", () => {\r",
											"  pm.expect(jsonData.data[0].hash).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of time\", () => {\r",
											"        let moment = require ('moment');\r",
											"  pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of txCount\", () => {\r",
											"  pm.expect(jsonData.data[0].txCount).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of totalFees\", () => {\r",
											"  pm.expect(jsonData.data[0].totalFees).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of totalOutput\", () => {\r",
											"  pm.expect(jsonData.data[0].totalOutput).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of slotLeader\", () => {\r",
											"  pm.expect(jsonData.data[0].slotLeader).to.be.a(\"string\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of totalItems\", () => {\r",
											"  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of totalPages\", () => {\r",
											"  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
											"  var number = Object.keys(jsonData).length;\r",
											"  pm.expect(number).to.eql(4)\r",
											"});\r",
											"\r",
											"pm.test(\"Check number of contributions in field data level 2\", function () {\r",
											"  var number = Object.keys(jsonData.data[0]).length;\r",
											"  pm.expect(number).to.eql(10)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"    var arrayOfResponseKeys  = Object.keys(jsonData)\r",
											"    var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
											"    for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"        for (let j = 0; j < myKeysList.length; j++) {\r",
											"            pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check name of contributions in data data\", function () {\r",
											"    var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
											"    var myKeysList = [\"blockNo\", \"slotNo\", \"epochNo\", \"epochSlotNo\", \"hash\", \"time\", \"txCount\",\"totalFees\", \"totalOutput\", \"slotLeader\"];\r",
											"    for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"        for (let j = 0; j < myKeysList.length; j++) {\r",
											"            pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"// Get value\r",
											"pm.test(\"Check block \" + pm.environment.get(\"tx_blockNo\") + \" exist\",function (){\r",
											"    var tx_blockNo = pm.environment.get(\"tx_blockNo\");\r",
											"    let result = jsonData.data.find(a => a.blockNo === tx_blockNo);\r",
											"\r",
											"    pm.environment.set(\"block_blockNo\", result.blockNo);\r",
											"    pm.environment.set(\"block_hash\", result.hash);\r",
											"    pm.environment.set(\"block_epochNo\", result.epochNo);\r",
											"    pm.environment.set(\"block_time\", result.time);\r",
											"    pm.environment.set(\"block_txCount\", result.txCount);\r",
											"    pm.environment.set(\"block_slotNo\", result.slotNo);\r",
											"    pm.environment.set(\"block_epochSlotNo\", result.epochSlotNo);\r",
											"    pm.environment.set(\"block_totalFees\", result.totalFees);\r",
											"    pm.environment.set(\"block_totalOutput\", result.totalOutput);\r",
											"    pm.environment.set(\"block_slotLeader\", result.slotLeader);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/blocks",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"blocks"
									],
									"query": [
										{
											"key": "page",
											"value": "5",
											"description": "Zero-based page index (0..N)",
											"disabled": true
										},
										{
											"key": "size",
											"value": "20",
											"description": "The size of the page to be returned",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "id,DESC",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/blocks?page=0&size=20&sort=id,DESC",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"blocks"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "20"
												},
												{
													"key": "sort",
													"value": "id,DESC"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"blockNo\": 1028153,\n      \"slotNo\": 7991687,\n      \"epochNo\": -28188535,\n      \"epochSlotNo\": -22617358,\n      \"hash\": \"dolor minim sit\",\n      \"time\": \"1943-07-11T17:10:44.908Z\",\n      \"txCount\": -60907501,\n      \"totalFees\": 5379948,\n      \"totalOutput\": 10893408,\n      \"slotLeader\": \"sint aute nisi in aliqua\"\n    },\n    {\n      \"blockNo\": -84526712,\n      \"slotNo\": 80739718,\n      \"epochNo\": 88376858,\n      \"epochSlotNo\": 61110134,\n      \"hash\": \"officia\",\n      \"time\": \"1998-08-16T08:00:13.528Z\",\n      \"txCount\": 43679489,\n      \"totalFees\": 1615987,\n      \"totalOutput\": 52923981,\n      \"slotLeader\": \"cillum id\"\n    }\n  ],\n  \"totalItems\": -51536169,\n  \"totalPages\": -81459366,\n  \"currentPage\": 45098018\n}"
								}
							]
						},
						{
							"name": "Get tx list of block",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"pm.test(\"Check currentPage value\", function () {\r",
											"    pm.expect(jsonData.currentPage).to.eql(0);\r",
											"});\r",
											"\r",
											"//Compare data type\r",
											"pm.test(\"Check data type of hash\", () => {\r",
											"    let moment = require ('moment');\r",
											"\r",
											"    pm.expect(jsonData.data[0].hash).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[0].blockNo).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].blockHash).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].slot).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
											"    pm.expect(jsonData.data[0].addressesInput).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data[0].addressesOutput).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.data[0].totalOutput).to.be.a(\"number\");\r",
											"    pm.expect(typeof jsonData.data[0].balance).to.be.oneOf([ 'object', 'number']);\r",
											"    pm.expect(jsonData.data[0].tokens).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
											"    var number = Object.keys(jsonData).length;\r",
											"    pm.expect(number).to.eql(4)\r",
											"});\r",
											"\r",
											"pm.test(\"Check number of contributions in field data level 2\", function () {\r",
											"    var number = Object.keys(jsonData.data[0]).length;\r",
											"    pm.expect(number).to.eql(13)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"    var arrayOfResponseKeys  = Object.keys(jsonData)\r",
											"    var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
											"    for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"        for (let j = 0; j < myKeysList.length; j++) {\r",
											"            pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test(\"Check name of contributions in data data\", function () {\r",
											"    var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
											"    var myKeysList = [\"hash\", \"blockNo\", \"blockHash\", \"epochNo\", \"epochSlotNo\", \"slot\", \"time\",\"addressesInput\", \"addressesOutput\", \"fee\", \"totalOutput\", \"balance\", \"tokens\"];\r",
											"    for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"        for (let j = 0; j < myKeysList.length; j++) {\r",
											"            pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											"//Check scenario\r",
											"pm.test(\"Compare txCount at api get tx list of block with api get a block detail\",function (){\r",
											"    pm.expect(jsonData.totalItems).to.eql(pm.environment.get(\"block_txCount\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Compare value between tx list of block with\", function () {\r",
											"    var tx_blockNo = pm.environment.get(\"tx_blockNo\");\r",
											"    var tx_hash = pm.environment.get(\"tx_hash\");\r",
											"    var tx_blockHash = pm.environment.get(\"tx_blockHash\");\r",
											"    var tx_epochNo = pm.environment.get(\"tx_epochNo\");\r",
											"    var tx_time = pm.environment.get(\"tx_time\");\r",
											"    var tx_amount = pm.environment.get(\"tx_amount\");\r",
											"    var tx_fee = pm.environment.get(\"tx_fee\");\r",
											"    var tx_epochSlotNo = pm.environment.get(\"tx_epochSlotNo\");\r",
											"\r",
											"    let tb_result =jsonData.data.find(b => b.hash === tx_hash);\r",
											"\r",
											"    //Main compare\r",
											"    pm.expect(tb_result.blockNo).to.eql(tx_blockNo);\r",
											"    pm.expect(tb_result.blockHash).to.eql(tx_blockHash);\r",
											"    pm.expect(tb_result.epochNo).to.eql(tx_epochNo);\r",
											"    pm.expect(tb_result.epochSlotNo).to.eql(tx_epochSlotNo);\r",
											"    pm.expect(tb_result.time).to.contain(tx_time);\r",
											"    pm.expect(tb_result.fee).to.eql(tx_fee);\r",
											"    pm.expect(tb_result.totalOutput).to.eql(tx_amount);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/blocks/{{block_blockNo}}/txs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"blocks",
										"{{block_blockNo}}",
										"txs"
									],
									"query": [
										{
											"key": "page",
											"value": "0",
											"description": "Zero-based page index (0..N)",
											"disabled": true
										},
										{
											"key": "size",
											"value": "20",
											"description": "The size of the page to be returned",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "blockId,DESC",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "blockIndex,DESC",
											"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/blocks/:blockId/txs?page=0&size=20&sort=blockId,DESC&sort=blockIndex,DESC",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"blocks",
												":blockId",
												"txs"
											],
											"query": [
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "20"
												},
												{
													"key": "sort",
													"value": "blockId,DESC"
												},
												{
													"key": "sort",
													"value": "blockIndex,DESC"
												}
											],
											"variable": [
												{
													"key": "blockId",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) Block number or block hash"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"hash\": \"Excepteur sed labore\",\n      \"blockNo\": -46806813,\n      \"blockHash\": \"nisi in incididunt quis\",\n      \"epochNo\": -60608740,\n      \"epochSlotNo\": 68641533,\n      \"slot\": -54192140,\n      \"time\": \"1953-04-19T18:45:29.774Z\",\n      \"addressesInput\": [\n        \"consequat id\",\n        \"irure dolore\"\n      ],\n      \"addressesOutput\": [\n        \"dolor ea\",\n        \"magna laborum\"\n      ],\n      \"fee\": 14511110,\n      \"totalOutput\": 33083216,\n      \"balance\": 91663821,\n      \"tokens\": [\n        {\n          \"addressId\": -2475162,\n          \"address\": \"consequat\",\n          \"policy\": \"est qui in in\",\n          \"metadata\": {\n            \"url\": \"ea voluptate commodo nisi nostrud\",\n            \"ticker\": \"ex aliqua\",\n            \"decimals\": 35611207,\n            \"logo\": \"nostrud Excepteur qui\",\n            \"description\": \"cillum\"\n          },\n          \"name\": \"do fugiat reprehenderit ipsu\",\n          \"displayName\": \"occaecat ex\",\n          \"fingerprint\": \"minim d\",\n          \"quantity\": -28150056\n        },\n        {\n          \"addressId\": -70424671,\n          \"address\": \"laboris\",\n          \"policy\": \"dolor in incididunt\",\n          \"metadata\": {\n            \"url\": \"Excepteur reprehenderit\",\n            \"ticker\": \"sed Du\",\n            \"decimals\": 21239598,\n            \"logo\": \"ut enim\",\n            \"description\": \"amet officia nulla\"\n          },\n          \"name\": \"laborum reprehenderit deserunt\",\n          \"displayName\": \"eu nisi voluptate\",\n          \"fingerprint\": \"sed in\",\n          \"quantity\": 73188167\n        }\n      ]\n    },\n    {\n      \"hash\": \"occaecat non anim labore\",\n      \"blockNo\": -32853053,\n      \"blockHash\": \"pariatur sed dolore dolore\",\n      \"epochNo\": 92981403,\n      \"epochSlotNo\": 57548782,\n      \"slot\": 93943643,\n      \"time\": \"1977-06-16T06:16:08.168Z\",\n      \"addressesInput\": [\n        \"cillum enim\",\n        \"velit Duis minim aute\"\n      ],\n      \"addressesOutput\": [\n        \"officia fugiat Lorem\",\n        \"sint\"\n      ],\n      \"fee\": 87483890,\n      \"totalOutput\": 66035495,\n      \"balance\": -36872582,\n      \"tokens\": [\n        {\n          \"addressId\": 40282102,\n          \"address\": \"dolore ea Lorem eu consectetur\",\n          \"policy\": \"sed cillum\",\n          \"metadata\": {\n            \"url\": \"est exercitation irure\",\n            \"ticker\": \"ex voluptate\",\n            \"decimals\": 66574392,\n            \"logo\": \"exercitation eiusmod velit\",\n            \"description\": \"incididunt irure ut nostrud\"\n          },\n          \"name\": \"amet laboris sunt aute sint\",\n          \"displayName\": \"do\",\n          \"fingerprint\": \"mollit officia commodo enim in\",\n          \"quantity\": 96432812\n        },\n        {\n          \"addressId\": 61875921,\n          \"address\": \"dolore sit\",\n          \"policy\": \"sit dolor minim in\",\n          \"metadata\": {\n            \"url\": \"voluptate veniam laborum exercita\",\n            \"ticker\": \"dolore dolor\",\n            \"decimals\": -85521489,\n            \"logo\": \"sunt mollit nisi\",\n            \"description\": \"proident\"\n          },\n          \"name\": \"nisi aliquip anim\",\n          \"displayName\": \"cillum aute\",\n          \"fingerprint\": \"ut dolore\",\n          \"quantity\": -50581416\n        }\n      ]\n    }\n  ],\n  \"totalItems\": -30498291,\n  \"totalPages\": 48123678,\n  \"currentPage\": -67438345\n}"
								}
							]
						},
						{
							"name": "Get a block detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// var stt = \"200\";\r",
											"// stt = pm.variables.get(\"stt\");\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"// pm.test(\"Status code is 400\", function () {\r",
											"//     pm.response.to.have.status(400);\r",
											"// });\r",
											"\r",
											"pm.test(\"Check hash value\", function () {\r",
											"    pm.expect(jsonData.hash).to.include(pm.environment.get(\"block_hash\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check time value\", function () {\r",
											"    pm.expect(jsonData.time).to.contain(pm.environment.get(\"block_time\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check txCount value\", function () {\r",
											"    pm.expect(jsonData.txCount).to.eql(pm.environment.get(\"block_txCount\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check epochNo value\", function () {\r",
											"    pm.expect(jsonData.epochNo).to.eql(pm.environment.get(\"block_epochNo\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check blockNo value\", function () {\r",
											"    pm.expect(jsonData.blockNo).to.eql(pm.environment.get(\"block_blockNo\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check slotNo value\", function () {\r",
											"    pm.expect(jsonData.slotNo).to.eql(pm.environment.get(\"block_slotNo\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check epochSlotNo value\", function () {\r",
											"    pm.expect(jsonData.epochSlotNo).to.eql(pm.environment.get(\"block_epochSlotNo\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check totalFees value\", function () {\r",
											"    pm.expect(jsonData.totalFees).to.eql(pm.environment.get(\"block_totalFees\"));\r",
											"});\r",
											"\r",
											"pm.test(\"Check totalOutput value\", function () {\r",
											"    pm.expect((jsonData.totalOutput/10**6).toFixed(2)).to.eql((pm.environment.get(\"block_totalOutput\")/10**6).toFixed(2));\r",
											"});\r",
											"\r",
											"pm.test(\"Check slotLeader value\", function () {\r",
											"    pm.expect(jsonData.slotLeader).to.include(pm.environment.get(\"block_slotLeader\"));\r",
											"});\r",
											"\r",
											"//Compare data type\r",
											"\r",
											"pm.test(\"Check data type of the response\", () => {\r",
											"    let moment = require ('moment');\r",
											"    pm.expect(jsonData.hash).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.time).to.include(moment(jsonData.time).format('YYYY/MM/DD HH:mm:ss'));\r",
											"    pm.expect(jsonData.txCount).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.epochNo).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.blockNo).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.slotNo).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.epochSlotNo).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.totalFees).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.totalOutput).to.be.a(\"number\");\r",
											"    pm.expect(jsonData.slotLeader).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.confirmation).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
											"    var number = Object.keys(jsonData).length;\r",
											"    pm.expect(number).to.eql(11)\r",
											"});\r",
											"\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"    var arrayOfResponseKeys  = Object.keys(jsonData)\r",
											"    var myKeysList = [\"hash\", \"time\", \"txCount\", \"epochNo\", \"blockNo\", \"slotNo\", \"epochSlotNo\", \"totalFees\", \"totalOutput\", \"slotLeader\", \"confirmation\"];\r",
											"    for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"        for (let j = 0; j < myKeysList.length; j++) {\r",
											"            pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/blocks/{{block_blockNo}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"blocks",
										"{{block_blockNo}}"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/blocks/:blockId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"blocks",
												":blockId"
											],
											"variable": [
												{
													"key": "blockId",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) Block number or block hash"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "{\n  \"hash\": \"voluptate sint est\",\n  \"time\": \"1998-06-08T15:06:17.950Z\",\n  \"txCount\": 61402728,\n  \"epochNo\": 13222585,\n  \"blockNo\": -13105216,\n  \"slotNo\": -25897769,\n  \"epochSlotNo\": -30921006,\n  \"totalFees\": 76203832,\n  \"totalOutput\": -28368648,\n  \"slotLeader\": \"reprehenderit ve\",\n  \"confirmation\": 23351045\n}"
								}
							]
						}
					]
				},
				{
					"name": "addresses",
					"item": [
						{
							"name": "{address}",
							"item": [
								{
									"name": "Get top addresses",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 5000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});\r",
													"\r",
													"pm.test(\"Check currentPage value\", function () {\r",
													"    pm.expect(jsonData.currentPage).to.eql(0);\r",
													"});\r",
													"\r",
													"//Compare data type\r",
													"pm.test(\"Check data type of address\", () => {\r",
													"  pm.expect(jsonData.data[0].address).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of txCount\", () => {\r",
													"  pm.expect(jsonData.data[0].txCount).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of balance\", () => {\r",
													"  pm.expect(jsonData.data[0].balance).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of balance\", () => {\r",
													"  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of balance\", () => {\r",
													"  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
													"});\r",
													"//Count total contribution\r",
													"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
													"  var number = Object.keys(jsonData).length;\r",
													"  pm.expect(number).to.eql(4)\r",
													"});\r",
													"\r",
													"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
													"  var number = Object.keys(jsonData.data[0]).length;\r",
													"  pm.expect(number).to.eql(3)\r",
													"});\r",
													"//Check name\r",
													"pm.test(\"Check name of contributions in field data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
													"  var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Check name of contributions in data data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
													"  var myKeysList = [\"address\", \"txCount\", \"balance\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"//Check scenario\r",
													"pm.test(\"Others value exist\",function (){\r",
													"    \r",
													"    //Randome value 0-10\r",
													"    var sampleArr = [0,1,2,3,4,5,6,7,8,9]\r",
													"    var randomIndex = Math.floor(Math.random() * sampleArr.length);\r",
													"    console.log(randomIndex);\r",
													"    // pm.environment.set(\"address_data_address\", jsonData.data[randomIndex].address)\r",
													"    // pm.environment.set(\"address_data_txCount\", jsonData.data[randomIndex].txCount)\r",
													"    // pm.environment.set(\"address_data_txCount\", jsonData.data[randomIndex].txCount)\r",
													"    \r",
													"    pm.environment.set(\"address_address\", jsonData.data[randomIndex].address);\r",
													"    pm.environment.set(\"address_txCount\", jsonData.data[randomIndex].txCount);\r",
													"    pm.environment.set(\"address_balance\", jsonData.data[randomIndex].balance);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/addresses/top-addresses",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"addresses",
												"top-addresses"
											],
											"query": [
												{
													"key": "page",
													"value": "0",
													"description": "Zero-based page index (0..N)",
													"disabled": true
												},
												{
													"key": "size",
													"value": "5",
													"description": "The size of the page to be returned",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "dolore non est",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "elit",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/addresses/top-addresses?page=0&size=20&sort=ex&sort=nisi de",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"addresses",
														"top-addresses"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "20"
														},
														{
															"key": "sort",
															"value": "ex"
														},
														{
															"key": "sort",
															"value": "nisi de"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"address\": \"sit aliquip ex\",\n      \"txCount\": 24208350,\n      \"balance\": -41043114\n    },\n    {\n      \"address\": \"pariatur\",\n      \"txCount\": -68428665,\n      \"balance\": -21601964\n    }\n  ],\n  \"totalItems\": -85662247,\n  \"totalPages\": 61390795,\n  \"currentPage\": -23235984\n}"
										}
									]
								},
								{
									"name": "Get a address detail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// var stt = \"200\";\r",
													"// stt = pm.variables.get(\"stt\");\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// pm.test(\"Status code is 400\", function () {\r",
													"//     pm.response.to.have.status(400);\r",
													"// });\r",
													"\r",
													"pm.test(\"Response time is less than 5000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});\r",
													"\r",
													"pm.test(\"Check address value\", function () {\r",
													"    pm.expect(jsonData.address).to.include(pm.environment.get(\"address_address\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Check txCount value\", function () {\r",
													"    pm.expect(jsonData.txCount).to.equal(pm.environment.get(\"address_txCount\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Check balance value\", function () {\r",
													"    pm.expect(jsonData.balance).to.eql(pm.environment.get(\"address_balance\"));\r",
													"});\r",
													"\r",
													"//Compare data type\r",
													"\r",
													"pm.test(\"Check data type of txCount\", () => {\r",
													"  pm.expect(jsonData.txCount).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of balance\", () => {\r",
													"  pm.expect(jsonData.balance).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of stakeAddress\", () => {\r",
													"  pm.expect(typeof jsonData.stakeAddress).to.be.oneOf([ 'object', 'string']);\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of isContract\", () => {\r",
													"  pm.expect(jsonData.isContract).to.be.a(\"boolean\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of verifiedContract\", () => {\r",
													"  pm.expect(jsonData.verifiedContract).to.be.a(\"boolean\");\r",
													"});\r",
													"\r",
													"//Count total contribution\r",
													"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
													"  var number = Object.keys(jsonData).length;\r",
													"  pm.expect(number).to.eql(6)\r",
													"});\r",
													"\r",
													"\r",
													"//Check name\r",
													"pm.test(\"Check name of contributions in field data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
													"  var myKeysList = [\"address\", \"txCount\", \"balance\", \"stakeAddress\", \"isContract\", \"verifiedContract\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"address\", \"Ae2tdPwUPEYwFx4dmJheyNPPYXtvHbJLeCaA96o6Y2iiUL18cAt7AizN2zG\");\r",
													"pm.environment.set(\"address\", \"123\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/addresses/{{address_address}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"addresses",
												"{{address_address}}"
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/addresses/:address",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"addresses",
														":address"
													],
													"variable": [
														{
															"key": "address",
															"value": "enim voluptate Excepteur ullamco",
															"description": "(Required) Address"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"address\": \"non\",\n  \"txCount\": -35068675,\n  \"balance\": -56411490,\n  \"stakeAddress\": \"culpa Duis\",\n  \"isContract\": true,\n  \"verifiedContract\": true\n}"
										}
									]
								},
								{
									"name": "Get the highest and lowest balance address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json()\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 5000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});\r",
													"\r",
													"pm.test(\"Check currentPage value\", function () {\r",
													"    pm.expect(jsonData.currentPage).to.eql(5);\r",
													"});\r",
													"\r",
													"//Compare data type\r",
													"pm.test(\"Check data type of hash\", () => {\r",
													"  pm.expect(jsonData.data[0].hash).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of blockNo\", () => {\r",
													"  pm.expect(jsonData.data[0].blockNo).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of blockHash\", () => {\r",
													"  pm.expect(jsonData.data[0].blockHash).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of epochNo\", () => {\r",
													"  pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of epochSlotNo\", () => {\r",
													"  pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of slot\", () => {\r",
													"  pm.expect(jsonData.data[0].slot).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of time\", () => {\r",
													"        let moment = require ('moment');\r",
													"  pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of addressesInput\", () => {\r",
													"  pm.expect(jsonData.data[0].addressesInput[0]).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of addressesOutput\", () => {\r",
													"  pm.expect(jsonData.data[0].addressesOutput[0]).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of fee\", () => {\r",
													"  pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of totalOutput\", () => {\r",
													"  pm.expect(jsonData.data[0].totalOutput).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of balance\", () => {\r",
													"  pm.expect(jsonData.data[0].balance).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of addressId\", () => {\r",
													"  pm.expect(jsonData.data[0].tokens[0].addressId).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of address\", () => {\r",
													"  pm.expect(jsonData.data[0].tokens[0].address).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of policy\", () => {\r",
													"  pm.expect(jsonData.data[0].tokens[0].policy).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of name\", () => {\r",
													"  pm.expect(jsonData.data[0].tokens[0].name).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of displayName\", () => {\r",
													"  pm.expect(jsonData.data[0].tokens[0].displayName).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of fingerprint\", () => {\r",
													"  pm.expect(jsonData.data[0].tokens[0].fingerprint).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of quantity\", () => {\r",
													"  pm.expect(jsonData.data[0].tokens[0].quantity).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of totalItems\", () => {\r",
													"  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of totalPages\", () => {\r",
													"  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"//Count total contribution\r",
													"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
													"  var number = Object.keys(jsonData).length;\r",
													"  pm.expect(number).to.eql(4)\r",
													"});\r",
													"\r",
													"pm.test(\"Check number of contributions in field data level 2\", function () {\r",
													"  var number = Object.keys(jsonData.data[0]).length;\r",
													"  pm.expect(number).to.eql(13)\r",
													"});\r",
													"\r",
													"//Check name\r",
													"pm.test(\"Check name of contributions in field data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
													"  var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Check name of contributions in data data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
													"  var myKeysList = [\"hash\", \"blockNo\", \"blockHash\", \"epochNo\", \"epochSlotNo\", \"slot\", \"time\",\"addressesInput\", \"addressesOutput\", \"fee\", \"totalOutput\", \"balance\", \"tokens\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/addresses/:address/txs?page=5&size=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"addresses",
												":address",
												"txs"
											],
											"query": [
												{
													"key": "page",
													"value": "5",
													"description": "Zero-based page index (0..N)"
												},
												{
													"key": "size",
													"value": "20",
													"description": "The size of the page to be returned"
												},
												{
													"key": "sort",
													"value": "dolore non est",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "elit",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "address",
													"value": "Ae2tdPwUPEYwFx4dmJheyNPPYXtvHbJLeCaA96o6Y2iiUL18cAt7AizN2zG",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/addresses/:address/txs?page=0&size=20&sort=ex&sort=nisi de",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"addresses",
														":address",
														"txs"
													],
													"query": [
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "20"
														},
														{
															"key": "sort",
															"value": "ex"
														},
														{
															"key": "sort",
															"value": "nisi de"
														}
													],
													"variable": [
														{
															"key": "address",
															"value": "enim voluptate Excepteur ullamco",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"hash\": \"Excepteur sed labore\",\n      \"blockNo\": -46806813,\n      \"blockHash\": \"nisi in incididunt quis\",\n      \"epochNo\": -60608740,\n      \"epochSlotNo\": 68641533,\n      \"slot\": -54192140,\n      \"time\": \"1953-04-19T18:45:29.774Z\",\n      \"addressesInput\": [\n        \"consequat id\",\n        \"irure dolore\"\n      ],\n      \"addressesOutput\": [\n        \"dolor ea\",\n        \"magna laborum\"\n      ],\n      \"fee\": 14511110,\n      \"totalOutput\": 33083216,\n      \"balance\": 91663821,\n      \"tokens\": [\n        {\n          \"addressId\": -2475162,\n          \"address\": \"consequat\",\n          \"policy\": \"est qui in in\",\n          \"metadata\": {\n            \"url\": \"ea voluptate commodo nisi nostrud\",\n            \"ticker\": \"ex aliqua\",\n            \"decimals\": 35611207,\n            \"logo\": \"nostrud Excepteur qui\",\n            \"description\": \"cillum\"\n          },\n          \"name\": \"do fugiat reprehenderit ipsu\",\n          \"displayName\": \"occaecat ex\",\n          \"fingerprint\": \"minim d\",\n          \"quantity\": -28150056\n        },\n        {\n          \"addressId\": -70424671,\n          \"address\": \"laboris\",\n          \"policy\": \"dolor in incididunt\",\n          \"metadata\": {\n            \"url\": \"Excepteur reprehenderit\",\n            \"ticker\": \"sed Du\",\n            \"decimals\": 21239598,\n            \"logo\": \"ut enim\",\n            \"description\": \"amet officia nulla\"\n          },\n          \"name\": \"laborum reprehenderit deserunt\",\n          \"displayName\": \"eu nisi voluptate\",\n          \"fingerprint\": \"sed in\",\n          \"quantity\": 73188167\n        }\n      ]\n    },\n    {\n      \"hash\": \"occaecat non anim labore\",\n      \"blockNo\": -32853053,\n      \"blockHash\": \"pariatur sed dolore dolore\",\n      \"epochNo\": 92981403,\n      \"epochSlotNo\": 57548782,\n      \"slot\": 93943643,\n      \"time\": \"1977-06-16T06:16:08.168Z\",\n      \"addressesInput\": [\n        \"cillum enim\",\n        \"velit Duis minim aute\"\n      ],\n      \"addressesOutput\": [\n        \"officia fugiat Lorem\",\n        \"sint\"\n      ],\n      \"fee\": 87483890,\n      \"totalOutput\": 66035495,\n      \"balance\": -36872582,\n      \"tokens\": [\n        {\n          \"addressId\": 40282102,\n          \"address\": \"dolore ea Lorem eu consectetur\",\n          \"policy\": \"sed cillum\",\n          \"metadata\": {\n            \"url\": \"est exercitation irure\",\n            \"ticker\": \"ex voluptate\",\n            \"decimals\": 66574392,\n            \"logo\": \"exercitation eiusmod velit\",\n            \"description\": \"incididunt irure ut nostrud\"\n          },\n          \"name\": \"amet laboris sunt aute sint\",\n          \"displayName\": \"do\",\n          \"fingerprint\": \"mollit officia commodo enim in\",\n          \"quantity\": 96432812\n        },\n        {\n          \"addressId\": 61875921,\n          \"address\": \"dolore sit\",\n          \"policy\": \"sit dolor minim in\",\n          \"metadata\": {\n            \"url\": \"voluptate veniam laborum exercita\",\n            \"ticker\": \"dolore dolor\",\n            \"decimals\": -85521489,\n            \"logo\": \"sunt mollit nisi\",\n            \"description\": \"proident\"\n          },\n          \"name\": \"nisi aliquip anim\",\n          \"displayName\": \"cillum aute\",\n          \"fingerprint\": \"ut dolore\",\n          \"quantity\": -50581416\n        }\n      ]\n    }\n  ],\n  \"totalItems\": -30498291,\n  \"totalPages\": 48123678,\n  \"currentPage\": -67438345\n}"
										}
									]
								},
								{
									"name": "Get list token by address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"    var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 5000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});\r",
													"\r",
													"pm.test(\"Check currentPage value\", function () {\r",
													"    pm.expect(jsonData.currentPage).to.eql(5);\r",
													"});\r",
													"\r",
													"//Compare data type\r",
													"pm.test(\"Check data type of policy\", () => {\r",
													"  pm.expect(jsonData.data[0].policy).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of name\", () => {\r",
													"  pm.expect(jsonData.data[0].name).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of displayName\", () => {\r",
													"  pm.expect(jsonData.data[0].displayName).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of fingerprint\", () => {\r",
													"  pm.expect(jsonData.data[0].fingerprint).to.be.a(\"string\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check data type of quantity\", () => {\r",
													"  pm.expect(jsonData.data[0].quantity).to.be.a(\"number\");\r",
													"});\r",
													"\r",
													"//Count total contribution\r",
													"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
													"  var number = Object.keys(jsonData).length;\r",
													"  pm.expect(number).to.eql(4)\r",
													"});\r",
													"\r",
													"pm.test(\"Check number of contributions in field data level 2\", function () {\r",
													"  var number = Object.keys(jsonData.data[0]).length;\r",
													"  pm.expect(number).to.eql(5)\r",
													"});\r",
													"\r",
													"//Check name\r",
													"pm.test(\"Check name of contributions in field data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData)\r",
													"  var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Check name of contributions in data data\", function () {\r",
													"  var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
													"  var myKeysList = [\"policy\", \"name\", \"displayName\", \"fingerprint\", \"quantity\"];\r",
													"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
													"    for (let j = 0; j < myKeysList.length; j++) {\r",
													"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
													"        }\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/addresses/:address/tokens?page=5&size=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"addresses",
												":address",
												"tokens"
											],
											"query": [
												{
													"key": "displayName",
													"value": "enim voluptate Excepteur ullamco",
													"disabled": true
												},
												{
													"key": "page",
													"value": "5",
													"description": "Zero-based page index (0..N)"
												},
												{
													"key": "size",
													"value": "20",
													"description": "The size of the page to be returned"
												},
												{
													"key": "sort",
													"value": "dolore non est",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												},
												{
													"key": "sort",
													"value": "elit",
													"description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "address",
													"value": "Ae2tdPwUPEYwFx4dmJheyNPPYXtvHbJLeCaA96o6Y2iiUL18cAt7AizN2zG",
													"description": "(Required) "
												}
											]
										}
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													},
													{
														"key": "Accept",
														"value": "*/*"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/api/v1/addresses/:address/tokens?displayName=enim voluptate Excepteur ullamco&page=0&size=20&sort=ex&sort=nisi de",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"addresses",
														":address",
														"tokens"
													],
													"query": [
														{
															"key": "displayName",
															"value": "enim voluptate Excepteur ullamco"
														},
														{
															"key": "page",
															"value": "0"
														},
														{
															"key": "size",
															"value": "20"
														},
														{
															"key": "sort",
															"value": "ex"
														},
														{
															"key": "sort",
															"value": "nisi de"
														}
													],
													"variable": [
														{
															"key": "address",
															"value": "enim voluptate Excepteur ullamco",
															"description": "(Required) "
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"addressId\": -97014357,\n      \"address\": \"dolore non sint fugiat dolor\",\n      \"policy\": \"dolore occaecat ut\",\n      \"metadata\": {\n        \"url\": \"sed ea consectetur\",\n        \"ticker\": \"laboris Lorem esse nostrud\",\n        \"decimals\": -81176225,\n        \"logo\": \"esse minim cupidatat\",\n        \"description\": \"ipsum Excepteur ad mag\"\n      },\n      \"name\": \"dolor consectetur\",\n      \"displayName\": \"irure in\",\n      \"fingerprint\": \"sint cillum\",\n      \"quantity\": -65976550\n    },\n    {\n      \"addressId\": 57474225,\n      \"address\": \"non eu ut\",\n      \"policy\": \"sunt dolor\",\n      \"metadata\": {\n        \"url\": \"occaecat Excepteur\",\n        \"ticker\": \"in non nisi commodo\",\n        \"decimals\": -42639989,\n        \"logo\": \"eu est minim\",\n        \"description\": \"nulla commodo in minim\"\n      },\n      \"name\": \"adipisicing Ut\",\n      \"displayName\": \"adipisic\",\n      \"fingerprint\": \"in\",\n      \"quantity\": 52137399\n    }\n  ],\n  \"totalItems\": -17693588,\n  \"totalPages\": -40021544,\n  \"currentPage\": -88844091\n}"
										}
									]
								}
							]
						},
						{
							"name": "Get the highest and lowest balance address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"//Compare data type\r",
											"\r",
											"pm.test(\"Check data type of txCount\", () => {\r",
											"  pm.expect(jsonData[0]).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check data type of balance\", () => {\r",
											"  pm.expect(jsonData[1]).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in field data level 1\", function () {\r",
											"  var number = Object.keys(jsonData).length;\r",
											"  pm.expect(number).to.eql(2)\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/addresses/min-max-balance/:address",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"addresses",
										"min-max-balance",
										":address"
									],
									"variable": [
										{
											"key": "address",
											"value": "Ae2tdPwUPEYwFx4dmJheyNPPYXtvHbJLeCaA96o6Y2iiUL18cAt7AizN2zG",
											"description": "(Required) "
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/addresses/min-max-balance/:address",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"addresses",
												"min-max-balance",
												":address"
											],
											"variable": [
												{
													"key": "address",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "[\n  -27729487,\n  -41033476\n]"
								}
							]
						},
						{
							"name": "Get a address analytics",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();\r",
											"var stt = 200\r",
											"var res_time = 5000\r",
											"\r",
											"//Compare static data\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(stt);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
											"});\r",
											"\r",
											"//Compare data type\r",
											"pm.test(\"Check data type of the response\", () => {\r",
											"    let moment = require ('moment');\r",
											"\r",
											"    pm.expect(jsonData[0].value).to.be.a(\"number\");\r",
											"    pm.expect(jsonData[0].date).to.include(moment(jsonData[0].date).format('YYYY/MM/DD'));\r",
											"});\r",
											"\r",
											"//Count total contribution\r",
											"pm.test(\"Check number of contributions in field data\", function () {\r",
											"    pm.expect(jsonData.length).to.eql(5)\r",
											"});\r",
											"\r",
											"//Check name\r",
											"pm.test(\"Check name of contributions in field data\", function () {\r",
											"  var myKeysList = [\"date\", \"value\"];\r",
											"  var arrayOfResponseKeys = Object.keys(jsonData[0])\r",
											"\r",
											"  for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
											"    for (let j = 0; j < myKeysList.length; j++) {\r",
											"        pm.expect(arrayOfResponseKeys[j]).to.eql(myKeysList[j]);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/addresses/analytics/:address/:type",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"addresses",
										"analytics",
										":address",
										":type"
									],
									"variable": [
										{
											"key": "address",
											"value": "addr1vy6p2t2lspjhf2nr2g7hfygkxdeulw3vvr8yhrkyv9qvzncmulqgh",
											"description": "(Required) Address"
										},
										{
											"key": "type",
											"value": "ONE_WEEK",
											"description": "(Required) Value: ONE_DAY, ONE_WEEK, ONE_MONTH, THREE_MONTH"
										}
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											},
											{
												"key": "Accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/addresses/analytics/:address/:type",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"addresses",
												"analytics",
												":address",
												":type"
											],
											"variable": [
												{
													"key": "address",
													"value": "enim voluptate Excepteur ullamco",
													"description": "(Required) Address"
												},
												{
													"key": "type",
													"value": "THREE_MONTH",
													"description": "(Required) Type analytics: 1d, 1w, 1m, 3m"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"date\": \"1974-01-28\",\n    \"value\": 97554919\n  },\n  {\n    \"date\": \"1997-05-23\",\n    \"value\": 32469025\n  }\n]"
								}
							]
						}
					]
				},
				{
					"name": "Get ada cardano price, market cap, volume, and market related data",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "*/*"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/v1/markets?currency=enim voluptate Excepteur ullamco",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"markets"
							],
							"query": [
								{
									"key": "currency",
									"value": "enim voluptate Excepteur ullamco",
									"description": "(Required) "
								}
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									},
									{
										"key": "Accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/markets?currency=enim voluptate Excepteur ullamco",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"markets"
									],
									"query": [
										{
											"key": "currency",
											"value": "enim voluptate Excepteur ullamco"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "*/*"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{bearerToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://10.4.10.231:8033"
		},
		{
			"key": "tx_hash_00",
			"value": ""
		},
		{
			"key": "tx_hash_01",
			"value": ""
		},
		{
			"key": "tx_hash_02",
			"value": ""
		},
		{
			"key": "tx_hash_03",
			"value": ""
		},
		{
			"key": "tx_hash",
			"value": ""
		},
		{
			"key": "tx_blockNo",
			"value": ""
		},
		{
			"key": "tx_amount",
			"value": ""
		},
		{
			"key": "tx_epochNo",
			"value": ""
		},
		{
			"key": "tx_epochSlotNo",
			"value": ""
		},
		{
			"key": "tx_slot",
			"value": ""
		},
		{
			"key": "tx_time",
			"value": ""
		},
		{
			"key": "tx_status",
			"value": ""
		},
		{
			"key": "tx_blockHash",
			"value": ""
		},
		{
			"key": "tx_fee",
			"value": ""
		},
		{
			"key": "token_totalItems",
			"value": ""
		},
		{
			"key": "page",
			"value": ""
		},
		{
			"key": "pages",
			"value": ""
		},
		{
			"key": "size",
			"value": ""
		},
		{
			"key": "sizes",
			"value": ""
		}
	]
}