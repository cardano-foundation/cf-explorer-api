{
  "info": {
    "_postman_id": "6266f780-e892-4f54-bf46-b15c4e73fdfb",
    "name": "Cardano Explorer API",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
    "_exporter_id": "18938521"
  },
  "item": [
    {
      "name": "api",
      "item": [
        {
          "name": "Sign-in",
          "item": [
            {
              "name": "Sign-in",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.environment.set(\"Bearer Token\", pm.response.json().token);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "//Acount dev site\n// {\n//   \"type\": 0,\n//   \"email\": \"hanh.luu@sotatek.com\",\n//   \"password\": \"Test1234@\"\n// }\n\n// //mono site\n{\n  \"type\": 0,\n  \"email\": \"hanh.luu+2@sotatek.com\",\n  \"password\": \"Test1234@\"\n}\n"
                },
                "url": "{{baseUrl-Auth}}/api/v1/auth/sign-in"
              },
              "response": []
            }
          ]
        },
        {
          "name": "epochs",
          "item": [
            {
              "name": "Get current epoch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// var stt = \"200\";\r",
                      "// stt = pm.variables.get(\"stt\");\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check totalSlot value\", function () {\r",
                      "    pm.expect(jsonData.totalSlot).to.eql(432000);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of no\", () => {\r",
                      "  pm.expect(jsonData.no).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of slot\", () => {\r",
                      "  pm.expect(jsonData.slot).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalSlot\", () => {\r",
                      "  pm.expect(jsonData.totalSlot).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of account\", () => {\r",
                      "  pm.expect(jsonData.account).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of startTime\", () => {\r",
                      "        let moment = require ('moment');\r",
                      "  pm.expect(jsonData.startTime).to.include(moment(jsonData.startTime).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of endTime\", () => {\r",
                      "        let moment = require ('moment');\r",
                      "  pm.expect(jsonData.endTime).to.include(moment(jsonData.endTime).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of circulatingSupply\", () => {\r",
                      "  pm.expect(jsonData.circulatingSupply).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of blkCount\", () => {\r",
                      "  pm.expect(jsonData.blkCount).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "//Scenario Compare api: Get current epoch with api: Get all epoch\r",
                      "//Get value\r",
                      "pm.test(\"Get data of Get current epoch api \",function (){\r",
                      "    pm.environment.set(\"epoch_no\", jsonData.no);\r",
                      "    pm.environment.set(\"epoch_totalSlot\", jsonData.totalSlot);\r",
                      "    pm.environment.set(\"epoch_account\", jsonData.account);\r",
                      "    pm.environment.set(\"epoch_startTime\", jsonData.startTime);\r",
                      "    pm.environment.set(\"epoch_endTime\", jsonData.endTime);\r",
                      "    console.log(jsonData.no);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": "{{baseUrl}}/api/v1/epochs/current"
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": "{{baseUrl}}/api/v1/epochs/current"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"no\": -49760808,\n  \"slot\": 27209690,\n  \"totalSlot\": 13295715,\n  \"account\": 21035673\n}"
                }
              ]
            },
            {
              "name": "Get all epoch",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check maxSlot value\", function () {\r",
                      "    pm.expect(jsonData.data[0].maxSlot).to.eql(432000);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of no\", () => {\r",
                      "    pm.expect(jsonData.data[0].no).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of status\", () => {\r",
                      "    pm.expect(jsonData.data[0].status).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of blkCount\", () => {\r",
                      "    pm.expect(jsonData.data[0].blkCount).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of outSum\", () => {\r",
                      "    pm.expect(jsonData.data[0].outSum).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of txCount\", () => {\r",
                      "    pm.expect(jsonData.data[0].txCount).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of startTime\", () => {\r",
                      "    let moment = require('moment');\r",
                      "    pm.expect(jsonData.data[0].startTime).to.include(moment(jsonData.data[0].startTime).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of endTime\", () => {\r",
                      "    let moment = require('moment');\r",
                      "    pm.expect(jsonData.data[0].endTime).to.include(moment(jsonData.data[0].endTime).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of maxSlot\", () => {\r",
                      "    pm.expect(jsonData.data[0].maxSlot).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "if (!jsonData.data[0]?.rewardsDistributed) {\r",
                      "    pm.test(\"Check data type of rewardsDistributed\", () => true);\r",
                      "} else {\r",
                      "    console.log(jsonData.data[0].rewardsDistributed);\r",
                      "    pm.test(\"Check data type of rewardsDistributed\", () => {\r",
                      "        pm.expect(typeof jsonData.data[0].rewardsDistributed).to.be.oneOf(['object', 'number']);\r",
                      "    });\r",
                      "}\r",
                      "\r",
                      "pm.test(\"Check data type of account\", () => {\r",
                      "    pm.expect(jsonData.data[0].account).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "//Scenario Compare api: Get current epoch with api: Get all epoch\r",
                      "//all variable get from API api/v1/epochs/current(Get current epoch)\r",
                      "pm.test(\"Compare value between current epoch and Get all epoch\", function () {\r",
                      "    //Main compare\r",
                      "    pm.expect(jsonData.data[0].no).to.eql(pm.environment.get(\"epoch_no\"));\r",
                      "    pm.expect(jsonData.data[0].status).to.include(\"IN_PROGRESS\");\r",
                      "    pm.expect(jsonData.data[0].maxSlot).to.eql(pm.environment.get(\"epoch_totalSlot\"));\r",
                      "    pm.expect(jsonData.data[0].account).to.eql(pm.environment.get(\"epoch_account\"));\r",
                      "    pm.expect(jsonData.data[0].startTime).to.eql(pm.environment.get(\"epoch_startTime\"));\r",
                      "    pm.expect(jsonData.data[0].endTime).to.eql(pm.environment.get(\"epoch_endTime\"));\r",
                      "});\r",
                      "\r",
                      "// Scenario Compare api: Get all epoch with api: Get a epoch detail by its no\r",
                      "pm.test(\"Get data of Get all epoch api\", function () {\r",
                      "    pm.environment.set(\"epoch_status\", jsonData.data[0].status);\r",
                      "    pm.environment.set(\"epoch_blkCount\", jsonData.data[0].blkCount);\r",
                      "    pm.environment.set(\"epoch_outSum\", jsonData.data[0].outSum);\r",
                      "    pm.environment.set(\"epoch_txCount\", jsonData.data[0].txCount);\r",
                      "    pm.environment.set(\"epoch_rewardsDistributed\", jsonData.data[0].rewardsDistributed);\r",
                      "    pm.environment.set(\"epoch_account\", jsonData.data[0].account);\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0) {\r",
                      "    pm.test(\"Check Size default\", function () {\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/epochs",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "epochs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "10",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/epochs?page=0&size=10&sort=id,DESC",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "epochs"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "10"
                        },
                        {
                          "key": "sort",
                          "value": "id,DESC"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"no\": -14763808,\n      \"status\": \"SYNCING\",\n      \"blkCount\": -59660988,\n      \"outSum\": 53748687,\n      \"txCount\": 71930017,\n      \"startTime\": \"2010-12-14T02:53:21.805Z\",\n      \"endTime\": \"1944-03-17T02:52:10.564Z\",\n      \"maxSlot\": -11379555,\n      \"rewardsDistributed\": 7762142\n    },\n    {\n      \"no\": -21733243,\n      \"status\": \"REWARDING\",\n      \"blkCount\": -25410140,\n      \"outSum\": -6895808,\n      \"txCount\": 45662307,\n      \"startTime\": \"2006-06-21T03:32:03.525Z\",\n      \"endTime\": \"2016-07-20T20:31:05.790Z\",\n      \"maxSlot\": -77766185,\n      \"rewardsDistributed\": 60406465\n    }\n  ],\n  \"totalItems\": -39444843,\n  \"totalPages\": 57485604,\n  \"currentPage\": -94098841\n}"
                }
              ]
            },
            {
              "name": "Boundary - Get all epoch (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(100);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/epochs?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "epochs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get all epoch (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/epochs?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "epochs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get all epoch with (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/epochs?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "epochs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get all epoch with boundary (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/epochs?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "epochs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "1",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get block list of epoch by its no",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of blockNo\", () => {\r",
                      "  pm.expect(jsonData.data[0].blockNo).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of slotNo\", () => {\r",
                      "  pm.expect(jsonData.data[0].slotNo).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of epochNo\", () => {\r",
                      "  pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of epochSlotNo\", () => {\r",
                      "  pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of hash\", () => {\r",
                      "  pm.expect(jsonData.data[0].hash).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of time\", () => {\r",
                      "        let moment = require ('moment');\r",
                      "  pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of txCount\", () => {\r",
                      "  pm.expect(jsonData.data[0].txCount).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalFees\", () => {\r",
                      "  pm.expect(jsonData.data[0].totalFees).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalOutput\", () => {\r",
                      "  pm.expect(jsonData.data[0].totalOutput).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of slotLeader\", () => {\r",
                      "  pm.expect(jsonData.data[0].slotLeader).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "//Check scenario\r",
                      "pm.test(\"Compare totalItems at api get list of epoch by its no  with api get a epoch detail by its no\",function (){\r",
                      "    pm.expect(jsonData.totalItems).to.eql(pm.environment.get(\"epoch_blkCount\")); //From api: Get all epoch - v1/epochs\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/epochs/:no/blocks",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "epochs",
                    ":no",
                    "blocks"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "5",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "2",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "no",
                      "value": "{{epoch_no}}",
                      "description": "(From api: Get current epoch - v1/epochs/current)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/epochs/:no/blocks?page=0&size=10&sort=id,DESC",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "epochs",
                        ":no",
                        "blocks"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "10"
                        },
                        {
                          "key": "sort",
                          "value": "id,DESC"
                        }
                      ],
                      "variable": [
                        {
                          "key": "no",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) Epoch Number"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"blockNo\": -22704027,\n      \"slotNo\": -51391264,\n      \"epochNo\": -39090089,\n      \"epochSlotNo\": -69014650,\n      \"hash\": \"eu do sed\",\n      \"time\": \"1960-04-06T07:38:09.311Z\",\n      \"txCount\": 9531849,\n      \"totalFees\": -15376531,\n      \"totalOutput\": 10922088,\n      \"slotLeader\": \"sed\"\n    },\n    {\n      \"blockNo\": -9568011,\n      \"slotNo\": -69442798,\n      \"epochNo\": -40946229,\n      \"epochSlotNo\": -431988,\n      \"hash\": \"non aliquip ea\",\n      \"time\": \"1967-04-18T02:55:05.212Z\",\n      \"txCount\": -2102511,\n      \"totalFees\": -65864555,\n      \"totalOutput\": -22661063,\n      \"slotLeader\": \"Duis aute\"\n    }\n  ],\n  \"totalItems\": -14558241,\n  \"totalPages\": 63797617,\n  \"currentPage\": 9576109\n}"
                }
              ]
            },
            {
              "name": "Boundary - Get block list of epoch by its no (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(100);\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/epochs/:epoch_no/blocks?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "epochs",
                    ":epoch_no",
                    "blocks"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "5",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "epoch_no",
                      "value": "10",
                      "description": "(From api: Get current epoch - v1/epochs/current)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get block list of epoch by its no (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/epochs/:epoch_no/blocks?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "epochs",
                    ":epoch_no",
                    "blocks"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "5",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "epoch_no",
                      "value": "10",
                      "description": "(From api: Get current epoch - v1/epochs/current)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get block list of epoch by its no (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/epochs/:epoch_no/blocks?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "epochs",
                    ":epoch_no",
                    "blocks"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "5",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "epoch_no",
                      "value": "10",
                      "description": "(From api: Get current epoch - v1/epochs/current)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get block list of epoch by its no (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/epochs/:epoch_no/blocks?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "epochs",
                    ":epoch_no",
                    "blocks"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "5",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "epoch_no",
                      "value": "10",
                      "description": "(From api: Get current epoch - v1/epochs/current)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get a epoch detail by its no",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData.no).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.status).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.blkCount).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.outSum).to.be.an(\"number\");\r",
                      "    pm.expect(jsonData.txCount).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.startTime).to.include(moment(jsonData.startTime).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.endTime).to.include(moment(jsonData.endTime).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.maxSlot).to.be.a(\"number\");\r",
                      "    if (jsonData.rewardsDistribute) {\r",
                      "        const Key = Object.keys(jsonData.rewardsDistribute)\r",
                      "        console.log(\"jsonData.rewardsDistribute\", jsonData.rewardsDistribute)\r",
                      "        if (Key.length > 0) {\r",
                      "            pm.expect(jsonData.rewardsDistribute).to.be.a(\"null\");\r",
                      "        }\r",
                      "    }\r",
                      "    pm.expect(jsonData.account).to.be.a(\"number\");\r",
                      "  });\r",
                      "\r",
                      "// Scenario Compare api: Get all epoch with api: Get a epoch detail by its no\r",
                      "//all variable get from API api/v1/epochs(Get all epoch)\r",
                      "pm.test(\"Check no value\", function () {\r",
                      "    pm.expect(jsonData.no).to.eql(pm.environment.get(\"epoch_no\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check status value\", function () {\r",
                      "    pm.expect(jsonData.status).to.include(pm.environment.get(\"epoch_status\"));\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Check startTime value\", function () {\r",
                      "    pm.expect(jsonData.startTime).to.include(pm.environment.get(\"epoch_startTime\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check endTime value\", function () {\r",
                      "    pm.expect(jsonData.endTime).to.contain(pm.environment.get(\"epoch_endTime\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check maxSlot value\", function () {\r",
                      "    pm.expect(jsonData.maxSlot).to.eql(432000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check value of rewardsDistribute\", ()=>{\r",
                      "    if (jsonData.rewardsDistribute) {\r",
                      "        const Key = Object.keys(jsonData.rewardsDistribute)\r",
                      "        console.log(\"jsonData.rewardsDistribute\", jsonData.rewardsDistribute)\r",
                      "        if (Key.length > 0) {\r",
                      "            pm.expect(jsonData.rewardsDistributed).to.eql(pm.environment.get(\"epoch_rewardsDistributed\"));\r",
                      "            // pm.expect(jsonData.rewardsDistribute).to.be.a(\"null\");\r",
                      "        }\r",
                      "    }\r",
                      "})\r",
                      "\r",
                      "pm.test(\"Check account value\", function () {\r",
                      "    pm.expect(jsonData.account).to.at.least(pm.environment.get(\"epoch_account\"));\r",
                      "});\r",
                      "\r",
                      "\r",
                      "var blkCount = jsonData.blkCount\r",
                      "var epoch_blkCount = pm.environment.get(\"epoch_blkCount\")\r",
                      "var outSum = (jsonData.outSum/10**6).toFixed(2)\r",
                      "var epoch_outSum = (pm.environment.get(\"epoch_outSum\")/10**6).toFixed(2)\r",
                      "var txCount = jsonData.txCount\r",
                      "var epoch_txCount = pm.environment.get(\"epoch_txCount\")\r",
                      "\r",
                      "if (blkCount === epoch_blkCount) {\r",
                      "\r",
                      "    pm.test(\"Check outSum value (=)\", function () {\r",
                      "        pm.expect(outSum).to.eql(epoch_outSum);\r",
                      "    });\r",
                      "    \r",
                      "    pm.test(\"Check txCount value (=)\", function () {\r",
                      "        pm.expect(txCount).to.eql(epoch_txCount);\r",
                      "    });\r",
                      "\r",
                      "} else if (blkCount > (epoch_blkCount)) {\r",
                      "\r",
                      "    pm.test(\"Check outSum value (>)\", function () {\r",
                      "        pm.expect(parseInt(outSum)).to.greaterThan(parseInt(epoch_outSum));\r",
                      "    });\r",
                      "    \r",
                      "    pm.test(\"Check txCount value (>)\", function () {\r",
                      "        pm.expect(txCount).to.greaterThan(epoch_txCount);\r",
                      "    });\r",
                      "\r",
                      "} else {\r",
                      "\r",
                      "    pm.test(\"Check outSum value (<)\", function () {\r",
                      "        pm.expect(parseInt(outSum)).to.less(parseInt(epoch_outSum));\r",
                      "    });\r",
                      "    \r",
                      "    pm.test(\"Check txCount value (<)\", function () {\r",
                      "        pm.expect(txCount).to.less(epoch_txCount);\r",
                      "    });\r",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/epochs/:no",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "epochs",
                    ":no"
                  ],
                  "variable": [
                    {
                      "key": "no",
                      "value": "{{epoch_no}}",
                      "description": "(From api: Get current epoch - v1/epochs/current)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/epochs/:no",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "epochs",
                        ":no"
                      ],
                      "variable": [
                        {
                          "key": "no",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) Epoch Number"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"no\": 74154396,\n  \"status\": \"SYNCING\",\n  \"blkCount\": -55420243,\n  \"outSum\": -9787853,\n  \"txCount\": 16035949,\n  \"startTime\": \"1977-12-28T02:53:59.986Z\",\n  \"endTime\": \"1957-04-28T06:13:32.677Z\",\n  \"maxSlot\": -18548224,\n  \"rewardsDistributed\": -71488647\n}"
                }
              ]
            }
          ]
        },
        {
          "name": "txs",
          "item": [
            {
              "name": "Get current transactions",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check blockNo value\", function () {\r",
                      "    pm.expect(jsonData[0].blockNo).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check fromAddress value\", function () {\r",
                      "    pm.expect(jsonData[0].fromAddress).to.be.a(\"Array\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check hash value\", function () {\r",
                      "    pm.expect(jsonData[0].hash).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check epochNo value\", function () {\r",
                      "    pm.expect(jsonData[0].epochNo).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check epochSlotNo value\", function () {\r",
                      "    pm.expect(jsonData[0].epochSlotNo).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check slot value\", function () {\r",
                      "    pm.expect(jsonData[0].slot).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check time value\", function () {\r",
                      "  let moment = require ('moment');\r",
                      "    pm.expect(jsonData[0].time).to.include(moment(jsonData[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check status value\", function () {\r",
                      "    pm.expect(jsonData[0].status).to.include(\"SUCCESS\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of fromAddress\", () => {\r",
                      "  pm.expect(jsonData[0].fromAddress).to.be.a(\"array\");\r",
                      "});\r",
                      "pm.test\r",
                      "(\"Check data type of toAddress\", () => {\r",
                      "  pm.expect(jsonData[0].toAddress).to.be.a(\"array\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of amount\", () => {\r",
                      "  pm.expect(jsonData[0].amount).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "// Scenario Compare api: Get current transactions with api: Filter transaction\r",
                      "//Get value\r",
                      "pm.test(\"Hash value exist at current transactions \",function (){\r",
                      "    pm.expect(jsonData[0].hash).not.empty;\r",
                      "    pm.environment.set(\"tx_hash_00\", jsonData[0].hash);\r",
                      "\r",
                      "    pm.expect(jsonData[1].hash).not.empty;\r",
                      "    pm.environment.set(\"tx_hash_01\", jsonData[1].hash);\r",
                      "\r",
                      "    pm.expect(jsonData[2].hash).not.empty;\r",
                      "    pm.environment.set(\"tx_hash_02\", jsonData[2].hash);\r",
                      "\r",
                      "    pm.expect(jsonData[3].hash).not.empty;\r",
                      "    pm.environment.set(\"tx_hash_03\", jsonData[3].hash);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Get value of current transactions\",function (){\r",
                      "    \r",
                      "    //Randome value\r",
                      "    var randomIndex = Math.floor(Math.random() * 4);\r",
                      "    console.log(randomIndex);\r",
                      "\r",
                      "    pm.environment.set(\"tx_hash\", jsonData[randomIndex].hash);\r",
                      "    pm.environment.set(\"tx_blockNo\", jsonData[randomIndex].blockNo);\r",
                      "    pm.environment.set(\"tx_amount\", jsonData[randomIndex].amount);\r",
                      "    pm.environment.set(\"tx_epochNo\", jsonData[randomIndex].epochNo);\r",
                      "    pm.environment.set(\"tx_epochSlotNo\", jsonData[randomIndex].epochSlotNo);\r",
                      "    pm.environment.set(\"tx_slot\", jsonData[randomIndex].slot);\r",
                      "    pm.environment.set(\"tx_time\", jsonData[randomIndex].time);\r",
                      "    pm.environment.set(\"tx_status\", jsonData[randomIndex].status);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": "{{baseUrl}}/api/v1/txs/current"
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": "{{baseUrl}}/api/v1/txs/current"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "[\n  {\n    \"blockNo\": -87698566,\n    \"fromAddress\": [\n      \"commodo culpa occaecat\",\n      \"aute\"\n    ],\n    \"toAddress\": [\n      \"eu elit\",\n      \"Lorem\"\n    ],\n    \"amount\": 31359195.392898798,\n    \"hash\": \"nisi dolor nostrud quis\",\n    \"epochNo\": -5055989,\n    \"epochSlotNo\": 27754186,\n    \"slot\": 52475276,\n    \"time\": \"1998-11-23T12:46:48.587Z\",\n    \"status\": \"SUCCESS\"\n  },\n  {\n    \"blockNo\": 12320595,\n    \"fromAddress\": [\n      \"consequat o\",\n      \"amet esse\"\n    ],\n    \"toAddress\": [\n      \"ut nulla enim labore anim\",\n      \"irure mollit ipsum reprehenderit\"\n    ],\n    \"amount\": 25325724.092760682,\n    \"hash\": \"fugiat Excepteur mollit\",\n    \"epochNo\": 13882772,\n    \"epochSlotNo\": -19223625,\n    \"slot\": -84991653,\n    \"time\": \"1955-04-19T10:03:50.730Z\",\n    \"status\": \"FAIL\"\n  }\n]"
                }
              ]
            },
            {
              "name": "Filter transaction",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "let time = jsonData.data[0].time;\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "const checkToken = (data) => {\r",
                      "    pm.expect(data.policy).to.be.a(\"string\");\r",
                      "    if (data.name) {\r",
                      "        pm.expect(data.name).to.be.a(\"string\");\r",
                      "    }\r",
                      "    if (data.assetName) {\r",
                      "        pm.expect(data.assetName).to.be.a(\"string\");\r",
                      "    }\r",
                      "    if (data.displayName) {\r",
                      "        pm.expect(data.displayName).to.be.a(\"string\");\r",
                      "    }\r",
                      "    pm.expect(data.fingerprint).to.be.a(\"string\");\r",
                      "    pm.expect(data.quantity).to.be.a(\"number\");\r",
                      "    if (data.metadata) {\r",
                      "        pm.expect(data.metadata.url).to.be.a(\"string\");\r",
                      "        pm.expect(data.metadata.ticker).to.be.a(\"string\");\r",
                      "        pm.expect(data.metadata.decimals).to.be.a(\"number\");\r",
                      "        pm.expect(data.metadata.logo).to.be.a(\"string\");\r",
                      "        pm.expect(data.metadata.description).to.be.a(\"string\");\r",
                      "    } else {\r",
                      "        pm.expect(data.metadata).to.be.empty;\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].hash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].blockNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].blockHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].slot).to.be.a(\"number\");\r",
                      "    pm.expect(time).to.include(moment(time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].addressesInput).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].addressesInput[0]).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].addressesOutput).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].addressesOutput[0]).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].totalOutput).to.be.a(\"number\");\r",
                      "    if (jsonData.data[0].balance) {\r",
                      "        pm.expect(typeof jsonData.data[0].balance).to.be.oneOf(['object', 'number']);\r",
                      "    }\r",
                      "    pm.expect(jsonData.data[0].tokens).to.be.an(\"array\");\r",
                      "    if (jsonData.data[0].tokens.length > 0) {\r",
                      "\r",
                      "        // pm.expect(jsonData.data[0].tokens[0].addressId).to.be.a(\"number\");\r",
                      "        // pm.expect(jsonData.data[0].tokens[0].address).to.be.a(\"string\");\r",
                      "        // pm.expect(jsonData.data[0].tokens[0].addressType).to.contain.oneOf([\"STAKE_ADDRESS\", \"PAYMENT_ADDRESS\"])\r",
                      "        checkToken(jsonData.data[0].tokens[0])\r",
                      "    } else {\r",
                      "        pm.expect(jsonData.data[0].tokens).to.be.empty;\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Scenario Compare api: Filter transaction with api: Get current transactions (Latest Transactions of Dashboard) \r",
                      "pm.test(\"Check list of current transaction exist\", function () {\r",
                      "    var tx_hash_00 = pm.environment.get(\"tx_hash_00\");\r",
                      "    var tx_hash_01 = pm.environment.get(\"tx_hash_01\");\r",
                      "    var tx_hash_02 = pm.environment.get(\"tx_hash_02\");\r",
                      "    var tx_hash_03 = pm.environment.get(\"tx_hash_03\");\r",
                      "\r",
                      "    var currentTx = [tx_hash_00, tx_hash_01, tx_hash_02, tx_hash_03];\r",
                      "\r",
                      "    var listHashData = (jsonData.data || []).map((i) => i.hash)\r",
                      "\r",
                      "    for (let j = 0; j < currentTx.length; j++) {\r",
                      "        pm.expect(currentTx[j]).to.contain.oneOf(listHashData);\r",
                      "    }\r",
                      "\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Compare value between current transaction and filter transaction\", function () {\r",
                      "    var tx_hash = pm.environment.get(\"tx_hash\");\r",
                      "    let result = jsonData.data.find(a => a.hash === tx_hash);\r",
                      "\r",
                      "    //Main compare\r",
                      "    pm.expect(result.blockNo).to.eql(pm.environment.get(\"tx_blockNo\"));\r",
                      "    pm.expect((result.totalOutput / 10 ** 6).toFixed(2)).to.eql(((pm.environment.get(\"tx_amount\")) / 10 ** 6).toFixed(2));\r",
                      "    pm.expect(result.epochNo).to.eql(pm.environment.get(\"tx_epochNo\"));\r",
                      "    pm.expect(result.epochSlotNo).to.eql(pm.environment.get(\"tx_epochSlotNo\"));\r",
                      "    pm.expect(result.slot).to.eql(pm.environment.get(\"tx_slot\"));\r",
                      "    pm.expect(result.time).to.contain(pm.environment.get(\"tx_time\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Get others value exist at Filter transaction\", function () {\r",
                      "    var tx_hash = pm.environment.get(\"tx_hash\");\r",
                      "    let result = jsonData.data.find(a => a.hash === tx_hash);\r",
                      "\r",
                      "    pm.environment.set(\"tx_blockHash\", result.blockHash);\r",
                      "    pm.environment.set(\"tx_fee\", result.fee);\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0) {\r",
                      "    pm.test(\"Check Size default\", function () {\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/txs",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/txs?page=0&size=20&sort=blockId,DESC&sort=blockIndex,DESC",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "txs"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "20"
                        },
                        {
                          "key": "sort",
                          "value": "blockId,DESC"
                        },
                        {
                          "key": "sort",
                          "value": "blockIndex,DESC"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"hash\": \"laboris occaecat mollit Ut\",\n      \"blockNo\": -26142252,\n      \"blockHash\": \"nostrud ea Excepteur\",\n      \"epochNo\": 115253,\n      \"epochSlotNo\": 93765378,\n      \"slot\": -98534091,\n      \"time\": \"1955-03-16T09:40:13.355Z\",\n      \"addressesInput\": [\n        \"labore ipsum proident\",\n        \"ex aute sunt\"\n      ],\n      \"addressesOutput\": [\n        \"in sint Ut\",\n        \"quis deserunt dolor ad\"\n      ],\n      \"fee\": -58855236,\n      \"totalOutput\": -3655842,\n      \"balance\": 49990898,\n      \"tokens\": [\n        {\n          \"addressId\": -26324764,\n          \"address\": \"enim mollit in tempor dolor\",\n          \"policy\": \"sunt\",\n          \"metadata\": {\n            \"url\": \"minim\",\n            \"ticker\": \"aute occaecat Excepteur\",\n            \"decimals\": 75549055,\n            \"logo\": \"anim non eiusmod\",\n            \"description\": \"commodo ex dolore\"\n          },\n          \"name\": \"et\",\n          \"displayName\": \"sed Duis adipisi\",\n          \"fingerprint\": \"ut\",\n          \"quantity\": 80339018\n        },\n        {\n          \"addressId\": -75687155,\n          \"address\": \"mollit dolore anim\",\n          \"policy\": \"exercitation\",\n          \"metadata\": {\n            \"url\": \"irure Excepteur\",\n            \"ticker\": \"ipsum\",\n            \"decimals\": 70528507,\n            \"logo\": \"est commodo\",\n            \"description\": \"tempor Lorem\"\n          },\n          \"name\": \"id veniam labore minim proident\",\n          \"displayName\": \"amet\",\n          \"fingerprint\": \"do Ut mollit est\",\n          \"quantity\": -44502563\n        }\n      ]\n    },\n    {\n      \"hash\": \"\",\n      \"blockNo\": 30849682,\n      \"blockHash\": \"Ut est exercitation non sunt\",\n      \"epochNo\": 14568455,\n      \"epochSlotNo\": 64904254,\n      \"slot\": 25728269,\n      \"time\": \"1950-04-20T07:11:23.470Z\",\n      \"addressesInput\": [\n        \"minim ipsum nostrud dolor\",\n        \"consectetur ipsum laborum sit dolore\"\n      ],\n      \"addressesOutput\": [\n        \"minim nisi qui ipsum veniam\",\n        \"anim nisi\"\n      ],\n      \"fee\": 50350566,\n      \"totalOutput\": 81570785,\n      \"balance\": -65174464,\n      \"tokens\": [\n        {\n          \"addressId\": 60983403,\n          \"address\": \"commodo occaecat\",\n          \"policy\": \"sunt dolor\",\n          \"metadata\": {\n            \"url\": \"ad qui mollit officia\",\n            \"ticker\": \"minim fugiat occaecat nostrud\",\n            \"decimals\": -25184499,\n            \"logo\": \"voluptate ull\",\n            \"description\": \"esse elit dolore\"\n          },\n          \"name\": \"mollit dolor Ut ipsu\",\n          \"displayName\": \"dolore dolore esse consequat ut\",\n          \"fingerprint\": \"incididunt enim elit in\",\n          \"quantity\": -85286660\n        },\n        {\n          \"addressId\": -76069871,\n          \"address\": \"incididunt vel\",\n          \"policy\": \"culpa dolore pariatur amet sunt\",\n          \"metadata\": {\n            \"url\": \"laboris ad pariatu\",\n            \"ticker\": \"ut ad fugiat voluptate\",\n            \"decimals\": -86844723,\n            \"logo\": \"Duis incididunt laboris sint\",\n            \"description\": \"aute\"\n          },\n          \"name\": \"minim\",\n          \"displayName\": \"Duis cupidatat p\",\n          \"fingerprint\": \"velit nostrud in quis\",\n          \"quantity\": -71091370\n        }\n      ]\n    }\n  ],\n  \"totalItems\": 60413886,\n  \"totalPages\": -13414901,\n  \"currentPage\": 5055465\n}"
                }
              ]
            },
            {
              "name": "Boundary - Filter transaction (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(100);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/txs?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary Filter transaction (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/txs?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary Filter transaction (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/txs?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Filter transaction (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/txs?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get transaction detail by hash",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// var stt = \"200\";\r",
                      "// stt = pm.variables.get(\"stt\");\r",
                      "var jsonData = pm.response.json();\r",
                      "var metadataCIP20 = pm.response.json().metadata[0].metadataCIP20;\r",
                      "var metadataCIP83 = pm.response.json().metadata[0].metadataCIP83;\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check maxEpochSlot value\", function () {\r",
                      "    pm.expect(jsonData.tx.maxEpochSlot).to.eql(432000);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require('moment');\r",
                      "    pm.expect(jsonData.tx.hash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.tx.time).to.include(moment(jsonData.tx.time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.tx.blockNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.tx.blockHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.tx.epochSlot).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.tx.maxEpochSlot).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.tx.epochNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.tx.status).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.tx.confirmation).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.tx.fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.tx.totalOutput).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "const checkToken = (data) => {\r",
                      "    if (data.policy) {\r",
                      "        pm.expect(data.policy).to.be.a(\"string\");\r",
                      "    }\r",
                      "\r",
                      "    if (data.assetName) {\r",
                      "        pm.expect(data.assetName).to.be.a(\"string\");\r",
                      "    }\r",
                      "    // if (data.assetQuantity) {\r",
                      "    //     pm.expect(data.assetQuantity).to.be.a(\"number\");\r",
                      "    // }\r",
                      "    if (data.assetId) {\r",
                      "        pm.expect(data.assetId).to.be.a(\"string\");\r",
                      "    }\r",
                      "    // if (data.addressId) {\r",
                      "    //     pm.expect(data.addressId).to.be.a(\"number\");\r",
                      "    // }\r",
                      "    if (data.address) {\r",
                      "        pm.expect(data.address).to.be.a(\"string\");\r",
                      "    }\r",
                      "    if (data.addressType) {\r",
                      "        pm.expect(data.addressType).to.contain.oneOf([\"STAKE_ADDRESS\", \"PAYMENT_ADDRESS\"])\r",
                      "    }\r",
                      "    if (data.name) {\r",
                      "        pm.expect(data.name).to.be.a(\"string\");\r",
                      "    }\r",
                      "    if (data.displayName) {\r",
                      "        pm.expect(data.displayName).to.be.a(\"string\");\r",
                      "    }\r",
                      "    if (data.fingerprint) {\r",
                      "        pm.expect(data.fingerprint).to.be.a(\"string\");\r",
                      "    }\r",
                      "    // if (data.quantity) {\r",
                      "    //     pm.expect(data.quantity).to.be.a(\"number\");\r",
                      "    // }\r",
                      "    if (data.metadata) {\r",
                      "        if (data.metadata.url) {\r",
                      "            pm.expect(data.metadata.url).to.be.a(\"string\");\r",
                      "        }\r",
                      "        if (data.metadata.logo) {\r",
                      "            pm.expect(data.metadata.logo).to.be.a(\"string\");\r",
                      "        }\r",
                      "        if (data.metadata.ticker) {\r",
                      "            pm.expect(data.metadata.ticker).to.be.a(\"string\", \"data.metadata.ticker\");\r",
                      "        } \r",
                      "        if (data.metadata.decimals) {\r",
                      "            pm.expect(data.metadata.decimals).to.be.a(\"number\");\r",
                      "        }\r",
                      "        if(data.metadata.description){\r",
                      "            pm.expect(data.metadata.description).to.be.a(\"string\");\r",
                      "        }\r",
                      "    }\r",
                      "}\r",
                      "\r",
                      "const checkUTXO = (data) => {\r",
                      "    (data || []).map(d => {\r",
                      "        pm.expect(d.address).to.be.a(\"string\")\r",
                      "        if (d.txHash) {\r",
                      "            pm.expect(d.txHash).to.be.a(\"string\")\r",
                      "        }\r",
                      "        if (d.assetId) {\r",
                      "            pm.expect(d.assetId).to.be.a(\"string\")\r",
                      "        }\r",
                      "        // if(d.value){\r",
                      "        //     pm.expect(d.value).to.be.a(\"number\")\r",
                      "        // }\r",
                      "        pm.expect(d.index).to.be.a(\"string\")\r",
                      "\r",
                      "        if (d.tokens && d.tokens.length > 0) {\r",
                      "            d.tokens.map(t => checkToken(t))\r",
                      "        }\r",
                      "        if (d.stakeAddress && d.stakeAddress.length > 0) {\r",
                      "            pm.expect(d.stakeAddress).to.be.a(\"string\")\r",
                      "        }\r",
                      "    })\r",
                      "}\r",
                      "\r",
                      "// UTXO\r",
                      "pm.test(\"check UTXOs data\", () => {\r",
                      "    const UTXOsData = jsonData.utxOs\r",
                      "    if (UTXOsData.inputs && UTXOsData.inputs.length > 0) {\r",
                      "        checkUTXO(UTXOsData.inputs)\r",
                      "    }\r",
                      "    if (UTXOsData.outputs && UTXOsData.outputs.length > 0) {\r",
                      "        checkUTXO(UTXOsData.outputs)\r",
                      "    }\r",
                      "})\r",
                      "\r",
                      "// sumamry \r",
                      "pm.test(\"check type sumamry\", () => {\r",
                      "    const summaryData = jsonData.summary.stakeAddress[0]\r",
                      "    if (summaryData.address) {\r",
                      "        pm.expect(summaryData.address).to.be.a(\"string\");\r",
                      "    }\r",
                      "    if (summaryData.value) {\r",
                      "        pm.expect(summaryData.value).to.be.a(\"number\");\r",
                      "    }\r",
                      "    if (summaryData.tokens && summaryData.tokens.length > 0) {\r",
                      "        summaryData.tokens.map(t => checkToken(t))\r",
                      "    }\r",
                      "    if (summaryData.stakeAddress) {\r",
                      "        pm.expect(summaryData.stakeAddress).to.be.a(\"string\")\r",
                      "    }\r",
                      "})\r",
                      "\r",
                      "//Contracts\r",
                      "pm.test(\"check type of contracts\", () => {\r",
                      "    if (jsonData.contracts && jsonData.contracts.length > 0) {\r",
                      "        const contractData = jsonData.contracts[0]\r",
                      "        const referenceInputsData = contractData.referenceInputs[0]\r",
                      "        pm.expect(contractData.scriptHash).to.be.a(\"string\");\r",
                      "        pm.expect(contractData.purpose).to.contain.oneOf([\"SPEND\", \"MINT\", \"CERT\", \"REWARD\"])\r",
                      "        pm.expect(contractData.redeemerBytes).to.be.a(\"string\");\r",
                      "        pm.expect(contractData.redeemerMem).to.be.a(\"number\");\r",
                      "        pm.expect(contractData.redeemerSteps).to.be.a(\"number\");\r",
                      "        pm.expect(contractData.datumHashIn).to.be.a(\"string\");\r",
                      "        pm.expect(contractData.datumBytesIn).to.be.a(\"string\");\r",
                      "        pm.expect(contractData.scriptBytes).to.be.a(\"string\");\r",
                      "        pm.expect(contractData.scriptBytes).to.be.a(\"string\");\r",
                      "        if (contractData.datumBytesOut) {\r",
                      "            pm.expect(contractData.datumBytesOut).to.be.a(\"string\");\r",
                      "        }\r",
                      "        if (contractData.mintingTokens) {\r",
                      "            contractData.mintingTokens.map(c => checkToken(c))\r",
                      "        }\r",
                      "        if (contractData.burningTokens) {\r",
                      "            contractData.burningTokens.map(c => checkToken(c))\r",
                      "        }\r",
                      "        pm.expect(contractData.utxoIndex).to.be.a(\"number\");\r",
                      "        pm.expect(contractData.utxoHash).to.be.a(\"string\");\r",
                      "        if (contractData.redeemerCertType) {\r",
                      "            pm.expect(contractData.redeemerCertType).to.contain.oneOf([\"DELEGATION\", \"STAKE_DEREGISTRATION\"])\r",
                      "        }\r",
                      "        if (referenceInputsData && referenceInputsData.length > 0) {\r",
                      "            pm.expect(referenceInputsData.address).to.be.a(\"string\");\r",
                      "            pm.expect(referenceInputsData.index).to.be.a(\"number\");\r",
                      "            pm.expect(referenceInputsData.txHash).to.be.a(\"string\");\r",
                      "            if (referenceInputsData.tokens) {\r",
                      "                referenceInputsData.tokens.map(e => checkToken(e))\r",
                      "            }\r",
                      "            pm.expect(referenceInputsData.datumHash).to.be.a(\"string\");\r",
                      "            pm.expect(referenceInputsData.datum).to.be.a(\"string\");\r",
                      "            pm.expect(referenceInputsData.scriptHash).to.be.a(\"string\");\r",
                      "            pm.expect(referenceInputsData.scriptType).to.be.a(\"string\");\r",
                      "            pm.expect(referenceInputsData.script).to.be.a(\"string\");\r",
                      "        }\r",
                      "        if (contractData.executionInputs && contractData.executionInputs.length > 0) {\r",
                      "            pm.expect(contractData.executionInputs[0]).to.be.a(\"string\");\r",
                      "        }\r",
                      "        if (contractData.executionOutputs && contractData.executionOutputs.length > 0) {\r",
                      "            pm.expect(contractData.executionOutputs[0]).to.be.a(\"string\");\r",
                      "        }\r",
                      "    }\r",
                      "})\r",
                      "\r",
                      "// collaterals\r",
                      "pm.test(\"check collaterals data\", () => {\r",
                      "    if (jsonData.collaterals) {\r",
                      "        const CollateralsData = jsonData.collaterals\r",
                      "        if (CollateralsData.collateralInputResponses) {\r",
                      "            checkUTXO(CollateralsData.collateralInputResponses)\r",
                      "        }\r",
                      "        if (CollateralsData.collateralOutputResponses) {\r",
                      "            checkUTXO(CollateralsData.collateralOutputResponses)\r",
                      "        }\r",
                      "    }\r",
                      "})\r",
                      "\r",
                      "//withdrawals\r",
                      "pm.test(\"Check type of withdrawals\", () => {\r",
                      "    console.log(jsonData.withdrawals)\r",
                      "    if (jsonData.withdrawals && jsonData.withdrawals.length > 0) {\r",
                      "        const withdrawalsData = jsonData.withdrawals[0]\r",
                      "        pm.expect(withdrawalsData.stakeAddressFrom).to.be.a(\"string\");\r",
                      "        if (withdrawalsData.addressTo.length > 0) {\r",
                      "            pm.expect(withdrawalsData.addressTo[0]).to.be.a(\"string\")\r",
                      "        }\r",
                      "        pm.expect(withdrawalsData.amount).to.be.a(\"number\");\r",
                      "    }\r",
                      "})\r",
                      "\r",
                      "//delegations\r",
                      "pm.test(\"Check type of delegations\", () => {\r",
                      "    console.log(jsonData.delegations)\r",
                      "    if (jsonData.delegations && jsonData.delegations.length > 0) {\r",
                      "        const delegationsData = jsonData.delegations[0]\r",
                      "        pm.expect(delegationsData.address).to.be.a(\"string\");\r",
                      "        pm.expect(delegationsData.poolId).to.be.a(\"string\");\r",
                      "    }\r",
                      "})\r",
                      "\r",
                      "//mints\r",
                      "pm.test(\"Check type of mints\", () => {\r",
                      "    if (jsonData.mints && jsonData.mints.length > 0) {\r",
                      "        jsonData.mints.map(m =>\r",
                      "            checkToken(m)\r",
                      "        )\r",
                      "    }\r",
                      "})\r",
                      "\r",
                      "// stakeCertificates\r",
                      "pm.test(\"Check type of stakeCertificates\", () => {\r",
                      "    if (jsonData.stakeCertificates && jsonData.stakeCertificates.length > 0) {\r",
                      "        const stakeCertificatesData = jsonData.stakeCertificates[0]\r",
                      "        pm.expect(stakeCertificatesData.stakeAddress).to.be.a(\"string\");\r",
                      "        pm.expect(stakeCertificatesData.type).to.contain.oneOf([\"STAKE_REGISTRATION\", \"STAKE_DEREGISTRATION\", \"POOL_REGISTRATIO\", \"POOL_DEREGISTRATION\"]);\r",
                      "    }\r",
                      "})\r",
                      "\r",
                      "//poolCertificates\r",
                      "pm.test(\"Check type of poolCertificates\", () => {\r",
                      "    if (jsonData.poolCertificates && jsonData.poolCertificates.length > 0) {\r",
                      "        const poolCertificatesData = jsonData.poolCertificates[0]\r",
                      "        pm.expect(poolCertificatesData.poolId).to.be.a(\"string\");\r",
                      "        pm.expect(poolCertificatesData.epoch).to.be.a(\"number\")\r",
                      "        pm.expect(poolCertificatesData.vrfKey).to.be.a(\"string\")\r",
                      "        pm.expect(poolCertificatesData.rewardAccount).to.be.a(\"string\")\r",
                      "        pm.expect(poolCertificatesData.poolOwners[0]).to.be.a(\"string\")\r",
                      "        pm.expect(poolCertificatesData.metadataHash).to.be.a(\"string\")\r",
                      "        pm.expect(poolCertificatesData.metadataUrl).to.be.a(\"string\")\r",
                      "        pm.expect(poolCertificatesData.margin).to.be.a(\"number\")\r",
                      "        pm.expect(poolCertificatesData.cost).to.be.a(\"number\")\r",
                      "        pm.expect(poolCertificatesData.pledge).to.be.a(\"number\")\r",
                      "        pm.expect(poolCertificatesData.type).to.contain.oneOf([\"STAKE_REGISTRATION\", \"STAKE_DEREGISTRATION\", \"POOL_REGISTRATION\", \"POOL_DEREGISTRATION\"])\r",
                      "    }\r",
                      "})\r",
                      "\r",
                      "// instantaneousRewards\r",
                      "pm.test(\"Check type of instantaneousRewards\", () => {\r",
                      "    if (jsonData.instantaneousRewards && jsonData.instantaneousRewards.length > 0) {\r",
                      "        const instantaneousRewardsData = jsonData.instantaneousRewards[0]\r",
                      "        pm.expect(instantaneousRewardsData.stakeAddress).to.be.a(\"string\");\r",
                      "        pm.expect(instantaneousRewardsData.amount).to.be.a(\"string\")\r",
                      "    }\r",
                      "})\r",
                      "\r",
                      "// signersInformation\r",
                      "pm.test(\"Check type of signersInformation\", () => {\r",
                      "    if (jsonData.signersInformation && jsonData.signersInformation.length > 0) {\r",
                      "        const signersInformationData = jsonData.signersInformation[0]\r",
                      "        pm.expect(signersInformationData.publicKey).to.be.a(\"string\");\r",
                      "        pm.expect(signersInformationData.publicKey).to.be.a(\"string\")\r",
                      "    }\r",
                      "})\r",
                      "\r",
                      "//CIP20\r",
                      "pm.test(\"Check metadata CIP 20\", function () {\r",
                      "    pm.expect(metadataCIP20.valid).to.be.a(\"boolean\",\"metadataCIP20.valid\")\r",
                      "    if (metadataCIP20.valid.requireProperties && metadataCIP20.valid.requireProperties.length > 0) {\r",
                      "        metadataCIP20.valid.requireProperties.map(require => {\r",
                      "            pm.expect(require.index).to.be.a(\"string\", \"require.index\")\r",
                      "            pm.expect(require.valid).to.be.a(\"boolean\", \"require.valid\")\r",
                      "            pm.expect(require.value).to.be.a(\"string\", \"require.value\")\r",
                      "            pm.expect(require.property).to.be.a(\"string\", \"require.property\")\r",
                      "            pm.expect(require.format).to.be.a(\"string\", \"require.format\")\r",
                      "        })\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "//CIP83\r",
                      "pm.test(\"Check metadata CIP 83\", function () {\r",
                      "    pm.expect(metadataCIP83.valid).to.be.a(\"boolean\",\"metadataCIP83.valid\")\r",
                      "    if (metadataCIP83.valid.requireProperties && metadataCIP83.valid.requireProperties.length > 0) {\r",
                      "        metadataCIP83.valid.requireProperties.map(require => {\r",
                      "            pm.expect(require.index).to.be.a(\"string\", \"require.index\")\r",
                      "            pm.expect(require.valid).to.be.a(\"boolean\", \"require.valid\")\r",
                      "            pm.expect(require.value).to.be.a(\"string\", \"require.value\")\r",
                      "            pm.expect(require.property).to.be.a(\"string\", \"require.property\")\r",
                      "            pm.expect(require.format).to.be.a(\"string\", \"require.format\")\r",
                      "        })\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Scenario Compare api: Filter transaction with api: Get transaction detail by hash\r",
                      "pm.test(\"Check blockNo value\", function () {\r",
                      "    pm.expect(jsonData.tx.blockNo).to.eql(pm.environment.get(\"tx_blockNo\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check blockHash value\", function () {\r",
                      "    pm.expect(jsonData.tx.blockHash).to.include(pm.environment.get(\"tx_blockHash\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check epochNo value\", function () {\r",
                      "    pm.expect(jsonData.tx.epochNo).to.eql(pm.environment.get(\"tx_epochNo\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check epochSlot value\", function () {\r",
                      "    pm.expect(jsonData.tx.epochSlot).to.eql(pm.environment.get(\"tx_epochSlotNo\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check fee value\", function () {\r",
                      "    pm.expect(jsonData.tx.fee).to.eql(pm.environment.get(\"tx_fee\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check totalOutput value\", function () {\r",
                      "    pm.expect((jsonData.tx.totalOutput / 10 ** 6).toFixed(2)).to.eql((pm.environment.get(\"tx_amount\") / 10 ** 6).toFixed(2));\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/txs/:hash",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "txs",
                    ":hash"
                  ],
                  "variable": [
                    {
                      "key": "hash",
                      "value": "{{tx_hash}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/txs/:hash",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "txs",
                        ":hash"
                      ],
                      "variable": [
                        {
                          "key": "hash",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) Hash value of transaction"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"tx\": {\n    \"hash\": \"nostrud laborum laboris\",\n    \"time\": \"2018-02-24T03:08:11.583Z\",\n    \"blockNo\": 39000018,\n    \"blockHash\": \"deserunt ex irure ullamco\",\n    \"epochSlot\": 25921623,\n    \"maxEpochSlot\": 14816159,\n    \"epochNo\": -58822797,\n    \"status\": \"PENDING\",\n    \"confirmation\": 45560009,\n    \"fee\": -86651620,\n    \"totalOutput\": 91690877\n  },\n  \"summary\": {\n    \"stakeAddress\": [\n      {\n        \"address\": \"non nulla \",\n        \"index\": \"laboris laborum\",\n        \"txHash\": \"est sed\",\n        \"value\": -12356699,\n        \"assetId\": \"dolore sit laboris\",\n        \"tokens\": [\n          {\n            \"assetName\": \"non quis\",\n            \"assetQuantity\": 76901813,\n            \"assetId\": \"sint cillum nisi deserunt\",\n            \"policy\": \"in nisi ut\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"officia ex sit ea\",\n            \"assetQuantity\": 64780161,\n            \"assetId\": \"officia Ut culpa\",\n            \"policy\": \"ex\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"dolor sint\"\n      },\n      {\n        \"address\": \"dolor et ut laboris\",\n        \"index\": \"aute ad\",\n        \"txHash\": \"fugiat officia nostrud\",\n        \"value\": -52906994,\n        \"assetId\": \"tempor deserunt\",\n        \"tokens\": [\n          {\n            \"assetName\": \"sit elit\",\n            \"assetQuantity\": 26318873,\n            \"assetId\": \"Lorem proident dolor id Excepteur\",\n            \"policy\": \"veniam ut \",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"et minim Ut elit officia\",\n            \"assetQuantity\": -68478910,\n            \"assetId\": \"cillum\",\n            \"policy\": \"anim proident\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"velit nisi\"\n      }\n    ]\n  },\n  \"contracts\": [\n    {\n      \"contract\": \"do elit\"\n    },\n    {\n      \"contract\": \"minim irure quis commodo exercitation\"\n    }\n  ],\n  \"collaterals\": {\n    \"collateralInputResponses\": [\n      {\n        \"address\": \"incididunt officia Ut sunt\",\n        \"index\": \"cillum ut Excepteur magna\",\n        \"txHash\": \"deserunt\",\n        \"value\": 80710282,\n        \"assetId\": \"est nostrud\",\n        \"tokens\": [\n          {\n            \"assetName\": \"dolore dolor est sunt\",\n            \"assetQuantity\": -99598700,\n            \"assetId\": \"minim Lorem\",\n            \"policy\": \"exercitation ipsum\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"officia\",\n            \"assetQuantity\": 94856757,\n            \"assetId\": \"cupidatat sint\",\n            \"policy\": \"dolore occaecat et\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"dolor\"\n      },\n      {\n        \"address\": \"Ut est\",\n        \"index\": \"cupidatat velit consectetur eiusmod laboris\",\n        \"txHash\": \"dolor non commodo incididunt\",\n        \"value\": -37550852,\n        \"assetId\": \"et dolor esse aute sit\",\n        \"tokens\": [\n          {\n            \"assetName\": \"eu\",\n            \"assetQuantity\": -95341916,\n            \"assetId\": \"est non labore ad nisi\",\n            \"policy\": \"magna cillum esse\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"est elit sint ipsum\",\n            \"assetQuantity\": 14308195,\n            \"assetId\": \"labore dolor id\",\n            \"policy\": \"ex dolor officia anim commodo\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"magna laborum\"\n      }\n    ],\n    \"collateralOutputResponses\": [\n      {\n        \"address\": \"deserunt qui Duis\",\n        \"index\": \"labor\",\n        \"txHash\": \"cupidatat sunt ea\",\n        \"value\": -69141579,\n        \"assetId\": \"proident\",\n        \"tokens\": [\n          {\n            \"assetName\": \"labore adipisicing in dolor do\",\n            \"assetQuantity\": -65262883,\n            \"assetId\": \"ut tempor minim esse sunt\",\n            \"policy\": \"nisi\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"ullamco sunt\",\n            \"assetQuantity\": -67540790,\n            \"assetId\": \"do reprehenderit Excepteur\",\n            \"policy\": \"sint commodo\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"commodo culpa\"\n      },\n      {\n        \"address\": \"ipsum cupidatat incididunt\",\n        \"index\": \"cupidatat exercitation aliquip nisi\",\n        \"txHash\": \"Duis aute\",\n        \"value\": -20447685,\n        \"assetId\": \"labore Ut mollit ea\",\n        \"tokens\": [\n          {\n            \"assetName\": \"anim pariatur\",\n            \"assetQuantity\": 49199255,\n            \"assetId\": \"magna Excepteur laborum\",\n            \"policy\": \"eiusmod sit\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"eiusmod amet ut\",\n            \"assetQuantity\": 13419767,\n            \"assetId\": \"commodo\",\n            \"policy\": \"consequat id dolor aliqua nulla\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"dolo\"\n      }\n    ]\n  },\n  \"notes\": [\n    {\n      \"note\": \"veniam magna qui ipsum dolor\"\n    },\n    {\n      \"note\": \"nostrud sed incididunt id ea\"\n    }\n  ],\n  \"withdrawals\": [\n    {\n      \"stakeAddressFrom\": \"nisi ipsum\",\n      \"addressTo\": [\n        \"occaecat irure fugiat incididunt\",\n        \"et in nulla\"\n      ],\n      \"amount\": -24647262\n    },\n    {\n      \"stakeAddressFrom\": \"ex laborum dolor dolore\",\n      \"addressTo\": [\n        \"dolor deserunt\",\n        \"anim ipsum enim\"\n      ],\n      \"amount\": 76401435\n    }\n  ],\n  \"delegations\": [\n    {\n      \"address\": \"eiusmod occaecat\",\n      \"poolId\": \"ut ipsum cupidatat\"\n    },\n    {\n      \"address\": \"aute ex\",\n      \"poolId\": \"minim quis dolor ad\"\n    }\n  ],\n  \"mints\": [\n    {\n      \"assetName\": \"et dolore\",\n      \"assetQuantity\": 37808196,\n      \"assetId\": \"culpa commodo ipsum Excepteur\",\n      \"policy\": \"mollit est cillum magna non\",\n      \"metadata\": {\n        \"url\": \"velit Excepteur dolor\",\n        \"ticker\": \"consequat esse officia\",\n        \"decimals\": 69670843,\n        \"logo\": \"officia voluptate\",\n        \"description\": \"elit voluptate proident\"\n      }\n    },\n    {\n      \"assetName\": \"cillum\",\n      \"assetQuantity\": 84682726,\n      \"assetId\": \"aliquip occaecat exercitation\",\n      \"policy\": \"ex laboris i\",\n      \"metadata\": {\n        \"url\": \"in sit dolore velit\",\n        \"ticker\": \"elit i\",\n        \"decimals\": 60143156,\n        \"logo\": \"laborum\",\n        \"description\": \"reprehenderit aliquip irure dolor\"\n      }\n    }\n  ],\n  \"protocols\": {\n    \"minFeeA\": {},\n    \"minFeeB\": {},\n    \"maxBlockSize\": {},\n    \"maxTxSize\": {},\n    \"maxBhSize\": {},\n    \"keyDeposit\": {},\n    \"poolDeposit\": {},\n    \"maxEpoch\": {},\n    \"optimalPoolCount\": {},\n    \"minUtxoValue\": {},\n    \"minPoolCost\": {},\n    \"maxTxExMem\": {},\n    \"maxTxExSteps\": {},\n    \"maxBlockExMem\": {},\n    \"maxBlockExSteps\": {},\n    \"maxValSize\": {},\n    \"coinsPerUtxoSize\": {},\n    \"influence\": {},\n    \"monetaryExpandRate\": {},\n    \"treasuryGrowthRate\": {},\n    \"decentralisation\": {},\n    \"priceMem\": {},\n    \"priceStep\": {},\n    \"protocolMajor\": {},\n    \"protocolMinor\": {},\n    \"collateralPercent\": {},\n    \"maxCollateralInputs\": {},\n    \"entropy\": {},\n    \"costModel\": {}\n  },\n  \"stakeCertificates\": [\n    {\n      \"stakeAddress\": \"enim esse labore\",\n      \"type\": \"STAKE_DEREGISTRATION\"\n    },\n    {\n      \"stakeAddress\": \"tempor quis exer\",\n      \"type\": \"STAKE_DEREGISTRATION\"\n    }\n  ],\n  \"poolCertificates\": [\n    {\n      \"poolId\": \"dolor nostrud ipsum sit\",\n      \"epoch\": 39992826,\n      \"vrfKey\": \"Lorem cupidatat id eiusmod voluptate\",\n      \"rewardAccount\": \"veniam\",\n      \"poolOwners\": [\n        \"in nulla\",\n        \"eiusmod\"\n      ],\n      \"metadataHash\": \"fugiat dolor enim irure\",\n      \"metadataUrl\": \"qu\",\n      \"margin\": 73906917.11426273,\n      \"cost\": -28342474,\n      \"pledge\": 3626040,\n      \"relays\": [\n        {\n          \"dnsName\": \"irure in deserunt\",\n          \"dnsSrvName\": \"cillum do\",\n          \"ipv4\": \"fugiat esse\",\n          \"ipv6\": \"fugiat sunt \",\n          \"port\": -63030067\n        },\n        {\n          \"dnsName\": \"adipisicing laboris ipsum\",\n          \"dnsSrvName\": \"et\",\n          \"ipv4\": \"est laboris ut dolore enim\",\n          \"ipv6\": \"ullamco\",\n          \"port\": 51604860\n        }\n      ],\n      \"type\": \"STAKE_DEREGISTRATION\"\n    },\n    {\n      \"poolId\": \"amet est occaecat\",\n      \"epoch\": 3052835,\n      \"vrfKey\": \"voluptate in ipsum ex\",\n      \"rewardAccount\": \"quis tempor proident\",\n      \"poolOwners\": [\n        \"ea aliqua enim\",\n        \"aliqua Duis \"\n      ],\n      \"metadataHash\": \"in aliqua est ex\",\n      \"metadataUrl\": \"tempor reprehenderit\",\n      \"margin\": -83052879.53952156,\n      \"cost\": 62567059,\n      \"pledge\": -88260869,\n      \"relays\": [\n        {\n          \"dnsName\": \"cupidatat quis culpa\",\n          \"dnsSrvName\": \"non Lorem ut amet\",\n          \"ipv4\": \"consectetur est in\",\n          \"ipv6\": \"veniam nulla\",\n          \"port\": -99901569\n        },\n        {\n          \"dnsName\": \"velit id in occaecat\",\n          \"dnsSrvName\": \"deserunt consectetur fugiat qui\",\n          \"ipv4\": \"labore Ut laborum ea\",\n          \"ipv6\": \"incididunt\",\n          \"port\": 2713541\n        }\n      ],\n      \"type\": \"STAKE_REGISTRATION\"\n    }\n  ],\n  \"previousProtocols\": {\n    \"minFeeA\": {},\n    \"minFeeB\": {},\n    \"maxBlockSize\": {},\n    \"maxTxSize\": {},\n    \"maxBhSize\": {},\n    \"keyDeposit\": {},\n    \"poolDeposit\": {},\n    \"maxEpoch\": {},\n    \"optimalPoolCount\": {},\n    \"minUtxoValue\": {},\n    \"minPoolCost\": {},\n    \"maxTxExMem\": {},\n    \"maxTxExSteps\": {},\n    \"maxBlockExMem\": {},\n    \"maxBlockExSteps\": {},\n    \"maxValSize\": {},\n    \"coinsPerUtxoSize\": {},\n    \"influence\": {},\n    \"monetaryExpandRate\": {},\n    \"treasuryGrowthRate\": {},\n    \"decentralisation\": {},\n    \"priceMem\": {},\n    \"priceStep\": {},\n    \"protocolMajor\": {},\n    \"protocolMinor\": {},\n    \"collateralPercent\": {},\n    \"maxCollateralInputs\": {},\n    \"entropy\": {},\n    \"costModel\": {}\n  },\n  \"utxOs\": {\n    \"inputs\": [\n      {\n        \"address\": \"incididunt Duis cillum\",\n        \"index\": \"velit anim\",\n        \"txHash\": \"reprehenderit exercitation labore dolor\",\n        \"value\": 86452714,\n        \"assetId\": \"aute ad magna nulla occaecat\",\n        \"tokens\": [\n          {\n            \"assetName\": \"veniam\",\n            \"assetQuantity\": 6023488,\n            \"assetId\": \"consequat dolor labore ad\",\n            \"policy\": \"minim laborum non\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"laboris mollit consectetur occaecat\",\n            \"assetQuantity\": -45385830,\n            \"assetId\": \"sunt commodo Ut\",\n            \"policy\": \"cillum consectetur aliqua\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"culpa dolore\"\n      },\n      {\n        \"address\": \"ipsum consequat Ut\",\n        \"index\": \"proident eu\",\n        \"txHash\": \"consequat\",\n        \"value\": -65452743,\n        \"assetId\": \"irure do\",\n        \"tokens\": [\n          {\n            \"assetName\": \"ex proident\",\n            \"assetQuantity\": 25606998,\n            \"assetId\": \"repreh\",\n            \"policy\": \"dolor nostrud in non esse\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"esse\",\n            \"assetQuantity\": -45066563,\n            \"assetId\": \"Lorem minim nulla exercitation\",\n            \"policy\": \"Excepteur labore amet ut\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"officia aliquip\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"Ut Duis\",\n        \"index\": \"in laboris esse\",\n        \"txHash\": \"culpa\",\n        \"value\": 68557611,\n        \"assetId\": \"eu fugiat\",\n        \"tokens\": [\n          {\n            \"assetName\": \"ipsum officia incididunt mollit eiusmod\",\n            \"assetQuantity\": -92989460,\n            \"assetId\": \"tempor\",\n            \"policy\": \"adipisicing consequat labore quis fugiat\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"nulla\",\n            \"assetQuantity\": -40828233,\n            \"assetId\": \"deserunt officia proident\",\n            \"policy\": \"tempor consectetur\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"laborum sint ad tempor\"\n      },\n      {\n        \"address\": \"nulla elit in Lorem\",\n        \"index\": \"mollit\",\n        \"txHash\": \"Lorem anim \",\n        \"value\": 4564961,\n        \"assetId\": \"sed adipisicing\",\n        \"tokens\": [\n          {\n            \"assetName\": \"incididunt\",\n            \"assetQuantity\": 50993765,\n            \"assetId\": \"esse fugiat\",\n            \"policy\": \"anim consectetur eu\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"aliqua enim eiusmod\",\n            \"assetQuantity\": 29044517,\n            \"assetId\": \"nulla\",\n            \"policy\": \"cillum in ea\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"fugiat ut\"\n      }\n    ]\n  }\n}"
                }
              ]
            },
            {
              "name": "Get transaction detail by hash metadata of CIP25",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "\r",
                      "var metadataCIP25 = pm.response.json().metadata[0].metadataCIP25.tokenMap;\r",
                      "const tokenNames = [\"jc00000007\", \"jc00000052\", \"jc00000040\", \"jc00000005\", \"jc00000027\", \"jc00000006\", \"jc00023445\", \"jc00000003\", \"jc00023446\", \"jc00000004\", \"jc00000012\", \"jc00000024\"]\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      "pm.test(\"Check metadata CIP 25\", function () {\r",
                      "    tokenNames.map((tokenName) => {\r",
                      "        pm.expect(metadataCIP25[tokenName].tokenName).to.be.a(\"string\", \"metadataCIP25[tokenName].tokenName\")\r",
                      "\r",
                      "        if (metadataCIP25[tokenName].requireProperties && metadataCIP25[tokenName].requireProperties.length > 0) {\r",
                      "            metadataCIP25[tokenName].requireProperties.map(require => {\r",
                      "                pm.expect(require.index).to.be.a(\"string\", \"require.index\")\r",
                      "                pm.expect(require.valid).to.be.a(\"boolean\", \"require.valid\")\r",
                      "                pm.expect(require.value).to.be.a(\"string\", \"require.value\")\r",
                      "                pm.expect(require.property).to.be.a(\"string\", \"require.property\")\r",
                      "                pm.expect(require.format).to.be.a(\"string\", \"require.format\")\r",
                      "            })\r",
                      "        }\r",
                      "        if (metadataCIP25[tokenName].optionalProperties && metadataCIP25[tokenName].optionalProperties.length > 0) {\r",
                      "            metadataCIP25[tokenName].optionalProperties.map(optional => {\r",
                      "                pm.expect(optional.index).to.be.a(\"string\", \"optional.index\")\r",
                      "                pm.expect(optional.valid).to.be.a(\"boolean\", \"optional.valid\")\r",
                      "                pm.expect(optional.value).to.be.a(\"string\", \"optional.value\")\r",
                      "                pm.expect(optional.property).to.be.a(\"string\", \"optional.property\")\r",
                      "                pm.expect(optional.format).to.be.a(\"string\", \"optional.format\")\r",
                      "            })\r",
                      "        }\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/txs/:hash",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "txs",
                    ":hash"
                  ],
                  "variable": [
                    {
                      "key": "hash",
                      "value": "5c84b84a9a47f2976c0c377c20319c98c28d4db9739340b0d21314b916d082de",
                      "description": "{From api Get current transactions - api/v1/txs/current)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/txs/:hash",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "txs",
                        ":hash"
                      ],
                      "variable": [
                        {
                          "key": "hash",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) Hash value of transaction"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"tx\": {\n    \"hash\": \"nostrud laborum laboris\",\n    \"time\": \"2018-02-24T03:08:11.583Z\",\n    \"blockNo\": 39000018,\n    \"blockHash\": \"deserunt ex irure ullamco\",\n    \"epochSlot\": 25921623,\n    \"maxEpochSlot\": 14816159,\n    \"epochNo\": -58822797,\n    \"status\": \"PENDING\",\n    \"confirmation\": 45560009,\n    \"fee\": -86651620,\n    \"totalOutput\": 91690877\n  },\n  \"summary\": {\n    \"stakeAddress\": [\n      {\n        \"address\": \"non nulla \",\n        \"index\": \"laboris laborum\",\n        \"txHash\": \"est sed\",\n        \"value\": -12356699,\n        \"assetId\": \"dolore sit laboris\",\n        \"tokens\": [\n          {\n            \"assetName\": \"non quis\",\n            \"assetQuantity\": 76901813,\n            \"assetId\": \"sint cillum nisi deserunt\",\n            \"policy\": \"in nisi ut\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"officia ex sit ea\",\n            \"assetQuantity\": 64780161,\n            \"assetId\": \"officia Ut culpa\",\n            \"policy\": \"ex\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"dolor sint\"\n      },\n      {\n        \"address\": \"dolor et ut laboris\",\n        \"index\": \"aute ad\",\n        \"txHash\": \"fugiat officia nostrud\",\n        \"value\": -52906994,\n        \"assetId\": \"tempor deserunt\",\n        \"tokens\": [\n          {\n            \"assetName\": \"sit elit\",\n            \"assetQuantity\": 26318873,\n            \"assetId\": \"Lorem proident dolor id Excepteur\",\n            \"policy\": \"veniam ut \",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"et minim Ut elit officia\",\n            \"assetQuantity\": -68478910,\n            \"assetId\": \"cillum\",\n            \"policy\": \"anim proident\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"velit nisi\"\n      }\n    ]\n  },\n  \"contracts\": [\n    {\n      \"contract\": \"do elit\"\n    },\n    {\n      \"contract\": \"minim irure quis commodo exercitation\"\n    }\n  ],\n  \"collaterals\": {\n    \"collateralInputResponses\": [\n      {\n        \"address\": \"incididunt officia Ut sunt\",\n        \"index\": \"cillum ut Excepteur magna\",\n        \"txHash\": \"deserunt\",\n        \"value\": 80710282,\n        \"assetId\": \"est nostrud\",\n        \"tokens\": [\n          {\n            \"assetName\": \"dolore dolor est sunt\",\n            \"assetQuantity\": -99598700,\n            \"assetId\": \"minim Lorem\",\n            \"policy\": \"exercitation ipsum\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"officia\",\n            \"assetQuantity\": 94856757,\n            \"assetId\": \"cupidatat sint\",\n            \"policy\": \"dolore occaecat et\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"dolor\"\n      },\n      {\n        \"address\": \"Ut est\",\n        \"index\": \"cupidatat velit consectetur eiusmod laboris\",\n        \"txHash\": \"dolor non commodo incididunt\",\n        \"value\": -37550852,\n        \"assetId\": \"et dolor esse aute sit\",\n        \"tokens\": [\n          {\n            \"assetName\": \"eu\",\n            \"assetQuantity\": -95341916,\n            \"assetId\": \"est non labore ad nisi\",\n            \"policy\": \"magna cillum esse\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"est elit sint ipsum\",\n            \"assetQuantity\": 14308195,\n            \"assetId\": \"labore dolor id\",\n            \"policy\": \"ex dolor officia anim commodo\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"magna laborum\"\n      }\n    ],\n    \"collateralOutputResponses\": [\n      {\n        \"address\": \"deserunt qui Duis\",\n        \"index\": \"labor\",\n        \"txHash\": \"cupidatat sunt ea\",\n        \"value\": -69141579,\n        \"assetId\": \"proident\",\n        \"tokens\": [\n          {\n            \"assetName\": \"labore adipisicing in dolor do\",\n            \"assetQuantity\": -65262883,\n            \"assetId\": \"ut tempor minim esse sunt\",\n            \"policy\": \"nisi\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"ullamco sunt\",\n            \"assetQuantity\": -67540790,\n            \"assetId\": \"do reprehenderit Excepteur\",\n            \"policy\": \"sint commodo\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"commodo culpa\"\n      },\n      {\n        \"address\": \"ipsum cupidatat incididunt\",\n        \"index\": \"cupidatat exercitation aliquip nisi\",\n        \"txHash\": \"Duis aute\",\n        \"value\": -20447685,\n        \"assetId\": \"labore Ut mollit ea\",\n        \"tokens\": [\n          {\n            \"assetName\": \"anim pariatur\",\n            \"assetQuantity\": 49199255,\n            \"assetId\": \"magna Excepteur laborum\",\n            \"policy\": \"eiusmod sit\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"eiusmod amet ut\",\n            \"assetQuantity\": 13419767,\n            \"assetId\": \"commodo\",\n            \"policy\": \"consequat id dolor aliqua nulla\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"dolo\"\n      }\n    ]\n  },\n  \"notes\": [\n    {\n      \"note\": \"veniam magna qui ipsum dolor\"\n    },\n    {\n      \"note\": \"nostrud sed incididunt id ea\"\n    }\n  ],\n  \"withdrawals\": [\n    {\n      \"stakeAddressFrom\": \"nisi ipsum\",\n      \"addressTo\": [\n        \"occaecat irure fugiat incididunt\",\n        \"et in nulla\"\n      ],\n      \"amount\": -24647262\n    },\n    {\n      \"stakeAddressFrom\": \"ex laborum dolor dolore\",\n      \"addressTo\": [\n        \"dolor deserunt\",\n        \"anim ipsum enim\"\n      ],\n      \"amount\": 76401435\n    }\n  ],\n  \"delegations\": [\n    {\n      \"address\": \"eiusmod occaecat\",\n      \"poolId\": \"ut ipsum cupidatat\"\n    },\n    {\n      \"address\": \"aute ex\",\n      \"poolId\": \"minim quis dolor ad\"\n    }\n  ],\n  \"mints\": [\n    {\n      \"assetName\": \"et dolore\",\n      \"assetQuantity\": 37808196,\n      \"assetId\": \"culpa commodo ipsum Excepteur\",\n      \"policy\": \"mollit est cillum magna non\",\n      \"metadata\": {\n        \"url\": \"velit Excepteur dolor\",\n        \"ticker\": \"consequat esse officia\",\n        \"decimals\": 69670843,\n        \"logo\": \"officia voluptate\",\n        \"description\": \"elit voluptate proident\"\n      }\n    },\n    {\n      \"assetName\": \"cillum\",\n      \"assetQuantity\": 84682726,\n      \"assetId\": \"aliquip occaecat exercitation\",\n      \"policy\": \"ex laboris i\",\n      \"metadata\": {\n        \"url\": \"in sit dolore velit\",\n        \"ticker\": \"elit i\",\n        \"decimals\": 60143156,\n        \"logo\": \"laborum\",\n        \"description\": \"reprehenderit aliquip irure dolor\"\n      }\n    }\n  ],\n  \"protocols\": {\n    \"minFeeA\": {},\n    \"minFeeB\": {},\n    \"maxBlockSize\": {},\n    \"maxTxSize\": {},\n    \"maxBhSize\": {},\n    \"keyDeposit\": {},\n    \"poolDeposit\": {},\n    \"maxEpoch\": {},\n    \"optimalPoolCount\": {},\n    \"minUtxoValue\": {},\n    \"minPoolCost\": {},\n    \"maxTxExMem\": {},\n    \"maxTxExSteps\": {},\n    \"maxBlockExMem\": {},\n    \"maxBlockExSteps\": {},\n    \"maxValSize\": {},\n    \"coinsPerUtxoSize\": {},\n    \"influence\": {},\n    \"monetaryExpandRate\": {},\n    \"treasuryGrowthRate\": {},\n    \"decentralisation\": {},\n    \"priceMem\": {},\n    \"priceStep\": {},\n    \"protocolMajor\": {},\n    \"protocolMinor\": {},\n    \"collateralPercent\": {},\n    \"maxCollateralInputs\": {},\n    \"entropy\": {},\n    \"costModel\": {}\n  },\n  \"stakeCertificates\": [\n    {\n      \"stakeAddress\": \"enim esse labore\",\n      \"type\": \"STAKE_DEREGISTRATION\"\n    },\n    {\n      \"stakeAddress\": \"tempor quis exer\",\n      \"type\": \"STAKE_DEREGISTRATION\"\n    }\n  ],\n  \"poolCertificates\": [\n    {\n      \"poolId\": \"dolor nostrud ipsum sit\",\n      \"epoch\": 39992826,\n      \"vrfKey\": \"Lorem cupidatat id eiusmod voluptate\",\n      \"rewardAccount\": \"veniam\",\n      \"poolOwners\": [\n        \"in nulla\",\n        \"eiusmod\"\n      ],\n      \"metadataHash\": \"fugiat dolor enim irure\",\n      \"metadataUrl\": \"qu\",\n      \"margin\": 73906917.11426273,\n      \"cost\": -28342474,\n      \"pledge\": 3626040,\n      \"relays\": [\n        {\n          \"dnsName\": \"irure in deserunt\",\n          \"dnsSrvName\": \"cillum do\",\n          \"ipv4\": \"fugiat esse\",\n          \"ipv6\": \"fugiat sunt \",\n          \"port\": -63030067\n        },\n        {\n          \"dnsName\": \"adipisicing laboris ipsum\",\n          \"dnsSrvName\": \"et\",\n          \"ipv4\": \"est laboris ut dolore enim\",\n          \"ipv6\": \"ullamco\",\n          \"port\": 51604860\n        }\n      ],\n      \"type\": \"STAKE_DEREGISTRATION\"\n    },\n    {\n      \"poolId\": \"amet est occaecat\",\n      \"epoch\": 3052835,\n      \"vrfKey\": \"voluptate in ipsum ex\",\n      \"rewardAccount\": \"quis tempor proident\",\n      \"poolOwners\": [\n        \"ea aliqua enim\",\n        \"aliqua Duis \"\n      ],\n      \"metadataHash\": \"in aliqua est ex\",\n      \"metadataUrl\": \"tempor reprehenderit\",\n      \"margin\": -83052879.53952156,\n      \"cost\": 62567059,\n      \"pledge\": -88260869,\n      \"relays\": [\n        {\n          \"dnsName\": \"cupidatat quis culpa\",\n          \"dnsSrvName\": \"non Lorem ut amet\",\n          \"ipv4\": \"consectetur est in\",\n          \"ipv6\": \"veniam nulla\",\n          \"port\": -99901569\n        },\n        {\n          \"dnsName\": \"velit id in occaecat\",\n          \"dnsSrvName\": \"deserunt consectetur fugiat qui\",\n          \"ipv4\": \"labore Ut laborum ea\",\n          \"ipv6\": \"incididunt\",\n          \"port\": 2713541\n        }\n      ],\n      \"type\": \"STAKE_REGISTRATION\"\n    }\n  ],\n  \"previousProtocols\": {\n    \"minFeeA\": {},\n    \"minFeeB\": {},\n    \"maxBlockSize\": {},\n    \"maxTxSize\": {},\n    \"maxBhSize\": {},\n    \"keyDeposit\": {},\n    \"poolDeposit\": {},\n    \"maxEpoch\": {},\n    \"optimalPoolCount\": {},\n    \"minUtxoValue\": {},\n    \"minPoolCost\": {},\n    \"maxTxExMem\": {},\n    \"maxTxExSteps\": {},\n    \"maxBlockExMem\": {},\n    \"maxBlockExSteps\": {},\n    \"maxValSize\": {},\n    \"coinsPerUtxoSize\": {},\n    \"influence\": {},\n    \"monetaryExpandRate\": {},\n    \"treasuryGrowthRate\": {},\n    \"decentralisation\": {},\n    \"priceMem\": {},\n    \"priceStep\": {},\n    \"protocolMajor\": {},\n    \"protocolMinor\": {},\n    \"collateralPercent\": {},\n    \"maxCollateralInputs\": {},\n    \"entropy\": {},\n    \"costModel\": {}\n  },\n  \"utxOs\": {\n    \"inputs\": [\n      {\n        \"address\": \"incididunt Duis cillum\",\n        \"index\": \"velit anim\",\n        \"txHash\": \"reprehenderit exercitation labore dolor\",\n        \"value\": 86452714,\n        \"assetId\": \"aute ad magna nulla occaecat\",\n        \"tokens\": [\n          {\n            \"assetName\": \"veniam\",\n            \"assetQuantity\": 6023488,\n            \"assetId\": \"consequat dolor labore ad\",\n            \"policy\": \"minim laborum non\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"laboris mollit consectetur occaecat\",\n            \"assetQuantity\": -45385830,\n            \"assetId\": \"sunt commodo Ut\",\n            \"policy\": \"cillum consectetur aliqua\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"culpa dolore\"\n      },\n      {\n        \"address\": \"ipsum consequat Ut\",\n        \"index\": \"proident eu\",\n        \"txHash\": \"consequat\",\n        \"value\": -65452743,\n        \"assetId\": \"irure do\",\n        \"tokens\": [\n          {\n            \"assetName\": \"ex proident\",\n            \"assetQuantity\": 25606998,\n            \"assetId\": \"repreh\",\n            \"policy\": \"dolor nostrud in non esse\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"esse\",\n            \"assetQuantity\": -45066563,\n            \"assetId\": \"Lorem minim nulla exercitation\",\n            \"policy\": \"Excepteur labore amet ut\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"officia aliquip\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"Ut Duis\",\n        \"index\": \"in laboris esse\",\n        \"txHash\": \"culpa\",\n        \"value\": 68557611,\n        \"assetId\": \"eu fugiat\",\n        \"tokens\": [\n          {\n            \"assetName\": \"ipsum officia incididunt mollit eiusmod\",\n            \"assetQuantity\": -92989460,\n            \"assetId\": \"tempor\",\n            \"policy\": \"adipisicing consequat labore quis fugiat\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"nulla\",\n            \"assetQuantity\": -40828233,\n            \"assetId\": \"deserunt officia proident\",\n            \"policy\": \"tempor consectetur\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"laborum sint ad tempor\"\n      },\n      {\n        \"address\": \"nulla elit in Lorem\",\n        \"index\": \"mollit\",\n        \"txHash\": \"Lorem anim \",\n        \"value\": 4564961,\n        \"assetId\": \"sed adipisicing\",\n        \"tokens\": [\n          {\n            \"assetName\": \"incididunt\",\n            \"assetQuantity\": 50993765,\n            \"assetId\": \"esse fugiat\",\n            \"policy\": \"anim consectetur eu\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"aliqua enim eiusmod\",\n            \"assetQuantity\": 29044517,\n            \"assetId\": \"nulla\",\n            \"policy\": \"cillum in ea\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"fugiat ut\"\n      }\n    ]\n  }\n}"
                }
              ]
            },
            {
              "name": "Get transaction detail by hash metadata of CIP60",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var metadataCIP60 = pm.response.json().metadata[0].metadataCIP60.tokenMap;\r",
                      "\r",
                      "const token = 'NEWM_7';\r",
                      "\r",
                      "pm.test('Status code is 200', function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "})\r",
                      "\r",
                      "pm.test('Response time is less than 5000ms', function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "})\r",
                      "\r",
                      "pm.test(\"Check metadata CIP 60\", function () {\r",
                      "    pm.expect(metadataCIP60[token].tokenName).to.be.a(\"string\", \"metadataCIP60.tokenMap[token].tokenName\")\r",
                      "\r",
                      "    if (metadataCIP60[token].tokenName.requireProperties && metadataCIP60[token].tokenName.requireProperties.length > 0) {\r",
                      "        metadataCIP60[token].tokenName.requireProperties.map(require => {\r",
                      "            pm.expect(require.index).to.be.a(\"string\", \"require.index\")\r",
                      "            pm.expect(require.valid).to.be.a(\"boolean\", \"require.valid\")\r",
                      "            pm.expect(require.value).to.be.a(\"string\", \"require.value\")\r",
                      "            pm.expect(require.property).to.be.a(\"string\", \"require.property\")\r",
                      "            pm.expect(require.format).to.be.a(\"string\", \"require.format\")\r",
                      "        })\r",
                      "    }\r",
                      "    if (metadataCIP60[token].tokenName.optionalProperties && metadataCIP60[token].tokenName.optionalProperties.length > 0) {\r",
                      "        metadataCIP60[token].tokenName.optionalProperties.map(require => {\r",
                      "            pm.expect(require.index).to.be.a(\"string\", \"require.index\")\r",
                      "            pm.expect(require.valid).to.be.a(\"boolean\", \"require.valid\")\r",
                      "            pm.expect(require.value).to.be.a(\"string\", \"require.value\")\r",
                      "            pm.expect(require.property).to.be.a(\"string\", \"require.property\")\r",
                      "            pm.expect(require.format).to.be.a(\"string\", \"require.format\")\r",
                      "        })\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/txs/:hash",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "txs",
                    ":hash"
                  ],
                  "variable": [
                    {
                      "key": "hash",
                      "value": "a3cadb4efb2844ccffb0463ff90a289f47dad19c81c9a1a1e79a48fa743aefc4",
                      "description": "{From api Get current transactions - api/v1/txs/current)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/txs/:hash",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "txs",
                        ":hash"
                      ],
                      "variable": [
                        {
                          "key": "hash",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) Hash value of transaction"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"tx\": {\n    \"hash\": \"nostrud laborum laboris\",\n    \"time\": \"2018-02-24T03:08:11.583Z\",\n    \"blockNo\": 39000018,\n    \"blockHash\": \"deserunt ex irure ullamco\",\n    \"epochSlot\": 25921623,\n    \"maxEpochSlot\": 14816159,\n    \"epochNo\": -58822797,\n    \"status\": \"PENDING\",\n    \"confirmation\": 45560009,\n    \"fee\": -86651620,\n    \"totalOutput\": 91690877\n  },\n  \"summary\": {\n    \"stakeAddress\": [\n      {\n        \"address\": \"non nulla \",\n        \"index\": \"laboris laborum\",\n        \"txHash\": \"est sed\",\n        \"value\": -12356699,\n        \"assetId\": \"dolore sit laboris\",\n        \"tokens\": [\n          {\n            \"assetName\": \"non quis\",\n            \"assetQuantity\": 76901813,\n            \"assetId\": \"sint cillum nisi deserunt\",\n            \"policy\": \"in nisi ut\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"officia ex sit ea\",\n            \"assetQuantity\": 64780161,\n            \"assetId\": \"officia Ut culpa\",\n            \"policy\": \"ex\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"dolor sint\"\n      },\n      {\n        \"address\": \"dolor et ut laboris\",\n        \"index\": \"aute ad\",\n        \"txHash\": \"fugiat officia nostrud\",\n        \"value\": -52906994,\n        \"assetId\": \"tempor deserunt\",\n        \"tokens\": [\n          {\n            \"assetName\": \"sit elit\",\n            \"assetQuantity\": 26318873,\n            \"assetId\": \"Lorem proident dolor id Excepteur\",\n            \"policy\": \"veniam ut \",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"et minim Ut elit officia\",\n            \"assetQuantity\": -68478910,\n            \"assetId\": \"cillum\",\n            \"policy\": \"anim proident\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"velit nisi\"\n      }\n    ]\n  },\n  \"contracts\": [\n    {\n      \"contract\": \"do elit\"\n    },\n    {\n      \"contract\": \"minim irure quis commodo exercitation\"\n    }\n  ],\n  \"collaterals\": {\n    \"collateralInputResponses\": [\n      {\n        \"address\": \"incididunt officia Ut sunt\",\n        \"index\": \"cillum ut Excepteur magna\",\n        \"txHash\": \"deserunt\",\n        \"value\": 80710282,\n        \"assetId\": \"est nostrud\",\n        \"tokens\": [\n          {\n            \"assetName\": \"dolore dolor est sunt\",\n            \"assetQuantity\": -99598700,\n            \"assetId\": \"minim Lorem\",\n            \"policy\": \"exercitation ipsum\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"officia\",\n            \"assetQuantity\": 94856757,\n            \"assetId\": \"cupidatat sint\",\n            \"policy\": \"dolore occaecat et\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"dolor\"\n      },\n      {\n        \"address\": \"Ut est\",\n        \"index\": \"cupidatat velit consectetur eiusmod laboris\",\n        \"txHash\": \"dolor non commodo incididunt\",\n        \"value\": -37550852,\n        \"assetId\": \"et dolor esse aute sit\",\n        \"tokens\": [\n          {\n            \"assetName\": \"eu\",\n            \"assetQuantity\": -95341916,\n            \"assetId\": \"est non labore ad nisi\",\n            \"policy\": \"magna cillum esse\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"est elit sint ipsum\",\n            \"assetQuantity\": 14308195,\n            \"assetId\": \"labore dolor id\",\n            \"policy\": \"ex dolor officia anim commodo\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"magna laborum\"\n      }\n    ],\n    \"collateralOutputResponses\": [\n      {\n        \"address\": \"deserunt qui Duis\",\n        \"index\": \"labor\",\n        \"txHash\": \"cupidatat sunt ea\",\n        \"value\": -69141579,\n        \"assetId\": \"proident\",\n        \"tokens\": [\n          {\n            \"assetName\": \"labore adipisicing in dolor do\",\n            \"assetQuantity\": -65262883,\n            \"assetId\": \"ut tempor minim esse sunt\",\n            \"policy\": \"nisi\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"ullamco sunt\",\n            \"assetQuantity\": -67540790,\n            \"assetId\": \"do reprehenderit Excepteur\",\n            \"policy\": \"sint commodo\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"commodo culpa\"\n      },\n      {\n        \"address\": \"ipsum cupidatat incididunt\",\n        \"index\": \"cupidatat exercitation aliquip nisi\",\n        \"txHash\": \"Duis aute\",\n        \"value\": -20447685,\n        \"assetId\": \"labore Ut mollit ea\",\n        \"tokens\": [\n          {\n            \"assetName\": \"anim pariatur\",\n            \"assetQuantity\": 49199255,\n            \"assetId\": \"magna Excepteur laborum\",\n            \"policy\": \"eiusmod sit\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"eiusmod amet ut\",\n            \"assetQuantity\": 13419767,\n            \"assetId\": \"commodo\",\n            \"policy\": \"consequat id dolor aliqua nulla\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"dolo\"\n      }\n    ]\n  },\n  \"notes\": [\n    {\n      \"note\": \"veniam magna qui ipsum dolor\"\n    },\n    {\n      \"note\": \"nostrud sed incididunt id ea\"\n    }\n  ],\n  \"withdrawals\": [\n    {\n      \"stakeAddressFrom\": \"nisi ipsum\",\n      \"addressTo\": [\n        \"occaecat irure fugiat incididunt\",\n        \"et in nulla\"\n      ],\n      \"amount\": -24647262\n    },\n    {\n      \"stakeAddressFrom\": \"ex laborum dolor dolore\",\n      \"addressTo\": [\n        \"dolor deserunt\",\n        \"anim ipsum enim\"\n      ],\n      \"amount\": 76401435\n    }\n  ],\n  \"delegations\": [\n    {\n      \"address\": \"eiusmod occaecat\",\n      \"poolId\": \"ut ipsum cupidatat\"\n    },\n    {\n      \"address\": \"aute ex\",\n      \"poolId\": \"minim quis dolor ad\"\n    }\n  ],\n  \"mints\": [\n    {\n      \"assetName\": \"et dolore\",\n      \"assetQuantity\": 37808196,\n      \"assetId\": \"culpa commodo ipsum Excepteur\",\n      \"policy\": \"mollit est cillum magna non\",\n      \"metadata\": {\n        \"url\": \"velit Excepteur dolor\",\n        \"ticker\": \"consequat esse officia\",\n        \"decimals\": 69670843,\n        \"logo\": \"officia voluptate\",\n        \"description\": \"elit voluptate proident\"\n      }\n    },\n    {\n      \"assetName\": \"cillum\",\n      \"assetQuantity\": 84682726,\n      \"assetId\": \"aliquip occaecat exercitation\",\n      \"policy\": \"ex laboris i\",\n      \"metadata\": {\n        \"url\": \"in sit dolore velit\",\n        \"ticker\": \"elit i\",\n        \"decimals\": 60143156,\n        \"logo\": \"laborum\",\n        \"description\": \"reprehenderit aliquip irure dolor\"\n      }\n    }\n  ],\n  \"protocols\": {\n    \"minFeeA\": {},\n    \"minFeeB\": {},\n    \"maxBlockSize\": {},\n    \"maxTxSize\": {},\n    \"maxBhSize\": {},\n    \"keyDeposit\": {},\n    \"poolDeposit\": {},\n    \"maxEpoch\": {},\n    \"optimalPoolCount\": {},\n    \"minUtxoValue\": {},\n    \"minPoolCost\": {},\n    \"maxTxExMem\": {},\n    \"maxTxExSteps\": {},\n    \"maxBlockExMem\": {},\n    \"maxBlockExSteps\": {},\n    \"maxValSize\": {},\n    \"coinsPerUtxoSize\": {},\n    \"influence\": {},\n    \"monetaryExpandRate\": {},\n    \"treasuryGrowthRate\": {},\n    \"decentralisation\": {},\n    \"priceMem\": {},\n    \"priceStep\": {},\n    \"protocolMajor\": {},\n    \"protocolMinor\": {},\n    \"collateralPercent\": {},\n    \"maxCollateralInputs\": {},\n    \"entropy\": {},\n    \"costModel\": {}\n  },\n  \"stakeCertificates\": [\n    {\n      \"stakeAddress\": \"enim esse labore\",\n      \"type\": \"STAKE_DEREGISTRATION\"\n    },\n    {\n      \"stakeAddress\": \"tempor quis exer\",\n      \"type\": \"STAKE_DEREGISTRATION\"\n    }\n  ],\n  \"poolCertificates\": [\n    {\n      \"poolId\": \"dolor nostrud ipsum sit\",\n      \"epoch\": 39992826,\n      \"vrfKey\": \"Lorem cupidatat id eiusmod voluptate\",\n      \"rewardAccount\": \"veniam\",\n      \"poolOwners\": [\n        \"in nulla\",\n        \"eiusmod\"\n      ],\n      \"metadataHash\": \"fugiat dolor enim irure\",\n      \"metadataUrl\": \"qu\",\n      \"margin\": 73906917.11426273,\n      \"cost\": -28342474,\n      \"pledge\": 3626040,\n      \"relays\": [\n        {\n          \"dnsName\": \"irure in deserunt\",\n          \"dnsSrvName\": \"cillum do\",\n          \"ipv4\": \"fugiat esse\",\n          \"ipv6\": \"fugiat sunt \",\n          \"port\": -63030067\n        },\n        {\n          \"dnsName\": \"adipisicing laboris ipsum\",\n          \"dnsSrvName\": \"et\",\n          \"ipv4\": \"est laboris ut dolore enim\",\n          \"ipv6\": \"ullamco\",\n          \"port\": 51604860\n        }\n      ],\n      \"type\": \"STAKE_DEREGISTRATION\"\n    },\n    {\n      \"poolId\": \"amet est occaecat\",\n      \"epoch\": 3052835,\n      \"vrfKey\": \"voluptate in ipsum ex\",\n      \"rewardAccount\": \"quis tempor proident\",\n      \"poolOwners\": [\n        \"ea aliqua enim\",\n        \"aliqua Duis \"\n      ],\n      \"metadataHash\": \"in aliqua est ex\",\n      \"metadataUrl\": \"tempor reprehenderit\",\n      \"margin\": -83052879.53952156,\n      \"cost\": 62567059,\n      \"pledge\": -88260869,\n      \"relays\": [\n        {\n          \"dnsName\": \"cupidatat quis culpa\",\n          \"dnsSrvName\": \"non Lorem ut amet\",\n          \"ipv4\": \"consectetur est in\",\n          \"ipv6\": \"veniam nulla\",\n          \"port\": -99901569\n        },\n        {\n          \"dnsName\": \"velit id in occaecat\",\n          \"dnsSrvName\": \"deserunt consectetur fugiat qui\",\n          \"ipv4\": \"labore Ut laborum ea\",\n          \"ipv6\": \"incididunt\",\n          \"port\": 2713541\n        }\n      ],\n      \"type\": \"STAKE_REGISTRATION\"\n    }\n  ],\n  \"previousProtocols\": {\n    \"minFeeA\": {},\n    \"minFeeB\": {},\n    \"maxBlockSize\": {},\n    \"maxTxSize\": {},\n    \"maxBhSize\": {},\n    \"keyDeposit\": {},\n    \"poolDeposit\": {},\n    \"maxEpoch\": {},\n    \"optimalPoolCount\": {},\n    \"minUtxoValue\": {},\n    \"minPoolCost\": {},\n    \"maxTxExMem\": {},\n    \"maxTxExSteps\": {},\n    \"maxBlockExMem\": {},\n    \"maxBlockExSteps\": {},\n    \"maxValSize\": {},\n    \"coinsPerUtxoSize\": {},\n    \"influence\": {},\n    \"monetaryExpandRate\": {},\n    \"treasuryGrowthRate\": {},\n    \"decentralisation\": {},\n    \"priceMem\": {},\n    \"priceStep\": {},\n    \"protocolMajor\": {},\n    \"protocolMinor\": {},\n    \"collateralPercent\": {},\n    \"maxCollateralInputs\": {},\n    \"entropy\": {},\n    \"costModel\": {}\n  },\n  \"utxOs\": {\n    \"inputs\": [\n      {\n        \"address\": \"incididunt Duis cillum\",\n        \"index\": \"velit anim\",\n        \"txHash\": \"reprehenderit exercitation labore dolor\",\n        \"value\": 86452714,\n        \"assetId\": \"aute ad magna nulla occaecat\",\n        \"tokens\": [\n          {\n            \"assetName\": \"veniam\",\n            \"assetQuantity\": 6023488,\n            \"assetId\": \"consequat dolor labore ad\",\n            \"policy\": \"minim laborum non\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"laboris mollit consectetur occaecat\",\n            \"assetQuantity\": -45385830,\n            \"assetId\": \"sunt commodo Ut\",\n            \"policy\": \"cillum consectetur aliqua\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"culpa dolore\"\n      },\n      {\n        \"address\": \"ipsum consequat Ut\",\n        \"index\": \"proident eu\",\n        \"txHash\": \"consequat\",\n        \"value\": -65452743,\n        \"assetId\": \"irure do\",\n        \"tokens\": [\n          {\n            \"assetName\": \"ex proident\",\n            \"assetQuantity\": 25606998,\n            \"assetId\": \"repreh\",\n            \"policy\": \"dolor nostrud in non esse\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"esse\",\n            \"assetQuantity\": -45066563,\n            \"assetId\": \"Lorem minim nulla exercitation\",\n            \"policy\": \"Excepteur labore amet ut\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"officia aliquip\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"address\": \"Ut Duis\",\n        \"index\": \"in laboris esse\",\n        \"txHash\": \"culpa\",\n        \"value\": 68557611,\n        \"assetId\": \"eu fugiat\",\n        \"tokens\": [\n          {\n            \"assetName\": \"ipsum officia incididunt mollit eiusmod\",\n            \"assetQuantity\": -92989460,\n            \"assetId\": \"tempor\",\n            \"policy\": \"adipisicing consequat labore quis fugiat\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"nulla\",\n            \"assetQuantity\": -40828233,\n            \"assetId\": \"deserunt officia proident\",\n            \"policy\": \"tempor consectetur\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"laborum sint ad tempor\"\n      },\n      {\n        \"address\": \"nulla elit in Lorem\",\n        \"index\": \"mollit\",\n        \"txHash\": \"Lorem anim \",\n        \"value\": 4564961,\n        \"assetId\": \"sed adipisicing\",\n        \"tokens\": [\n          {\n            \"assetName\": \"incididunt\",\n            \"assetQuantity\": 50993765,\n            \"assetId\": \"esse fugiat\",\n            \"policy\": \"anim consectetur eu\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          },\n          {\n            \"assetName\": \"aliqua enim eiusmod\",\n            \"assetQuantity\": 29044517,\n            \"assetId\": \"nulla\",\n            \"policy\": \"cillum in ea\",\n            \"metadata\": {\n              \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n            }\n          }\n        ],\n        \"stakeAddress\": \"fugiat ut\"\n      }\n    ]\n  }\n}"
                }
              ]
            },
            {
              "name": "Get transaction chart (1D , 1W, 2W, 1M)",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// var stt = \"200\";\r",
                      "// stt = pm.variables.get(\"stt\");\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of date\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "  pm.expect(jsonData[0].date).to.include(moment(jsonData[0].date).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "pm.test\r",
                      "(\"Check data type of simpleTransactions\", () => {\r",
                      "  pm.expect(jsonData[0].simpleTransactions).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of smartContract\", () => {\r",
                      "  pm.expect(jsonData[0].smartContract).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of metadata\", () => {\r",
                      "  pm.expect(jsonData[0].metadata).to.be.a(\"number\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/txs/graph/:range",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "txs",
                    "graph",
                    ":range"
                  ],
                  "variable": [
                    {
                      "key": "range",
                      "value": "ONE_WEEK",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/txs/graph/:range",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "txs",
                        "graph",
                        ":range"
                      ],
                      "variable": [
                        {
                          "key": "range",
                          "value": "TWO_WEEK",
                          "description": "(Required) "
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "[\n  {\n    \"date\": \"1948-07-21T20:44:59.895Z\",\n    \"simpleTransactions\": 64919880,\n    \"smartContract\": 95993749,\n    \"metadata\": 3957355\n  },\n  {\n    \"date\": \"1980-03-16T01:47:38.710Z\",\n    \"simpleTransactions\": -15374265,\n    \"smartContract\": 9472330,\n    \"metadata\": 2823739\n  }\n]"
                }
              ]
            }
          ]
        },
        {
          "name": "blocks",
          "item": [
            {
              "name": "Get all block",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "  pm.expect(jsonData.data[0].blockNo).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Check data type of slotNo\", () => {\r",
                      "  pm.expect(jsonData.data[0].slotNo).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of epochNo\", () => {\r",
                      "  pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of epochSlotNo\", () => {\r",
                      "  pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of hash\", () => {\r",
                      "  pm.expect(jsonData.data[0].hash).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of time\", () => {\r",
                      "        let moment = require ('moment');\r",
                      "  pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of txCount\", () => {\r",
                      "  pm.expect(jsonData.data[0].txCount).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalFees\", () => {\r",
                      "  pm.expect(jsonData.data[0].totalFees).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalOutput\", () => {\r",
                      "  pm.expect(jsonData.data[0].totalOutput).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of slotLeader\", () => {\r",
                      "  pm.expect(jsonData.data[0].slotLeader).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalItems\", () => {\r",
                      "  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalPages\", () => {\r",
                      "  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "//Scenario Compare api Get all block with api Get a block detail\r",
                      "// Get value\r",
                      "pm.test(\"Check block \" + pm.environment.get(\"tx_blockNo\") + \" exist\",function (){\r",
                      "    var tx_blockNo = pm.environment.get(\"tx_blockNo\");\r",
                      "    let result = jsonData.data.find(a => a.blockNo === tx_blockNo);\r",
                      "console.log (tx_blockNo);\r",
                      "    pm.environment.set(\"block_blockNo\", result.blockNo);\r",
                      "    pm.environment.set(\"block_hash\", result.hash);\r",
                      "    pm.environment.set(\"block_epochNo\", result.epochNo);\r",
                      "    pm.environment.set(\"block_time\", result.time);\r",
                      "    pm.environment.set(\"block_txCount\", result.txCount);\r",
                      "    pm.environment.set(\"block_slotNo\", result.slotNo);\r",
                      "    pm.environment.set(\"block_epochSlotNo\", result.epochSlotNo);\r",
                      "    pm.environment.set(\"block_totalFees\", result.totalFees);\r",
                      "    pm.environment.set(\"block_totalOutput\", result.totalOutput);\r",
                      "    pm.environment.set(\"block_slotLeader\", result.slotLeader);\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/blocks",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "blocks"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "5",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/blocks?page=0&size=20&sort=id,DESC",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "blocks"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "20"
                        },
                        {
                          "key": "sort",
                          "value": "id,DESC"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"blockNo\": 1028153,\n      \"slotNo\": 7991687,\n      \"epochNo\": -28188535,\n      \"epochSlotNo\": -22617358,\n      \"hash\": \"dolor minim sit\",\n      \"time\": \"1943-07-11T17:10:44.908Z\",\n      \"txCount\": -60907501,\n      \"totalFees\": 5379948,\n      \"totalOutput\": 10893408,\n      \"slotLeader\": \"sint aute nisi in aliqua\"\n    },\n    {\n      \"blockNo\": -84526712,\n      \"slotNo\": 80739718,\n      \"epochNo\": 88376858,\n      \"epochSlotNo\": 61110134,\n      \"hash\": \"officia\",\n      \"time\": \"1998-08-16T08:00:13.528Z\",\n      \"txCount\": 43679489,\n      \"totalFees\": 1615987,\n      \"totalOutput\": 52923981,\n      \"slotLeader\": \"cillum id\"\n    }\n  ],\n  \"totalItems\": -51536169,\n  \"totalPages\": -81459366,\n  \"currentPage\": 45098018\n}"
                }
              ]
            },
            {
              "name": "Boundary - Get all block (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(100);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/blocks?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "blocks"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "5",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get all block (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/blocks?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "blocks"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "5",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get all block (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/blocks?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "blocks"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "5",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get all block (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/blocks?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "blocks"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "5",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get tx list of block",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of hash\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "\r",
                      "    pm.expect(jsonData.data[0].hash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].blockNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].blockHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].slot).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].addressesInput).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].addressesOutput).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].totalOutput).to.be.a(\"number\");\r",
                      "    if (jsonData.data[0].balance){\r",
                      "       pm.expect(typeof jsonData.data[0].balance).to.be.oneOf([ 'object', 'number']); \r",
                      "    }\r",
                      "    pm.expect(jsonData.data[0].tokens).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "//Scenario Compare api Get tx list of block with api Get a block detail\r",
                      "pm.test(\"Compare txCount at api get tx list of block with api get a block detail\",function (){\r",
                      "    pm.expect(jsonData.totalItems).to.eql(pm.environment.get(\"block_txCount\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Compare value between tx list of block with\", function () {\r",
                      "    var tx_blockNo = pm.environment.get(\"tx_blockNo\");\r",
                      "    var tx_hash = pm.environment.get(\"tx_hash\");\r",
                      "    var tx_blockHash = pm.environment.get(\"tx_blockHash\");\r",
                      "    var tx_epochNo = pm.environment.get(\"tx_epochNo\");\r",
                      "    var tx_time = pm.environment.get(\"tx_time\");\r",
                      "    var tx_amount = pm.environment.get(\"tx_amount\");\r",
                      "    var tx_fee = pm.environment.get(\"tx_fee\");\r",
                      "    var tx_epochSlotNo = pm.environment.get(\"tx_epochSlotNo\");\r",
                      "\r",
                      "    let tb_result =jsonData.data.find(b => b.hash === tx_hash);\r",
                      "\r",
                      "    //Main compare\r",
                      "    pm.expect(tb_result.blockNo).to.eql(tx_blockNo);\r",
                      "    pm.expect(tb_result.blockHash).to.eql(tx_blockHash);\r",
                      "    pm.expect(tb_result.epochNo).to.eql(tx_epochNo);\r",
                      "    pm.expect(tb_result.epochSlotNo).to.eql(tx_epochSlotNo);\r",
                      "    pm.expect(tb_result.time).to.contain(tx_time);\r",
                      "    pm.expect(tb_result.fee).to.eql(tx_fee);\r",
                      "    pm.expect(tb_result.totalOutput).to.eql(tx_amount);\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/blocks/{{block_blockNo}}/txs",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "blocks",
                    "{{block_blockNo}}",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "blockId,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "blockIndex,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "blockId",
                      "value": "{{block_blockNo}}",
                      "description": "(From api Get all block - api/v1/txs)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/blocks/:blockId/txs?page=0&size=20&sort=blockId,DESC&sort=blockIndex,DESC",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "blocks",
                        ":blockId",
                        "txs"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "20"
                        },
                        {
                          "key": "sort",
                          "value": "blockId,DESC"
                        },
                        {
                          "key": "sort",
                          "value": "blockIndex,DESC"
                        }
                      ],
                      "variable": [
                        {
                          "key": "blockId",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) Block number or block hash"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"hash\": \"Excepteur sed labore\",\n      \"blockNo\": -46806813,\n      \"blockHash\": \"nisi in incididunt quis\",\n      \"epochNo\": -60608740,\n      \"epochSlotNo\": 68641533,\n      \"slot\": -54192140,\n      \"time\": \"1953-04-19T18:45:29.774Z\",\n      \"addressesInput\": [\n        \"consequat id\",\n        \"irure dolore\"\n      ],\n      \"addressesOutput\": [\n        \"dolor ea\",\n        \"magna laborum\"\n      ],\n      \"fee\": 14511110,\n      \"totalOutput\": 33083216,\n      \"balance\": 91663821,\n      \"tokens\": [\n        {\n          \"addressId\": -2475162,\n          \"address\": \"consequat\",\n          \"policy\": \"est qui in in\",\n          \"metadata\": {\n            \"url\": \"ea voluptate commodo nisi nostrud\",\n            \"ticker\": \"ex aliqua\",\n            \"decimals\": 35611207,\n            \"logo\": \"nostrud Excepteur qui\",\n            \"description\": \"cillum\"\n          },\n          \"name\": \"do fugiat reprehenderit ipsu\",\n          \"displayName\": \"occaecat ex\",\n          \"fingerprint\": \"minim d\",\n          \"quantity\": -28150056\n        },\n        {\n          \"addressId\": -70424671,\n          \"address\": \"laboris\",\n          \"policy\": \"dolor in incididunt\",\n          \"metadata\": {\n            \"url\": \"Excepteur reprehenderit\",\n            \"ticker\": \"sed Du\",\n            \"decimals\": 21239598,\n            \"logo\": \"ut enim\",\n            \"description\": \"amet officia nulla\"\n          },\n          \"name\": \"laborum reprehenderit deserunt\",\n          \"displayName\": \"eu nisi voluptate\",\n          \"fingerprint\": \"sed in\",\n          \"quantity\": 73188167\n        }\n      ]\n    },\n    {\n      \"hash\": \"occaecat non anim labore\",\n      \"blockNo\": -32853053,\n      \"blockHash\": \"pariatur sed dolore dolore\",\n      \"epochNo\": 92981403,\n      \"epochSlotNo\": 57548782,\n      \"slot\": 93943643,\n      \"time\": \"1977-06-16T06:16:08.168Z\",\n      \"addressesInput\": [\n        \"cillum enim\",\n        \"velit Duis minim aute\"\n      ],\n      \"addressesOutput\": [\n        \"officia fugiat Lorem\",\n        \"sint\"\n      ],\n      \"fee\": 87483890,\n      \"totalOutput\": 66035495,\n      \"balance\": -36872582,\n      \"tokens\": [\n        {\n          \"addressId\": 40282102,\n          \"address\": \"dolore ea Lorem eu consectetur\",\n          \"policy\": \"sed cillum\",\n          \"metadata\": {\n            \"url\": \"est exercitation irure\",\n            \"ticker\": \"ex voluptate\",\n            \"decimals\": 66574392,\n            \"logo\": \"exercitation eiusmod velit\",\n            \"description\": \"incididunt irure ut nostrud\"\n          },\n          \"name\": \"amet laboris sunt aute sint\",\n          \"displayName\": \"do\",\n          \"fingerprint\": \"mollit officia commodo enim in\",\n          \"quantity\": 96432812\n        },\n        {\n          \"addressId\": 61875921,\n          \"address\": \"dolore sit\",\n          \"policy\": \"sit dolor minim in\",\n          \"metadata\": {\n            \"url\": \"voluptate veniam laborum exercita\",\n            \"ticker\": \"dolore dolor\",\n            \"decimals\": -85521489,\n            \"logo\": \"sunt mollit nisi\",\n            \"description\": \"proident\"\n          },\n          \"name\": \"nisi aliquip anim\",\n          \"displayName\": \"cillum aute\",\n          \"fingerprint\": \"ut dolore\",\n          \"quantity\": -50581416\n        }\n      ]\n    }\n  ],\n  \"totalItems\": -30498291,\n  \"totalPages\": 48123678,\n  \"currentPage\": -67438345\n}"
                }
              ]
            },
            {
              "name": "Boundary - Get tx list of block (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(100);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/blocks/:blockId/txs?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "blocks",
                    ":blockId",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "blockId,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "blockIndex,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "blockId",
                      "value": "8864188"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get tx list of block (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/blocks/:blockId/txs?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "blocks",
                    ":blockId",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "blockId,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "blockIndex,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "blockId",
                      "value": "8864188"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get tx list of block (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/blocks/:blockId/txs?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "blocks",
                    ":blockId",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "blockId,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "blockIndex,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "blockId",
                      "value": "8864188"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get tx list of block (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/blocks/:blockId/txs?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "blocks",
                    ":blockId",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "blockId,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "blockIndex,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "blockId",
                      "value": "8864188"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get a block detail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// var stt = \"200\";\r",
                      "// stt = pm.variables.get(\"stt\");\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check totalOutput value\", function () {\r",
                      "    pm.expect((jsonData.totalOutput/10**6).toFixed(2)).to.eql((pm.environment.get(\"block_totalOutput\")/10**6).toFixed(2));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check slotLeader value\", function () {\r",
                      "    pm.expect(jsonData.slotLeader).to.include(pm.environment.get(\"block_slotLeader\"));\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData.hash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.time).to.include(moment(jsonData.time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.txCount).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.epochNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.blockNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.slotNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.epochSlotNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalFees).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalOutput).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.slotLeader).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.confirmation).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "//Scenario Compare api Get all block with api Get a block detail\r",
                      "//all variable get from API /api/v1/blocks(Get all block)\r",
                      "pm.test(\"Check hash value\", function () {\r",
                      "    pm.expect(jsonData.hash).to.include(pm.environment.get(\"block_hash\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check time value\", function () {\r",
                      "    pm.expect(jsonData.time).to.contain(pm.environment.get(\"block_time\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check txCount value\", function () {\r",
                      "    pm.expect(jsonData.txCount).to.eql(pm.environment.get(\"block_txCount\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check epochNo value\", function () {\r",
                      "    pm.expect(jsonData.epochNo).to.eql(pm.environment.get(\"block_epochNo\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check blockNo value\", function () {\r",
                      "    pm.expect(jsonData.blockNo).to.eql(pm.environment.get(\"block_blockNo\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check slotNo value\", function () {\r",
                      "    pm.expect(jsonData.slotNo).to.eql(pm.environment.get(\"block_slotNo\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check epochSlotNo value\", function () {\r",
                      "    pm.expect(jsonData.epochSlotNo).to.eql(pm.environment.get(\"block_epochSlotNo\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check totalFees value\", function () {\r",
                      "    pm.expect(jsonData.totalFees).to.eql(pm.environment.get(\"block_totalFees\"));\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/blocks/{{block_blockNo}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "blocks",
                    "{{block_blockNo}}"
                  ],
                  "variable": [
                    {
                      "key": "blockId",
                      "value": "{{block_blockNo}}",
                      "description": "(From api Get all block - v1/blocks)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/blocks/:blockId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "blocks",
                        ":blockId"
                      ],
                      "variable": [
                        {
                          "key": "blockId",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) Block number or block hash"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"hash\": \"voluptate sint est\",\n  \"time\": \"1998-06-08T15:06:17.950Z\",\n  \"txCount\": 61402728,\n  \"epochNo\": 13222585,\n  \"blockNo\": -13105216,\n  \"slotNo\": -25897769,\n  \"epochSlotNo\": -30921006,\n  \"totalFees\": 76203832,\n  \"totalOutput\": -28368648,\n  \"slotLeader\": \"reprehenderit ve\",\n  \"confirmation\": 23351045\n}"
                }
              ]
            }
          ]
        },
        {
          "name": "staking-lifecycle",
          "item": [
            {
              "name": "Generate stake key report",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "pm.environment.set(\"stakinglifecycle_id\", jsonData.id);\r",
                      "pm.environment.set(\"stakinglifecycle_stakeKey\", jsonData.stakeKey);\r",
                      "pm.environment.set(\"stakinglifecycle_username\", jsonData.username);\r",
                      "pm.environment.set(\"stakinglifecycle_reportName\", jsonData.reportName);\r",
                      "pm.environment.set(\"stakinglifecycle_fromDate\", jsonData.fromDate);\r",
                      "pm.environment.set(\"stakinglifecycle_toDate\", jsonData.toDate);\r",
                      "pm.environment.set(\"stakinglifecycle_isADATransfer\", jsonData.isADATransfer);\r",
                      "pm.environment.set(\"stakinglifecycle_isFeesPaid\", jsonData.isFeesPaid);\r",
                      "pm.environment.set(\"stakinglifecycle_eventRegistration\", jsonData.eventRegistration);\r",
                      "pm.environment.set(\"stakinglifecycle_eventDelegation\", jsonData.eventDelegation);\r",
                      "pm.environment.set(\"stakinglifecycle_eventRewards\", jsonData.eventRewards);\r",
                      "pm.environment.set(\"stakinglifecycle_eventWithdrawal\", jsonData.eventWithdrawal);\r",
                      "pm.environment.set(\"stakinglifecycle_eventDeregistration\", jsonData.eventDeregistration);\r",
                      "pm.environment.set(\"stakinglifecycle_status\", jsonData.status);\r",
                      "pm.environment.set(\"stakinglifecycle_type\", jsonData.type);\r",
                      "pm.environment.set(\"stakinglifecycle_createdAt\", jsonData.createdAt);\r",
                      "\r",
                      "pm.environment.set(\"over_stakinglifecycle_id\", (jsonData.id+1));\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "pm.environment.set(\"input_staking_lifecycle_stakeKey\", \"stake1u9h5g7m75hwhqnesgz0mkdk5qqhnhzpyfwj2l2tm6n28v4s2w8uqq\");\r",
                      "pm.environment.set(\"input_staking_lifecycle_reportName\", \"Yen test ExampleStakeKey 2\");\r",
                      "pm.environment.set(\"input_staking_lifecycle_fromDate\", \"2010/01/01 00:00:00\");\r",
                      "pm.environment.set(\"input_staking_lifecycle_toDate\", \"2023/07/12 00:00:00\");\r",
                      "pm.environment.set(\"input_staking_lifecycle_isADATransfer\", true);\r",
                      "pm.environment.set(\"input_staking_lifecycle_isFeesPaid\", true);\r",
                      "pm.environment.set(\"input_staking_lifecycle_eventRegistration\", true);\r",
                      "pm.environment.set(\"input_staking_lifecycle_eventDelegation\", true);\r",
                      "pm.environment.set(\"input_staking_lifecycle_eventRewards\", true);\r",
                      "pm.environment.set(\"input_staking_lifecycle_eventWithdrawal\", true);\r",
                      "pm.environment.set(\"input_staking_lifecycle_eventDeregistration\", true);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"stakeKey\": \"{{input_staking_lifecycle_stakeKey}}\",\n  \"reportName\": \"{{input_staking_lifecycle_reportName}}\",\n  \"fromDate\": \"{{input_staking_lifecycle_fromDate}}\",\n  \"toDate\": \"{{input_staking_lifecycle_toDate}}\",\n  \"isADATransfer\": \"{{input_staking_lifecycle_isADATransfer}}\",\n  \"isFeesPaid\": \"{{input_staking_lifecycle_isFeesPaid}}\",\n  \"eventRegistration\": \"{{input_staking_lifecycle_eventRegistration}}\",\n  \"eventDelegation\": \"{{input_staking_lifecycle_eventDelegation}}\",\n  \"eventRewards\": \"{{input_staking_lifecycle_eventRewards}}\",\n  \"eventWithdrawal\": \"{{input_staking_lifecycle_eventWithdrawal}}\",\n  \"eventDeregistration\": \"{{input_staking_lifecycle_eventDeregistration}}\"\n}",
                  "options": {
                    "raw": {
                      "headerFamily": "json",
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"stakeKey\": \"<string>\",\n  \"reportName\": \"<string>\",\n  \"fromDate\": \"<dateTime>\",\n  \"toDate\": \"<dateTime>\",\n  \"isADATransfer\": \"<boolean>\",\n  \"isFeesPaid\": \"<boolean>\",\n  \"eventRegistration\": \"<boolean>\",\n  \"eventDelegation\": \"<boolean>\",\n  \"eventRewards\": \"<boolean>\",\n  \"eventWithdrawal\": \"<boolean>\",\n  \"eventDeregistration\": \"<boolean>\"\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"id\": \"<long>\",\n  \"stakeKey\": \"<string>\",\n  \"username\": \"<string>\",\n  \"reportName\": \"<string>\",\n  \"fromDate\": \"<dateTime>\",\n  \"toDate\": \"<dateTime>\",\n  \"isADATransfer\": \"<boolean>\",\n  \"isFeesPaid\": \"<boolean>\",\n  \"eventRegistration\": \"<boolean>\",\n  \"eventDelegation\": \"<boolean>\",\n  \"eventRewards\": \"<boolean>\",\n  \"eventWithdrawal\": \"<boolean>\",\n  \"eventDeregistration\": \"<boolean>\",\n  \"status\": \"GENERATED\",\n  \"type\": \"POOL_ID\",\n  \"createdAt\": \"<dateTime>\"\n}"
                }
              ]
            },
            {
              "name": "Get stake key report detail by report id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData.id).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.stakeKey).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.username).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.reportName).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.fromDate).to.include(moment(jsonData.fromDate).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.toDate).to.include(moment(jsonData.toDate).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.isADATransfer).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.isFeesPaid).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.eventRegistration).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.eventDelegation).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.eventRewards).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.eventWithdrawal).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.eventDeregistration).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.status).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.type).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.createdAt).to.include(moment(jsonData.createdAt).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "//Scenario compare Get stake key report detail by report id api with Generate stake key report api\r",
                      "pm.test(\"Compare value between Get stake key report detail by report id api and Generate stake key report api\",function(){\r",
                      "    //all variable get from API api/v1/staking-lifecycle/report/stake-key(Generate stake key report)\r",
                      "    pm.expect(jsonData.id).to.eql(pm.environment.get(\"stakinglifecycle_id\"));    \r",
                      "    pm.expect(jsonData.stakeKey).to.include(pm.environment.get(\"stakinglifecycle_stakeKey\"));\r",
                      "    pm.expect(jsonData.username).to.include(pm.environment.get(\"stakinglifecycle_username\"));\r",
                      "    pm.expect(jsonData.reportName).to.include(pm.environment.get(\"stakinglifecycle_reportName\"));\r",
                      "    pm.expect(jsonData.fromDate).to.contain(pm.environment.get(\"stakinglifecycle_fromDate\"));\r",
                      "    pm.expect(jsonData.toDate).to.contain(pm.environment.get(\"stakinglifecycle_toDate\"));\r",
                      "    pm.expect(jsonData.isADATransfer).to.eql(pm.environment.get(\"stakinglifecycle_isADATransfer\"));\r",
                      "    pm.expect(jsonData.isFeesPaid).to.eql(pm.environment.get(\"stakinglifecycle_isFeesPaid\"));\r",
                      "    pm.expect(jsonData.eventRegistration).to.eql(pm.environment.get(\"stakinglifecycle_eventRegistration\"));\r",
                      "    pm.expect(jsonData.eventDelegation).to.eql(pm.environment.get(\"stakinglifecycle_eventDelegation\"));\r",
                      "    pm.expect(jsonData.eventRewards).to.eql(pm.environment.get(\"stakinglifecycle_eventRewards\"));\r",
                      "    pm.expect(jsonData.eventWithdrawal).to.eql(pm.environment.get(\"stakinglifecycle_eventWithdrawal\"));\r",
                      "    pm.expect(jsonData.eventDeregistration).to.eql(pm.environment.get(\"stakinglifecycle_eventDeregistration\"));\r",
                      "    pm.expect(jsonData.type).to.include(pm.environment.get(\"stakinglifecycle_type\"));\r",
                      "    pm.expect(jsonData.createdAt).to.contain(pm.environment.get(\"stakinglifecycle_createdAt\"));\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{stakinglifecycle_id}}/detail",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{stakinglifecycle_id}}",
                    "detail"
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/detail",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "staking-lifecycle",
                        "report",
                        "stake-key",
                        ":reportId",
                        "detail"
                      ],
                      "variable": [
                        {
                          "key": "reportId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"id\": \"<long>\",\n  \"stakeKey\": \"<string>\",\n  \"username\": \"<string>\",\n  \"reportName\": \"<string>\",\n  \"fromDate\": \"<dateTime>\",\n  \"toDate\": \"<dateTime>\",\n  \"isADATransfer\": \"<boolean>\",\n  \"isFeesPaid\": \"<boolean>\",\n  \"eventRegistration\": \"<boolean>\",\n  \"eventDelegation\": \"<boolean>\",\n  \"eventRewards\": \"<boolean>\",\n  \"eventWithdrawal\": \"<boolean>\",\n  \"eventDeregistration\": \"<boolean>\",\n  \"status\": \"GENERATED\",\n  \"type\": \"POOL_ID\",\n  \"createdAt\": \"<dateTime>\"\n}"
                }
              ]
            },
            {
              "name": "Over Boundary - Get stake key report detail by report id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Stake report history not found\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Stake report history not found\" );\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{over_stakinglifecycle_id}}/detail"
              },
              "response": []
            },
            {
              "name": "Get stake key report history by stake key",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].id).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].stakeKey).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].username).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].reportName).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].fromDate).to.include(moment(jsonData.data[0].fromDate).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].toDate).to.include(moment(jsonData.data[0].toDate).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].isADATransfer).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.data[0].isFeesPaid).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.data[0].eventRegistration).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.data[0].eventDelegation).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.data[0].eventRewards).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.data[0].eventWithdrawal).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.data[0].eventDeregistration).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.data[0].status).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].type).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].createdAt).to.include(moment(jsonData.data[0].createdAt).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "//Scenario\r",
                      "pm.test(\"Compare value between Generate stake key report and  Get stake key report history by stake key\",function(){\r",
                      "    //all variable get from API api/v1/staking-lifecycle/report/stake-key(Generate stake key report)\r",
                      "    var stakingLifecycle_id = pm.environment.get(\"stakinglifecycle_id\");\r",
                      "    let result = jsonData.data.find(a => a.id === stakingLifecycle_id);\r",
                      "\r",
                      "    pm.expect(result.stakeKey).to.be.include(pm.environment.get(\"stakinglifecycle_stakeKey\"));\r",
                      "    pm.expect(result.reportName).to.be.include(pm.environment.get(\"stakinglifecycle_reportName\"));\r",
                      "    pm.expect(result.fromDate).to.be.contain(pm.environment.get(\"stakinglifecycle_fromDate\"));\r",
                      "    pm.expect(result.toDate).to.be.contain(pm.environment.get(\"stakinglifecycle_toDate\"));\r",
                      "    pm.expect(result.isADATransfer).to.be.equal(pm.environment.get(\"stakinglifecycle_isADATransfer\"));\r",
                      "    pm.expect(result.isFeesPaid).to.be.equal(pm.environment.get(\"stakinglifecycle_isFeesPaid\"));\r",
                      "    pm.expect(result.eventRegistration).to.be.equal(pm.environment.get(\"stakinglifecycle_eventRegistration\"));\r",
                      "    pm.expect(result.eventDelegation).to.be.equal(pm.environment.get(\"stakinglifecycle_eventDelegation\"));\r",
                      "    pm.expect(result.eventRewards).to.be.equal(pm.environment.get(\"stakinglifecycle_eventRewards\"));\r",
                      "    pm.expect(result.eventWithdrawal).to.be.equal(pm.environment.get(\"stakinglifecycle_eventWithdrawal\"));\r",
                      "    pm.expect(result.eventDeregistration).to.be.equal(pm.environment.get(\"stakinglifecycle_eventDeregistration\"));\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:stakeKey/history?sort=id,desc",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    ":stakeKey",
                    "history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "id,desc",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:stakeKey/history?page=0&size=20&sort=<string>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "staking-lifecycle",
                        "report",
                        "stake-key",
                        ":stakeKey",
                        "history"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "20",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ],
                      "variable": [
                        {
                          "key": "stakeKey"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"id\": \"<long>\",\n      \"stakeKey\": \"<string>\",\n      \"username\": \"<string>\",\n      \"reportName\": \"<string>\",\n      \"fromDate\": \"<dateTime>\",\n      \"toDate\": \"<dateTime>\",\n      \"isADATransfer\": \"<boolean>\",\n      \"isFeesPaid\": \"<boolean>\",\n      \"eventRegistration\": \"<boolean>\",\n      \"eventDelegation\": \"<boolean>\",\n      \"eventRewards\": \"<boolean>\",\n      \"eventWithdrawal\": \"<boolean>\",\n      \"eventDeregistration\": \"<boolean>\",\n      \"status\": \"GENERATED\",\n      \"type\": \"POOL_ID\",\n      \"createdAt\": \"<dateTime>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"stakeKey\": \"<string>\",\n      \"username\": \"<string>\",\n      \"reportName\": \"<string>\",\n      \"fromDate\": \"<dateTime>\",\n      \"toDate\": \"<dateTime>\",\n      \"isADATransfer\": \"<boolean>\",\n      \"isFeesPaid\": \"<boolean>\",\n      \"eventRegistration\": \"<boolean>\",\n      \"eventDelegation\": \"<boolean>\",\n      \"eventRewards\": \"<boolean>\",\n      \"eventWithdrawal\": \"<boolean>\",\n      \"eventDeregistration\": \"<boolean>\",\n      \"status\": \"GENERATED\",\n      \"type\": \"STAKE_KEY\",\n      \"createdAt\": \"<dateTime>\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Boundary - Get stake key report history by stake key (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:stakeKey/history?size=100&sort=id,desc",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    ":stakeKey",
                    "history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,desc",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake key report history by stake key (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:stakeKey/history?size=101&sort=id,desc",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    ":stakeKey",
                    "history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,desc",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake key report history by stake key (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:stakeKey/history?size=1&sort=id,desc",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    ":stakeKey",
                    "history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,desc",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake key report history by stake key (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:stakeKey/history?size=-1&sort=id,desc",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    ":stakeKey",
                    "history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,desc",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get stake withdrawals by report id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].value).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "//Scenario Compare api get Withdrawals with api Get stake withdrawals by report id \r",
                      "pm.test(\"Get data of Get stake withdrawals by report id api\",function (){\r",
                      "    \r",
                      "    //Randome value \r",
                      "    var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));\r",
                      "    pm.environment.set(\"stakingwithdrawals_data_txHash\", jsonData.data[randomIndex].txHash)\r",
                      "    pm.environment.set(\"stakingwithdrawals_data_value\", jsonData.data[randomIndex].value)\r",
                      "    pm.environment.set(\"stakingwithdrawals_data_fee\", jsonData.data[randomIndex].fee)\r",
                      "    pm.environment.set(\"stakingwithdrawals_data_time\", jsonData.data[randomIndex].time)\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{stakinglifecycle_id}}/withdrawals",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{stakinglifecycle_id}}",
                    "withdrawals"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/withdrawals?page=0&size=20&sort=time,DESC",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "staking-lifecycle",
                        "report",
                        "stake-key",
                        ":reportId",
                        "withdrawals"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "20",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "time,DESC",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ],
                      "variable": [
                        {
                          "key": "reportId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"txHash\": \"<string>\",\n      \"value\": \"<integer>\",\n      \"fee\": \"<integer>\",\n      \"time\": \"<dateTime>\"\n    },\n    {\n      \"txHash\": \"<string>\",\n      \"value\": \"<integer>\",\n      \"fee\": \"<integer>\",\n      \"time\": \"<dateTime>\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Over Boundar - Get stake withdrawals by report id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Stake report history not found\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Stake report history not found\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{over_stakinglifecycle_id}}/withdrawals",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{over_stakinglifecycle_id}}",
                    "withdrawals"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake withdrawals by report id (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{stakinglifecycle_id}}/withdrawals?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{stakinglifecycle_id}}",
                    "withdrawals"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake withdrawals by report id (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{stakinglifecycle_id}}/withdrawals?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{stakinglifecycle_id}}",
                    "withdrawals"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake withdrawals by report id (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{stakinglifecycle_id}}/withdrawals?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{stakinglifecycle_id}}",
                    "withdrawals"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake withdrawals by report id (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{stakinglifecycle_id}}/withdrawals?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{stakinglifecycle_id}}",
                    "withdrawals"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get wallet activity by report id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].amount).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].type).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].status).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "//Scenario compare Get wallet activity by report id api with get Wallet Activities api - Step first\r",
                      "    pm.test(\"Get data by stake key of Generate stake key report api\",function(){\r",
                      "    //Randome value\r",
                      "    var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));\r",
                      "    pm.environment.set(\"stakingwallet_data_txhash\", jsonData.data[randomIndex].txHash);\r",
                      "    pm.environment.set(\"stakingwallet_data_amount\", jsonData.data[randomIndex].amount);\r",
                      "    pm.environment.set(\"stakingwallet_data_fee\", jsonData.data[randomIndex].fee);\r",
                      "    pm.environment.set(\"stakingwallet_data_time\", jsonData.data[randomIndex].time);\r",
                      "    pm.environment.set(\"stakingwallet_data_type\", jsonData.data[randomIndex].type);\r",
                      "    pm.environment.set(\"stakingwallet_data_status\", jsonData.data[randomIndex].status);\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:stakinglifecycle_id/wallet-activity",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    ":stakinglifecycle_id",
                    "wallet-activity"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakinglifecycle_id",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/wallet-activity?page=0&size=20&sort=time,DESC",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "staking-lifecycle",
                        "report",
                        "stake-key",
                        ":reportId",
                        "wallet-activity"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "20",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "time,DESC",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ],
                      "variable": [
                        {
                          "key": "reportId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"txHash\": \"<string>\",\n      \"amount\": \"<integer>\",\n      \"fee\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"type\": \"UNKNOWN\",\n      \"status\": \"FAIL\"\n    },\n    {\n      \"txHash\": \"<string>\",\n      \"amount\": \"<integer>\",\n      \"fee\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"type\": \"REWARD_WITHDRAWN\",\n      \"status\": \"PENDING\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Over Boundary - Get wallet activity by report id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Stake report history not found\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Stake report history not found\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:stakinglifecycle_id/wallet-activity",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    ":stakinglifecycle_id",
                    "wallet-activity"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakinglifecycle_id",
                      "value": "{{over_stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get wallet activity by report id (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:stakinglifecycle_id/wallet-activity?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    ":stakinglifecycle_id",
                    "wallet-activity"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakinglifecycle_id",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get wallet activity by report id (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:stakinglifecycle_id/wallet-activity?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    ":stakinglifecycle_id",
                    "wallet-activity"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakinglifecycle_id",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get wallet activity by report id (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:stakinglifecycle_id/wallet-activity?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    ":stakinglifecycle_id",
                    "wallet-activity"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakinglifecycle_id",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get wallet activity by report id (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:stakinglifecycle_id/wallet-activity?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    ":stakinglifecycle_id",
                    "wallet-activity"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakinglifecycle_id",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get stake registrations by report id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].deposit).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "//Scenario Compare api get Stake Registrations with api Get stake registrations by report id\r",
                      "pm.test(\"Compare value between api get Stake Registrations and api Get stake registrations by report id\",function (){\r",
                      "    //Random value\r",
                      "    var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));\r",
                      "    console.log(randomIndex);\r",
                      "    pm.environment.set(\"stakingregistrations_data_txHash\", jsonData.data[randomIndex].txHash);\r",
                      "    console.log(jsonData.data[randomIndex].txHash);\r",
                      "    pm.environment.set(\"stakingregistrations_data_fee\", jsonData.data[randomIndex].fee);\r",
                      "    pm.environment.set(\"stakingregistrations_data_deposit\", jsonData.data[randomIndex].deposit);\r",
                      "    pm.environment.set(\"stakingregistrations_data_time\", jsonData.data[randomIndex].time);\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/registrations",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    ":reportId",
                    "registrations"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/registrations?page=0&size=20&sort=time,DESC",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "staking-lifecycle",
                        "report",
                        "stake-key",
                        ":reportId",
                        "registrations"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "20",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "time,DESC",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ],
                      "variable": [
                        {
                          "key": "reportId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"txHash\": \"<string>\",\n      \"fee\": \"<integer>\",\n      \"deposit\": \"<long>\",\n      \"time\": \"<dateTime>\"\n    },\n    {\n      \"txHash\": \"<string>\",\n      \"fee\": \"<integer>\",\n      \"deposit\": \"<long>\",\n      \"time\": \"<dateTime>\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Over Boundary - Get stake registrations by report id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Stake report history not found\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Stake report history not found\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/registrations",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    ":reportId",
                    "registrations"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{over_stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake registrations by report id (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/registrations?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    ":reportId",
                    "registrations"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake registrations by report id (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/registrations?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    ":reportId",
                    "registrations"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake registrations by report id (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/registrations?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    ":reportId",
                    "registrations"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake registrations by report id (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/registrations?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    ":reportId",
                    "registrations"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get stake rewards by report id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].epoch).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].amount).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "//Scenario compare api get Rewards with api Get stake rewards by report id\r",
                      "pm.test(\"Get data of Get stake rewards by report id api\",function (){\r",
                      "    //Randome value \r",
                      "    var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));\r",
                      "    console.log(randomIndex);\r",
                      "    \r",
                      "    pm.environment.set(\"stakingrewards_data_epoch\", jsonData.data[randomIndex].epoch)\r",
                      "    pm.environment.set(\"stakingrewards_data_time\", jsonData.data[randomIndex].time)\r",
                      "    pm.environment.set(\"stakingrewards_data_amount\", jsonData.data[randomIndex].amount)\r",
                      "\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{stakinglifecycle_id}}/rewards",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{stakinglifecycle_id}}",
                    "rewards"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/rewards?page=0&size=20&sort=id,DESC",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "staking-lifecycle",
                        "report",
                        "stake-key",
                        ":reportId",
                        "rewards"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "20",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "id,DESC",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ],
                      "variable": [
                        {
                          "key": "reportId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"epoch\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"amount\": \"<integer>\"\n    },\n    {\n      \"epoch\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"amount\": \"<integer>\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Over Boundary - Get stake rewards by report id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Stake report history not found\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Stake report history not found\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{over_stakinglifecycle_id}}/rewards",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{over_stakinglifecycle_id}}",
                    "rewards"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake rewards by report id (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{stakinglifecycle_id}}/rewards?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{stakinglifecycle_id}}",
                    "rewards"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake rewards by report id (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{stakinglifecycle_id}}/rewards?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{stakinglifecycle_id}}",
                    "rewards"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake rewards by report id (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{stakinglifecycle_id}}/rewards?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{stakinglifecycle_id}}",
                    "rewards"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake rewards by report id (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{stakinglifecycle_id}}/rewards?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{stakinglifecycle_id}}",
                    "rewards"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Export stake key report by id",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/export?exportType=EXCEL",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    ":reportId",
                    "export"
                  ],
                  "query": [
                    {
                      "key": "exportType",
                      "value": "EXCEL"
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/export?exportType=EXCEL",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "staking-lifecycle",
                        "report",
                        "stake-key",
                        ":reportId",
                        "export"
                      ],
                      "query": [
                        {
                          "key": "exportType",
                          "value": "EXCEL"
                        }
                      ],
                      "variable": [
                        {
                          "key": "reportId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "<string>"
                }
              ]
            },
            {
              "name": "Get stake delegations by report id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].outSum).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].poolName).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].poolId).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "//Scenario compare Get stake delegations by report id with get Delegations\r",
                      "pm.test(\"Get data by report id of Get stake delegations by report id api\",function(){\r",
                      "    //Randome value\r",
                      "    var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));\r",
                      "    console.log(randomIndex);\r",
                      "    pm.environment.set(\"stakingdelegations_data_txHash\", jsonData.data[randomIndex].txHash);\r",
                      "    pm.environment.set(\"stakingdelegations_data_outSum\", jsonData.data[randomIndex].outSum);\r",
                      "    pm.environment.set(\"stakingdelegations_data_fee\", jsonData.data[randomIndex].fee);\r",
                      "    pm.environment.set(\"stakingdelegations_data_time\", jsonData.data[randomIndex].time);\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{stakinglifecycle_id}}/delegations",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{stakinglifecycle_id}}",
                    "delegations"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/delegations?page=0&size=20&sort=time,DESC",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "staking-lifecycle",
                        "report",
                        "stake-key",
                        ":reportId",
                        "delegations"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "20",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "time,DESC",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ],
                      "variable": [
                        {
                          "key": "reportId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"txHash\": \"<string>\",\n      \"outSum\": \"<integer>\",\n      \"fee\": \"<integer>\",\n      \"time\": \"<dateTime>\"\n    },\n    {\n      \"txHash\": \"<string>\",\n      \"outSum\": \"<integer>\",\n      \"fee\": \"<integer>\",\n      \"time\": \"<dateTime>\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Over Boundary - Get stake delegations by report id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Stake report history not found\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Stake report history not found\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{over_stakinglifecycle_id}}/delegations",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{over_stakinglifecycle_id}}",
                    "delegations"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake delegations by report id (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{stakinglifecycle_id}}/delegations?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{stakinglifecycle_id}}",
                    "delegations"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake delegations by report id (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{stakinglifecycle_id}}/delegations?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{stakinglifecycle_id}}",
                    "delegations"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake delegations by report id (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{stakinglifecycle_id}}/delegations?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{stakinglifecycle_id}}",
                    "delegations"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake delegations by report id (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{stakinglifecycle_id}}/delegations?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{stakinglifecycle_id}}",
                    "delegations"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get stake deregistrations by report id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].deposit).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "//Scenario Compare api get Stake De Registrations with api Get stake deregistrations by report id\r",
                      "pm.test(\"Compare value between api get Stake De Registrations and api Get stake deregistrations by report id\",function (){\r",
                      "    \r",
                      "    //Randome value \r",
                      "    var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));\r",
                      "    console.log(randomIndex);\r",
                      "    \r",
                      "    pm.environment.set(\"stakingderegistrations_data_txHash\", jsonData.data[randomIndex].txHash)\r",
                      "    pm.environment.set(\"stakingderegistrations_data_fee\", jsonData.data[randomIndex].fee)\r",
                      "    pm.environment.set(\"stakingderegistrations_data_deposit\", jsonData.data[randomIndex].deposit)\r",
                      "    pm.environment.set(\"stakingderegistrations_data_time\", jsonData.data[randomIndex].time)\r",
                      "\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{stakinglifecycle_id}}/de-registrations",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{stakinglifecycle_id}}",
                    "de-registrations"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/:reportId/de-registrations?page=0&size=20&sort=time,DESC",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "staking-lifecycle",
                        "report",
                        "stake-key",
                        ":reportId",
                        "de-registrations"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "20",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "time,DESC",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ],
                      "variable": [
                        {
                          "key": "reportId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"txHash\": \"<string>\",\n      \"fee\": \"<integer>\",\n      \"deposit\": \"<long>\",\n      \"time\": \"<dateTime>\"\n    },\n    {\n      \"txHash\": \"<string>\",\n      \"fee\": \"<integer>\",\n      \"deposit\": \"<long>\",\n      \"time\": \"<dateTime>\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Over Boundary - Get stake deregistrations by report id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 404\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Stake report history not found\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Stake report history not found\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{over_stakinglifecycle_id}}/de-registrations",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{over_stakinglifecycle_id}}",
                    "de-registrations"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake deregistrations by report id (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{stakinglifecycle_id}}/de-registrations?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{stakinglifecycle_id}}",
                    "de-registrations"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake deregistrations by report id (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{stakinglifecycle_id}}/de-registrations?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{stakinglifecycle_id}}",
                    "de-registrations"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake deregistrations by report id (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{stakinglifecycle_id}}/de-registrations?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{stakinglifecycle_id}}",
                    "de-registrations"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake deregistrations by report id (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/{{stakinglifecycle_id}}/de-registrations?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "{{stakinglifecycle_id}}",
                    "de-registrations"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{stakinglifecycle_id}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get all stake key report history",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].id).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].stakeKey).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].username).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].reportName).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].fromDate).to.include(moment(jsonData.data[0].fromDate).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].toDate).to.include(moment(jsonData.data[0].toDate).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].isADATransfer).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.data[0].isFeesPaid).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.data[0].eventRegistration).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.data[0].eventDelegation).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.data[0].eventRewards).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.data[0].eventWithdrawal).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.data[0].eventDeregistration).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.data[0].status).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].type).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].createdAt).to.include(moment(jsonData.data[0].createdAt).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "//Scenario compare Get all stake key report history with Generate stake key report\r",
                      "pm.test(\"Compare value between Get all stake key report history and Generate stake key report\",function(){\r",
                      "    //all variable get from API api/v1/staking-lifecycle/report/stake-key(Generate stake key report)\r",
                      "    var staking_id = pm.environment.get(\"stakinglifecycle_id\");\r",
                      "    let result = jsonData.data.find(a=>a.id===staking_id);\r",
                      "\r",
                      "    //console.log(result.id)\r",
                      "    pm.expect(result.stakeKey).to.be.include(pm.environment.get(\"stakinglifecycle_stakeKey\"));\r",
                      "    pm.expect(result.reportName).to.be.include(pm.environment.get(\"stakinglifecycle_reportName\"));\r",
                      "    pm.expect(result.fromDate).to.be.contain(pm.environment.get(\"stakinglifecycle_fromDate\"));\r",
                      "    pm.expect(result.toDate).to.be.contain(pm.environment.get(\"stakinglifecycle_toDate\"));\r",
                      "    pm.expect(result.isADATransfer).to.be.equal(pm.environment.get(\"stakinglifecycle_isADATransfer\"));\r",
                      "    pm.expect(result.isFeesPaid).to.be.equal(pm.environment.get(\"stakinglifecycle_isFeesPaid\"));\r",
                      "    pm.expect(result.eventRegistration).to.be.equal(pm.environment.get(\"stakinglifecycle_eventRegistration\"));\r",
                      "    pm.expect(result.eventDelegation).to.be.equal(pm.environment.get(\"stakinglifecycle_eventDelegation\"));\r",
                      "    pm.expect(result.eventRewards).to.be.equal(pm.environment.get(\"stakinglifecycle_eventRewards\"));\r",
                      "    pm.expect(result.eventWithdrawal).to.be.equal(pm.environment.get(\"stakinglifecycle_eventWithdrawal\"));\r",
                      "    pm.expect(result.eventDeregistration).to.be.equal(pm.environment.get(\"stakinglifecycle_eventDeregistration\"));\r",
                      "    pm.expect(result.type).to.be.equal(pm.environment.get(\"stakinglifecycle_type\"));\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/history",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/history?page=0&size=20&sort=<string>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "staking-lifecycle",
                        "report",
                        "stake-key",
                        "history"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "20",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"id\": \"<long>\",\n      \"stakeKey\": \"<string>\",\n      \"username\": \"<string>\",\n      \"reportName\": \"<string>\",\n      \"fromDate\": \"<dateTime>\",\n      \"toDate\": \"<dateTime>\",\n      \"isADATransfer\": \"<boolean>\",\n      \"isFeesPaid\": \"<boolean>\",\n      \"eventRegistration\": \"<boolean>\",\n      \"eventDelegation\": \"<boolean>\",\n      \"eventRewards\": \"<boolean>\",\n      \"eventWithdrawal\": \"<boolean>\",\n      \"eventDeregistration\": \"<boolean>\",\n      \"status\": \"GENERATED\",\n      \"type\": \"POOL_ID\",\n      \"createdAt\": \"<dateTime>\"\n    },\n    {\n      \"id\": \"<long>\",\n      \"stakeKey\": \"<string>\",\n      \"username\": \"<string>\",\n      \"reportName\": \"<string>\",\n      \"fromDate\": \"<dateTime>\",\n      \"toDate\": \"<dateTime>\",\n      \"isADATransfer\": \"<boolean>\",\n      \"isFeesPaid\": \"<boolean>\",\n      \"eventRegistration\": \"<boolean>\",\n      \"eventDelegation\": \"<boolean>\",\n      \"eventRewards\": \"<boolean>\",\n      \"eventWithdrawal\": \"<boolean>\",\n      \"eventDeregistration\": \"<boolean>\",\n      \"status\": \"GENERATED\",\n      \"type\": \"STAKE_KEY\",\n      \"createdAt\": \"<dateTime>\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Boundary - Get all stake key report history (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/history?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get all stake key report history (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/history?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get all stake key report history (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/history?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get all stake key report history (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/staking-lifecycle/report/stake-key/history?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "staking-lifecycle",
                    "report",
                    "stake-key",
                    "history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get report limit information",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.limitPer24hours).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.isLimitReached).to.be.a(\"boolean\");\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "url": "{{baseUrl}}/api/v1/staking-lifecycle/report/report-limit"
              },
              "response": []
            }
          ]
        },
        {
          "name": "stake-lifecycle",
          "item": [
            {
              "name": "get Wallet Activities",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].amount).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].type).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].status).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "//Scenario compare Get wallet activity by report id api with get Wallet Activities api - Step after\r",
                      "pm.test(\"Compare Get wallet activity by report id api with get Wallet Activities api\",function (){\r",
                      "    //All value: API Get wallet activity by report id(v1/staking-lifecycle/report/stake-key/:stakinglifecycle_id/wallet-activity)\r",
                      "    var tx_hash = pm.environment.get(\"stakingwallet_data_txhash\");\r",
                      "    let result = jsonData.data.find(a => a.txHash === tx_hash);\r",
                      "\r",
                      "    if (result?.txHash === tx_hash){\r",
                      "        pm.expect(result.amount).to.be.eql(pm.environment.get(\"stakingwallet_data_amount\"));\r",
                      "        pm.expect(result.fee).to.be.eql(pm.environment.get(\"stakingwallet_data_fee\"));\r",
                      "        pm.expect(result.time).to.be.include(pm.environment.get(\"stakingwallet_data_time\"));\r",
                      "        pm.expect(result.type).to.be.include(pm.environment.get(\"stakingwallet_data_type\"));\r",
                      "        pm.expect(result.status).to.be.include(pm.environment.get(\"stakingwallet_data_status\"));\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "//Scenario compare Get: get Wallet Activities api with api Get: Get transactions of stake key (stakes)\r",
                      "pm.test(\"Get value of api get Wallet Activities\",function (){\r",
                      "    //Randome value\r",
                      "    var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));\r",
                      "    pm.environment.set(\"Wallet_Activities_data_txHash\", jsonData.data[randomIndex].txHash);\r",
                      "    pm.environment.set(\"Wallet_Activities_data_amount\", jsonData.data[randomIndex].amount);\r",
                      "    pm.environment.set(\"Wallet_Activities_data_fee\", jsonData.data[randomIndex].fee);\r",
                      "    pm.environment.set(\"Wallet_Activities_time\", jsonData.data[randomIndex].time);\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakinglifecycle_stakeKey/wallet-activity",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    ":stakinglifecycle_stakeKey",
                    "wallet-activity"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "310",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakinglifecycle_stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/wallet-activity?page=0&size=20&sort=tx,DESC",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stake-lifecycle",
                        ":stakeKey",
                        "wallet-activity"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "20",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "tx,DESC",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ],
                      "variable": [
                        {
                          "key": "stakeKey"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"txHash\": \"<string>\",\n      \"amount\": \"<integer>\",\n      \"fee\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"type\": \"UNKNOWN\",\n      \"status\": \"FAIL\"\n    },\n    {\n      \"txHash\": \"<string>\",\n      \"amount\": \"<integer>\",\n      \"fee\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"type\": \"REWARD_WITHDRAWN\",\n      \"status\": \"PENDING\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Boundary - get Wallet Activities (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(100);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakinglifecycle_stakeKey/wallet-activity?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    ":stakinglifecycle_stakeKey",
                    "wallet-activity"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakinglifecycle_stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Wallet Activities (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakinglifecycle_stakeKey/wallet-activity?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    ":stakinglifecycle_stakeKey",
                    "wallet-activity"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakinglifecycle_stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Wallet Activities (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakinglifecycle_stakeKey/wallet-activity?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    ":stakinglifecycle_stakeKey",
                    "wallet-activity"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakinglifecycle_stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Wallet Activities (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakinglifecycle_stakeKey/wallet-activity?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    ":stakinglifecycle_stakeKey",
                    "wallet-activity"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakinglifecycle_stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get Rewards",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].epoch).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].amount).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].type).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "//Scenario compare Get stake rewward by report id api with get Rewards api - Step after\r",
                      "pm.test(\"Compare value between Get stake rewward by report id api with get Rewards api\",function (){\r",
                      "    //all variable get from API api/v1/staking-lifecycle/report/stake-key/:reportId/withdrawals(Get stake withdrawals by report id)\r",
                      "    var epoch = pm.environment.get(\"stakingrewards_data_epoch\");\r",
                      "    if(jsonData.hasOwnProperty('result')){\r",
                      "    let result = jsonData.data.find(a => a.epoch=== epoch);\r",
                      "    pm.expect(result.epoch).to.be.eql(pm.environment.get(\"stakingrewards_data_epoch\"));\r",
                      "    pm.expect(result.time).to.be.contain(pm.environment.get(\"stakingrewards_data_time\"));\r",
                      "    pm.expect(result.amount).to.be.eql(pm.environment.get(\"stakingrewards_data_amount\"));\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/{{stakinglifecycle_stakeKey}}/rewards",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    "{{stakinglifecycle_stakeKey}}",
                    "rewards"
                  ],
                  "query": [
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "id,ASC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/rewards?fromDate=<dateTime>&toDate=<dateTime>&page=0&size=20&sort=id,DESC",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stake-lifecycle",
                        ":stakeKey",
                        "rewards"
                      ],
                      "query": [
                        {
                          "key": "fromDate",
                          "value": "<dateTime>"
                        },
                        {
                          "key": "toDate",
                          "value": "<dateTime>"
                        },
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "20",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "id,DESC",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ],
                      "variable": [
                        {
                          "key": "stakeKey"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"epoch\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"amount\": \"<integer>\"\n    },\n    {\n      \"epoch\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"amount\": \"<integer>\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Boundary - get Rewards (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(100);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/{{stakinglifecycle_stakeKey}}/rewards?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    "{{stakinglifecycle_stakeKey}}",
                    "rewards"
                  ],
                  "query": [
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Rewards (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/{{stakinglifecycle_stakeKey}}/rewards?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    "{{stakinglifecycle_stakeKey}}",
                    "rewards"
                  ],
                  "query": [
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Rewards (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/{{stakinglifecycle_stakeKey}}/rewards?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    "{{stakinglifecycle_stakeKey}}",
                    "rewards"
                  ],
                  "query": [
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Rewards (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/{{stakinglifecycle_stakeKey}}/rewards?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    "{{stakinglifecycle_stakeKey}}",
                    "rewards"
                  ],
                  "query": [
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get Reward Activities",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].amount).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].type).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/reward-activity",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    ":stakeKey",
                    "reward-activity"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake178retqzyuu7p2dagyk90yzkwkrhrclcwsvhfqrfsesexjhgv9pw56"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/reward-activity?page=0&size=20&sort=time,DESC",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stake-lifecycle",
                        ":stakeKey",
                        "reward-activity"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "20",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "time,DESC",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ],
                      "variable": [
                        {
                          "key": "stakeKey"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"epochNo\": \"<integer>\",\n      \"amount\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"type\": \"REWARD_WITHDRAWN\"\n    },\n    {\n      \"epochNo\": \"<integer>\",\n      \"amount\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"type\": \"REWARD_WITHDRAWN\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Boundary - get Reward Activities (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/reward-activity?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    ":stakeKey",
                    "reward-activity"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake178retqzyuu7p2dagyk90yzkwkrhrclcwsvhfqrfsesexjhgv9pw56"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Reward Activities (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/reward-activity?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    ":stakeKey",
                    "reward-activity"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake178retqzyuu7p2dagyk90yzkwkrhrclcwsvhfqrfsesexjhgv9pw56"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Reward Activities (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/reward-activity?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    ":stakeKey",
                    "reward-activity"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake178retqzyuu7p2dagyk90yzkwkrhrclcwsvhfqrfsesexjhgv9pw56"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Reward Activities (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/reward-activity?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    ":stakeKey",
                    "reward-activity"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "time,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake178retqzyuu7p2dagyk90yzkwkrhrclcwsvhfqrfsesexjhgv9pw56"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get Stake Registrations",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].deposit).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "//Scenario compare Get  stake deregistrations  by report id api with get Stake De Registrations api\r",
                      "//all variable get from API api/v1/staking-lifecycle/report/stake-key/:reportId/registrations(Get stake registrations by report id)\r",
                      "pm.test(\"Others value exist\",function (){\r",
                      "    var tx_hash = pm.environment.get(\"stakingregistrations_data_txHash\");\r",
                      "    let result = jsonData.data.find(a => a.txHash === tx_hash);\r",
                      "    if (result?.txHash === tx_hash){\r",
                      "        pm.expect(result.txHash).to.be.include(pm.environment.get(\"stakingregistrations_data_txHash\"));\r",
                      "        pm.expect(result.fee).to.be.eql(pm.environment.get(\"stakingregistrations_data_fee\"));\r",
                      "        pm.expect(result.deposit).to.be.eql(pm.environment.get(\"stakingregistrations_data_deposit\"));\r",
                      "        pm.expect(result.time).to.be.contain(pm.environment.get(\"stakingregistrations_data_time\"));\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "//Scenario Compare api get Stake Registrations with api Get stake key registration transaction detail\r",
                      "pm.test(\"Get Randome value of get Registrations api\",function(){\r",
                      "    //Randome value\r",
                      "    var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));\r",
                      "    pm.environment.set(\"getRegistrations_data_txHash\", jsonData.data[randomIndex].txHash);\r",
                      "    pm.environment.set(\"getRegistrations_data_fee\", jsonData.data[randomIndex].fee);\r",
                      "    pm.environment.set(\"getRegistrations_data_deposit\", jsonData.data[randomIndex].deposit);\r",
                      "    pm.environment.set(\"getRegistrations_data_time\", jsonData.data[randomIndex].time);\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/registrations",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    ":stakeKey",
                    "registrations"
                  ],
                  "query": [
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "tx,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/registrations?txHash=<string>&fromDate=<dateTime>&toDate=<dateTime>&page=0&size=20&sort=tx,DESC",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stake-lifecycle",
                        ":stakeKey",
                        "registrations"
                      ],
                      "query": [
                        {
                          "key": "txHash",
                          "value": "<string>"
                        },
                        {
                          "key": "fromDate",
                          "value": "<dateTime>"
                        },
                        {
                          "key": "toDate",
                          "value": "<dateTime>"
                        },
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "20",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "tx,DESC",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ],
                      "variable": [
                        {
                          "key": "stakeKey"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"txHash\": \"<string>\",\n      \"fee\": \"<integer>\",\n      \"deposit\": \"<long>\",\n      \"time\": \"<dateTime>\"\n    },\n    {\n      \"txHash\": \"<string>\",\n      \"fee\": \"<integer>\",\n      \"deposit\": \"<long>\",\n      \"time\": \"<dateTime>\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Boundary - get Stake Registrations (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/registrations?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    ":stakeKey",
                    "registrations"
                  ],
                  "query": [
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "tx,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake178retqzyuu7p2dagyk90yzkwkrhrclcwsvhfqrfsesexjhgv9pw56"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Stake Registrations (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/registrations?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    ":stakeKey",
                    "registrations"
                  ],
                  "query": [
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "tx,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake178retqzyuu7p2dagyk90yzkwkrhrclcwsvhfqrfsesexjhgv9pw56"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Stake Registrations (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/registrations?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    ":stakeKey",
                    "registrations"
                  ],
                  "query": [
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "tx,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake178retqzyuu7p2dagyk90yzkwkrhrclcwsvhfqrfsesexjhgv9pw56"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Stake Registrations (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/registrations?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    ":stakeKey",
                    "registrations"
                  ],
                  "query": [
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "tx,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake178retqzyuu7p2dagyk90yzkwkrhrclcwsvhfqrfsesexjhgv9pw56"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get stake key registration transaction detail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.deposit).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.time).to.include(moment(jsonData.time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.joinDepositPaid).to.be.a(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "//Scenario Compare api get Stake Registrations with api Get stake key registration transaction detail\r",
                      "//all variable get from API /api/v1/stake-lifecycle/:stakeKey/registrations(get Stake Registrations)\r",
                      "pm.test(\"Compare value of api get Stake Registrations with api Get stake key registration transaction detail\", function () {\r",
                      "    pm.expect(jsonData.txHash).to.include(pm.environment.get(\"getRegistrations_data_txHash\"));\r",
                      "    pm.expect(jsonData.fee).to.eql(pm.environment.get(\"getRegistrations_data_fee\"));\r",
                      "    pm.expect(jsonData.deposit).to.eql(pm.environment.get(\"getRegistrations_data_deposit\"));\r",
                      "    pm.expect(jsonData.time).to.contain(pm.environment.get(\"getRegistrations_data_time\"));\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/registrations/:hash",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    ":stakeKey",
                    "registrations",
                    ":hash"
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}"
                    },
                    {
                      "key": "hash",
                      "value": "{{getRegistrations_data_txHash}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/registrations/:hash",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stake-lifecycle",
                        ":stakeKey",
                        "registrations",
                        ":hash"
                      ],
                      "variable": [
                        {
                          "key": "stakeKey",
                          "value": "{{stakinglifecycle_stakeKey}}"
                        },
                        {
                          "key": "hash",
                          "value": "{{getRegistrations_data_txHash}}"
                        }
                      ]
                    }
                  },
                  "_postman_previewlanguage": "Text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                }
              ]
            },
            {
              "name": "get Delegations",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].outSum).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].poolName).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].poolId).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "//Scenario compare Get stake delegations by report id with get Delegations \r",
                      "pm.test(\"Check values of Get stake delegations by report id exist\",function (){\r",
                      "    //all variable get from API api/v1/staking-lifecycle/report/stake-key/:reportId/delegations(Get stake delegations by report id)\r",
                      "    var tx_Hash = pm.environment.get(\"stakingdelegations_data_txHash\");\r",
                      "    let result = jsonData.data.find(a => a.txHash=== tx_Hash);\r",
                      "    if (result?.txHash === tx_Hash){\r",
                      "    pm.expect(result.txHash).to.be.include(pm.environment.get(\"stakingdelegations_data_txHash\"));\r",
                      "    pm.expect(result.outSum).to.be.eql(pm.environment.get(\"stakingdelegations_data_outSum\"));\r",
                      "    pm.expect(result.fee).to.be.eql(pm.environment.get(\"stakingdelegations_data_fee\"));\r",
                      "    pm.expect(result.time).to.be.include(pm.environment.get(\"stakingdelegations_data_time\"));\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "//Scenario compare get Delegation Detail with get Delegations + //Scenario compare get Delegation with Get delegation history of stake key\r",
                      "pm.test(\"Get Randome value of get Delegations api\",function(){\r",
                      "    //Randome value\r",
                      "    var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));\r",
                      "    pm.environment.set(\"getDelegations_data_txHash\", jsonData.data[randomIndex].txHash);\r",
                      "    pm.environment.set(\"getDelegations_data_outSum\", jsonData.data[randomIndex].outSum);\r",
                      "    pm.environment.set(\"getDelegations_data_fee\", jsonData.data[randomIndex].fee);\r",
                      "    pm.environment.set(\"getDelegations_data_time\", jsonData.data[randomIndex].time);\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/{{stakinglifecycle_stakeKey}}/delegations",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    "{{stakinglifecycle_stakeKey}}",
                    "delegations"
                  ],
                  "query": [
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "tx,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/delegations?txHash=<string>&fromDate=<dateTime>&toDate=<dateTime>&page=0&size=20&sort=tx,DESC",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stake-lifecycle",
                        ":stakeKey",
                        "delegations"
                      ],
                      "query": [
                        {
                          "key": "txHash",
                          "value": "<string>"
                        },
                        {
                          "key": "fromDate",
                          "value": "<dateTime>"
                        },
                        {
                          "key": "toDate",
                          "value": "<dateTime>"
                        },
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "20",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "tx,DESC",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ],
                      "variable": [
                        {
                          "key": "stakeKey"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"txHash\": \"<string>\",\n      \"outSum\": \"<integer>\",\n      \"fee\": \"<integer>\",\n      \"time\": \"<dateTime>\"\n    },\n    {\n      \"txHash\": \"<string>\",\n      \"outSum\": \"<integer>\",\n      \"fee\": \"<integer>\",\n      \"time\": \"<dateTime>\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Boundary - get Delegations (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/{{stakinglifecycle_stakeKey}}/delegations?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    "{{stakinglifecycle_stakeKey}}",
                    "delegations"
                  ],
                  "query": [
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "tx,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Delegations (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/{{stakinglifecycle_stakeKey}}/delegations?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    "{{stakinglifecycle_stakeKey}}",
                    "delegations"
                  ],
                  "query": [
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "tx,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Delegations (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/{{stakinglifecycle_stakeKey}}/delegations?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    "{{stakinglifecycle_stakeKey}}",
                    "delegations"
                  ],
                  "query": [
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "tx,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Delegations (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/{{stakinglifecycle_stakeKey}}/delegations?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    "{{stakinglifecycle_stakeKey}}",
                    "delegations"
                  ],
                  "query": [
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "tx,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get Delegation Detail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData.txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.blockNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.epoch).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.outSum).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.poolId).to.be.a(\"string\");\r",
                      "    pm.expect(typeof jsonData.poolName).to.be.oneOf([ 'object', 'string']);\r",
                      "    pm.expect(jsonData.time).to.include(moment(jsonData.time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.stakeTotalAmount).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "//Scenario compare get Delegation Detail with get Delegations\r",
                      "//all variable get from API api/v1/stake-lifecycle/:stakeKey/delegations(get Delegations)\r",
                      "pm.test(\"Check txHash value\", function () {\r",
                      "    pm.expect(jsonData.txHash).to.include(pm.environment.get(\"getDelegations_data_txHash\"));\r",
                      "});\r",
                      "pm.test(\"Check outSum value\", function () {\r",
                      "    pm.expect(jsonData.outSum).to.eql(pm.environment.get(\"getDelegations_data_outSum\"));\r",
                      "});\r",
                      "pm.test(\"Check fee value\", function () {\r",
                      "    pm.expect(jsonData.fee).to.eql(pm.environment.get(\"getDelegations_data_fee\"));\r",
                      "});\r",
                      "pm.test(\"Check time value\", function () {\r",
                      "    pm.expect(jsonData.time).to.contain(pm.environment.get(\"getDelegations_data_time\"));\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/delegations/:hash",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    ":stakeKey",
                    "delegations",
                    ":hash"
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    },
                    {
                      "key": "hash",
                      "value": "{{getDelegations_data_txHash}}",
                      "description": "(From api: get Delegations_v1/stake-lifecycle/:stakeKey/delegations)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/delegations/:hash",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stake-lifecycle",
                        ":stakeKey",
                        "delegations",
                        ":hash"
                      ],
                      "variable": [
                        {
                          "key": "stakeKey"
                        },
                        {
                          "key": "hash"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"txHash\": \"<string>\",\n  \"blockNo\": \"<long>\",\n  \"epoch\": \"<integer>\",\n  \"outSum\": \"<integer>\",\n  \"fee\": \"<integer>\",\n  \"poolId\": \"<string>\",\n  \"poolName\": \"<string>\",\n  \"time\": \"<dateTime>\",\n  \"stakeTotalAmount\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "get Stake De Registrations",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].deposit).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "//Scenario compare Get  stake deregistrations  by report id api with get Stake De Registrations api - Step after\r",
                      "//all variable get from API api/v1/staking-lifecycle/report/stake-key/:reportId/de-registrations(Get stake deregistrations by report id)\r",
                      "pm.test(\"Others value exist\",function (){\r",
                      "    var tx_hash = pm.environment.get(\"stakingderegistrations_data_txHash\");\r",
                      "    let result = jsonData.data.find(a => a.txHash === tx_hash);\r",
                      "\r",
                      "    if (result?.txHash === tx_hash){    \r",
                      "        pm.expect(result.txHash).to.be.include(pm.environment.get(\"stakingderegistrations_data_txHash\"));\r",
                      "        pm.expect(result.fee).to.be.eql(pm.environment.get(\"stakingderegistrations_data_fee\"));\r",
                      "        pm.expect(result.deposit).to.be.eql(pm.environment.get(\"stakingderegistrations_data_deposit\"));\r",
                      "        pm.expect(result.time).to.be.contain(pm.environment.get(\"stakingderegistrations_data_time\"));\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "//Scenario Compare api get Stake De Registrations with api Get stake key de-registration transaction detail\r",
                      "pm.test(\"Get Randome value of get De Registrations api\",function(){\r",
                      "    //Randome value\r",
                      "    var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));\r",
                      "    pm.environment.set(\"getDeRegistrations_data_txHash\", jsonData.data[randomIndex].txHash);\r",
                      "    pm.environment.set(\"getDeRegistrations_data_fee\", jsonData.data[randomIndex].fee);\r",
                      "    pm.environment.set(\"getDeRegistrations_data_deposit\", jsonData.data[randomIndex].deposit);\r",
                      "    pm.environment.set(\"getDeRegistrations_data_time\", jsonData.data[randomIndex].time);\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/{{stakinglifecycle_stakeKey}}/de-registrations",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    "{{stakinglifecycle_stakeKey}}",
                    "de-registrations"
                  ],
                  "query": [
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "tx,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/de-registrations?txHash=<string>&fromDate=<dateTime>&toDate=<dateTime>&page=0&size=20&sort=tx,DESC",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stake-lifecycle",
                        ":stakeKey",
                        "de-registrations"
                      ],
                      "query": [
                        {
                          "key": "txHash",
                          "value": "<string>"
                        },
                        {
                          "key": "fromDate",
                          "value": "<dateTime>"
                        },
                        {
                          "key": "toDate",
                          "value": "<dateTime>"
                        },
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "20",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "tx,DESC",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ],
                      "variable": [
                        {
                          "key": "stakeKey"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"txHash\": \"<string>\",\n      \"fee\": \"<integer>\",\n      \"deposit\": \"<long>\",\n      \"time\": \"<dateTime>\"\n    },\n    {\n      \"txHash\": \"<string>\",\n      \"fee\": \"<integer>\",\n      \"deposit\": \"<long>\",\n      \"time\": \"<dateTime>\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Boundary - get Stake De Registrations (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/{{stakinglifecycle_stakeKey}}/de-registrations?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    "{{stakinglifecycle_stakeKey}}",
                    "de-registrations"
                  ],
                  "query": [
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "tx,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Stake De Registrations (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/{{stakinglifecycle_stakeKey}}/de-registrations?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    "{{stakinglifecycle_stakeKey}}",
                    "de-registrations"
                  ],
                  "query": [
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "tx,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Stake De Registrations (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/{{stakinglifecycle_stakeKey}}/de-registrations?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    "{{stakinglifecycle_stakeKey}}",
                    "de-registrations"
                  ],
                  "query": [
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "tx,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Stake De Registrations (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/{{stakinglifecycle_stakeKey}}/de-registrations?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    "{{stakinglifecycle_stakeKey}}",
                    "de-registrations"
                  ],
                  "query": [
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "tx,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get stake key de-registration transaction detail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.deposit).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.time).to.include(moment(jsonData.time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.joinDepositPaid).to.be.a(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "//Scenario Compare api get Stake De Registrations with api Get stake key de-registration transaction detail\r",
                      "//all variable get from API /api/v1/stake-lifecycle/{{stakinglifecycle_stakeKey}}/de-registrations(get Stake De Registrations)\r",
                      "pm.test(\"Compare value of api get Stake De Registrations with api Get stake key de-registration transaction detail\", function () {\r",
                      "    pm.expect(jsonData.txHash).to.include(pm.environment.get(\"getDeRegistrations_data_txHash\"));\r",
                      "    pm.expect(jsonData.fee).to.eql(pm.environment.get(\"getDeRegistrations_data_fee\"));\r",
                      "    pm.expect(jsonData.deposit).to.eql(pm.environment.get(\"getDeRegistrations_data_deposit\"));\r",
                      "    pm.expect(jsonData.time).to.contain(pm.environment.get(\"getDeRegistrations_data_time\"));\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/de-registrations/:hash",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    ":stakeKey",
                    "de-registrations",
                    ":hash"
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}"
                    },
                    {
                      "key": "hash",
                      "value": "{{getDeRegistrations_data_txHash}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/de-registrations/:hash",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stake-lifecycle",
                        ":stakeKey",
                        "de-registrations",
                        ":hash"
                      ],
                      "variable": [
                        {
                          "key": "stakeKey",
                          "value": "stake1u9h5g7m75hwhqnesgz0mkdk5qqhnhzpyfwj2l2tm6n28v4s2w8uqq"
                        },
                        {
                          "key": "hash",
                          "value": "107762e701739cebc997fa635542a2a350ec9efa51030679fe73b38e3e1946af"
                        }
                      ]
                    }
                  },
                  "_postman_previewlanguage": "Text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                }
              ]
            },
            {
              "name": "get Stake Life Cycle",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check hasRegistration value\", function () {\r",
                      "    pm.expect(jsonData.hasRegistration).to.eql(pm.environment.get(\"stakinglifecycle_eventRegistration\"));\r",
                      "});\r",
                      "pm.test(\"Check hasDelegation value\", function () {\r",
                      "    pm.expect(jsonData.hasDelegation).to.eql(pm.environment.get(\"stakinglifecycle_eventDelegation\"));\r",
                      "});\r",
                      "pm.test(\"Check hashRewards value\", function () {\r",
                      "    pm.expect(jsonData.hashRewards).to.eql(pm.environment.get(\"stakinglifecycle_eventRewards\"));\r",
                      "});\r",
                      "pm.test(\"Check hasWithdrawal value\", function () {\r",
                      "    pm.expect(jsonData.hasWithdrawal).to.eql(pm.environment.get(\"stakinglifecycle_eventWithdrawal\"));\r",
                      "});\r",
                      "pm.test(\"Check hasDeRegistration value\", function () {\r",
                      "    pm.expect(jsonData.hasDeRegistration).to.eql(pm.environment.get(\"stakinglifecycle_eventDeregistration\"));\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData.hasRegistration).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.hasDelegation).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.hashRewards).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.hasWithdrawal).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.hasDeRegistration).to.be.a(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    ":stakeKey"
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stake-lifecycle",
                        ":stakeKey"
                      ],
                      "variable": [
                        {
                          "key": "stakeKey"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"hasRegistration\": \"<boolean>\",\n  \"hasDelegation\": \"<boolean>\",\n  \"hashRewards\": \"<boolean>\",\n  \"hasWithdrawal\": \"<boolean>\",\n  \"hasDeRegistration\": \"<boolean>\"\n}"
                }
              ]
            },
            {
              "name": "get Withdrawals",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].value).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "//Scenario compare get get Detail Withdrawal with get Withdrawals + Scenario compare get Withdrawal with Get withdrawal transaction of stake key\r",
                      "pm.test(\"Get Randome value of get Withdrawals api\",function(){\r",
                      "    //Randome value\r",
                      "    var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));\r",
                      "    console.log(randomIndex);\r",
                      "    pm.environment.set(\"getWithdrawals_data_txHash\", jsonData.data[randomIndex].txHash);\r",
                      "    pm.environment.set(\"getWithdrawals_data_value\", jsonData.data[randomIndex].value);\r",
                      "    pm.environment.set(\"getWithdrawals_data_fee\", jsonData.data[randomIndex].fee);\r",
                      "    pm.environment.set(\"getWithdrawals_data_time\", jsonData.data[randomIndex].time);\r",
                      "});\r",
                      "\r",
                      "//scenario compare value of get Withdrawals api and Get stake withdrawals by report id api\r",
                      "pm.test(\"Compare value of get Withdrawals api and Get stake  withdrawals by report id api \",function (){\r",
                      "    //all variable get from API api/v1/staking-lifecycle/report/stake-key/:reportId/withdrawals(Get stake withdrawals by report id)\r",
                      "    var txHash = pm.environment.get(\"stakingwithdrawals_data_txHash\");\r",
                      "    let result = jsonData.data.find(a => a.txHash === txHash);\r",
                      "\r",
                      "    if (result?.txHash === txHash){\r",
                      "        pm.expect(result.txHash).to.include(pm.environment.get(\"stakingwithdrawals_data_txHash\"));\r",
                      "        pm.expect(result.value).to.eql(pm.environment.get(\"stakingwithdrawals_data_value\"));\r",
                      "        pm.expect(result.fee).to.eql(pm.environment.get(\"stakingwithdrawals_data_fee\"));\r",
                      "        pm.expect(result.time).to.contain(pm.environment.get(\"stakingwithdrawals_data_time\"));\r",
                      "    };\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/{{stakinglifecycle_stakeKey}}/withdrawals",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    "{{stakinglifecycle_stakeKey}}",
                    "withdrawals"
                  ],
                  "query": [
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/withdrawals?txHash=<string>&fromDate=<dateTime>&toDate=<dateTime>&page=0&size=20&sort=id,DESC",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stake-lifecycle",
                        ":stakeKey",
                        "withdrawals"
                      ],
                      "query": [
                        {
                          "key": "txHash",
                          "value": "<string>"
                        },
                        {
                          "key": "fromDate",
                          "value": "<dateTime>"
                        },
                        {
                          "key": "toDate",
                          "value": "<dateTime>"
                        },
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "20",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "id,DESC",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ],
                      "variable": [
                        {
                          "key": "stakeKey"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"txHash\": \"<string>\",\n      \"value\": \"<integer>\",\n      \"fee\": \"<integer>\",\n      \"time\": \"<dateTime>\"\n    },\n    {\n      \"txHash\": \"<string>\",\n      \"value\": \"<integer>\",\n      \"fee\": \"<integer>\",\n      \"time\": \"<dateTime>\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Boundary - get Withdrawals (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/{{stakinglifecycle_stakeKey}}/withdrawals?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    "{{stakinglifecycle_stakeKey}}",
                    "withdrawals"
                  ],
                  "query": [
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Withdrawals (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/{{stakinglifecycle_stakeKey}}/withdrawals?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    "{{stakinglifecycle_stakeKey}}",
                    "withdrawals"
                  ],
                  "query": [
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Withdrawals (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/{{stakinglifecycle_stakeKey}}/withdrawals?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    "{{stakinglifecycle_stakeKey}}",
                    "withdrawals"
                  ],
                  "query": [
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Withdrawals (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/{{stakinglifecycle_stakeKey}}/withdrawals?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    "{{stakinglifecycle_stakeKey}}",
                    "withdrawals"
                  ],
                  "query": [
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get Detail Withdrawal",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData.txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.amount).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.time).to.include(moment(jsonData.time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.stakeTotalAmount).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.stakeRewardAvailable).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "//Scenario compare get Detail Withdrawal api with get Withdrawals api\r",
                      "//all variable get from API api/v1/stake-lifecycle/:stakeKey/withdrawals(get Withdrawals)\r",
                      "pm.test(\"Check txHash value\", function () {\r",
                      "    pm.expect(jsonData.txHash).to.include(pm.environment.get(\"getWithdrawals_data_txHash\"));\r",
                      "});\r",
                      "pm.test(\"Check amount value\", function () {\r",
                      "    pm.expect(jsonData.amount).to.eql(pm.environment.get(\"getWithdrawals_data_value\"));\r",
                      "});\r",
                      "pm.test(\"Check fee value\", function () {\r",
                      "    pm.expect(jsonData.fee).to.eql(pm.environment.get(\"getWithdrawals_data_fee\"));\r",
                      "});\r",
                      "pm.test(\"Check time value\", function () {\r",
                      "    pm.expect(jsonData.time).to.contain(pm.environment.get(\"getWithdrawals_data_time\"));\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/withdrawals/:hash",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stake-lifecycle",
                    ":stakeKey",
                    "withdrawals",
                    ":hash"
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    },
                    {
                      "key": "hash",
                      "value": "{{getWithdrawals_data_txHash}}",
                      "description": "(From api get Withdrawals_v1/stake-lifecycle/:stakeKey/withdrawals)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stake-lifecycle/:stakeKey/withdrawals/:hash",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stake-lifecycle",
                        ":stakeKey",
                        "withdrawals",
                        ":hash"
                      ],
                      "variable": [
                        {
                          "key": "stakeKey"
                        },
                        {
                          "key": "hash"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"txHash\": \"<string>\",\n  \"amount\": \"<integer>\",\n  \"fee\": \"<integer>\",\n  \"time\": \"<dateTime>\",\n  \"stakeTotalAmount\": \"<integer>\",\n  \"stakeRewardAvailable\": \"<integer>\"\n}"
                }
              ]
            }
          ]
        },
        {
          "name": "stakes",
          "item": [
            {
              "name": "get Data For Stake Registration",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "var current_page = 0\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Compare Currentpage\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
                      "});\r",
                      "\r",
                      "//Compare format dynamic data\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].txTime).to.include(moment(jsonData.data[0].txTime).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].block).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].epoch).to.be.a(\"number\");\r",
                      "    pm.expect(typeof jsonData.data[0].slotNo).to.be.oneOf([ 'object', 'number']);\r",
                      "    pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].stakeKey).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/registration",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    "registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stakes/registration?page=0&size=20&sort=ex&sort=nisi de",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stakes",
                        "registration"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "20"
                        },
                        {
                          "key": "sort",
                          "value": "ex"
                        },
                        {
                          "key": "sort",
                          "value": "nisi de"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"txId\": -47415799,\n      \"txHash\": \"Lorem id\",\n      \"txTime\": \"2012-11-25T02:34:29.611Z\",\n      \"block\": 42308495,\n      \"epoch\": 27968414,\n      \"slotNo\": 76405842,\n      \"epochSlotNo\": 95611944,\n      \"stakeKey\": \"ullamco\"\n    },\n    {\n      \"txId\": 83570792,\n      \"txHash\": \"non pariatur\",\n      \"txTime\": \"2013-05-23T00:36:49.582Z\",\n      \"block\": 28418594,\n      \"epoch\": 86215319,\n      \"slotNo\": -44986141,\n      \"epochSlotNo\": -96199069,\n      \"stakeKey\": \"nulla ex in labore\"\n    }\n  ],\n  \"totalItems\": 61631532,\n  \"totalPages\": 77901863,\n  \"currentPage\": 80781008\n}"
                }
              ]
            },
            {
              "name": "Boundary - get Data For Stake Registration (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(100);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/registration?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    "registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Data For Stake Registration (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/registration?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    "registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Data For Stake Registration (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/registration?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    "registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Data For Stake Registration (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/registration?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    "registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get Data For Stake De Registration",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "var current_page = 0\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Compare Currentpage\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
                      "});\r",
                      "\r",
                      "//Compare format dynamic data\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].txTime).to.include(moment(jsonData.data[0].txTime).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].block).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].epoch).to.be.a(\"number\");\r",
                      "    pm.expect(typeof jsonData.data[0].slotNo).to.be.oneOf([ 'object', 'number']);\r",
                      "    pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].stakeKey).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/de-registration",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    "de-registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stakes/de-registration?page=0&size=20&sort=ex&sort=nisi de",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stakes",
                        "de-registration"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "20"
                        },
                        {
                          "key": "sort",
                          "value": "ex"
                        },
                        {
                          "key": "sort",
                          "value": "nisi de"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"txId\": -98621904,\n      \"txHash\": \"enim eiusmod proident\",\n      \"txTime\": \"1994-11-19T17:30:14.481Z\",\n      \"block\": 87783625,\n      \"epoch\": -36549353,\n      \"slotNo\": -94342578,\n      \"epochSlotNo\": -43738260,\n      \"stakeKey\": \"aliqua esse dolor\"\n    },\n    {\n      \"txId\": -31721255,\n      \"txHash\": \"nulla cillum mollit sed\",\n      \"txTime\": \"2022-10-01T23:31:16.326Z\",\n      \"block\": 97540724,\n      \"epoch\": -89703749,\n      \"slotNo\": -61602724,\n      \"epochSlotNo\": 27497566,\n      \"stakeKey\": \"sed qui dolor sit\"\n    }\n  ],\n  \"totalItems\": 24560076,\n  \"totalPages\": 21076638,\n  \"currentPage\": -72670358\n}"
                }
              ]
            },
            {
              "name": "Boundary - get Data For Stake De Registration (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(100);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/de-registration?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    "de-registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Data For Stake De Registration (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/de-registration?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    "de-registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Data For Stake De Registration (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/de-registration?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    "de-registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Data For Stake De Registration (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/de-registration?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    "de-registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get active stake, live stake and total stake",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "//Compare format dynamic data\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    pm.expect(jsonData.activeStake).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.liveStake).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": "{{baseUrl}}/api/v1/stakes/analytics"
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": "{{baseUrl}}/api/v1/stakes/analytics"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"activeStake\": -45589361,\n  \"liveStake\": 67412918\n}"
                }
              ]
            },
            {
              "name": "Get stake balance analytics",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of response\", () => {\r",
                      "    pm.expect(jsonData[0].epoch).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData[0].value).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/analytics-reward/:stakeKey",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    "analytics-reward",
                    ":stakeKey"
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake179zqs90gw5qr96e8960dkcv5c3wd2f523d3rw742agzlfngedxtzl"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stakes/analytics-reward/:stakeKey",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stakes",
                        "analytics-reward",
                        ":stakeKey"
                      ],
                      "variable": [
                        {
                          "key": "stakeKey"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "[\n  {\n    \"epoch\": \"<integer>\",\n    \"value\": \"<integer>\"\n  },\n  {\n    \"epoch\": \"<integer>\",\n    \"value\": \"<integer>\"\n  }\n]"
                }
              ]
            },
            {
              "name": "Get stake balance analytics",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json().data;\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData[0].date).to.include(moment(jsonData[0].date).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData[0].value).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/analytics-balance/:stakeKey/:type",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    "analytics-balance",
                    ":stakeKey",
                    ":type"
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake179zqs90gw5qr96e8960dkcv5c3wd2f523d3rw742agzlfngedxtzl"
                    },
                    {
                      "key": "type",
                      "value": "ONE_MONTH"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stakes/analytics-balance/:stakeKey/:type",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stakes",
                        "analytics-balance",
                        ":stakeKey",
                        ":type"
                      ],
                      "variable": [
                        {
                          "key": "stakeKey"
                        },
                        {
                          "key": "type"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "[\n  {\n    \"date\": \"<date>\",\n    \"value\": \"<integer>\"\n  },\n  {\n    \"date\": \"<date>\",\n    \"value\": \"<integer>\"\n  }\n]"
                }
              ]
            },
            {
              "name": "Get top delegators",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "var current_page = 0\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Compare Currentpage\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
                      "});\r",
                      "\r",
                      "//Compare format dynamic data\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].stakeKey).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].balance).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].poolId).to.be.a(\"string\");\r",
                      "    if(jsonData.data.tickerName){\r",
                      "        pm.expect(typeof jsonData.data[0].tickerName).to.be.oneOf([ 'object', 'string']);\r",
                      "    }\r",
                      "    if(jsonData.data.poolName){\r",
                      "        pm.expect(typeof jsonData.data[0].poolName).to.be.oneOf([ 'object', 'string']);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "//Scenario Compare api: Get top delegators with api: Get a stake detail by stake key\r",
                      "pm.test(\"Get data of Get top delegators api\",function (){   \r",
                      "    //Randome value\r",
                      "    var randomNumber = Math.floor(Math.random() * jsonData.data.length);\r",
                      "\r",
                      "    pm.environment.set(\"stakes_stakeKey\", jsonData.data[randomNumber].stakeKey);\r",
                      "    pm.environment.set(\"stakes_balance\", jsonData.data[randomNumber].balance);\r",
                      "    pm.environment.set(\"stakes_poolId\", jsonData.data[randomNumber].poolId);\r",
                      "    pm.environment.set(\"stakes_tickerName\", jsonData.data[randomNumber].tickerName);\r",
                      "    pm.environment.set(\"stakes_poolName\", jsonData.data[randomNumber].poolName);\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/top-delegators",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    "top-delegators"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stakes/top-delegators?page=0&size=20&sort=ex&sort=nisi de",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stakes",
                        "top-delegators"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "20"
                        },
                        {
                          "key": "sort",
                          "value": "ex"
                        },
                        {
                          "key": "sort",
                          "value": "nisi de"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"stakeKey\": \"dolore dolore\",\n      \"balance\": 28696572,\n      \"poolId\": \"fugiat sunt\",\n      \"tickerName\": \"aute aliqua\",\n      \"poolName\": \"exercitation sunt non\"\n    },\n    {\n      \"stakeKey\": \"irure\",\n      \"balance\": 36214076,\n      \"poolId\": \"dolor \",\n      \"tickerName\": \"veniam culpa cillum ullamco\",\n      \"poolName\": \"ea aliquip cupidatat deserunt\"\n    }\n  ],\n  \"totalItems\": -41501594,\n  \"totalPages\": -34602546,\n  \"currentPage\": 94159274\n}"
                }
              ]
            },
            {
              "name": "Boundary- Get top delegators (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/top-delegators?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    "top-delegators"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary- Get top delegators (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/top-delegators?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    "top-delegators"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary- Get top delegators (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/top-delegators?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    "top-delegators"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary- Get top delegators (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/top-delegators?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    "top-delegators"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get a stake detail by stake key",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "//Waiting data to active -> In progress checking\r",
                      "// pm.test(\"Compare totalStake\", function () {\r",
                      "//     pm.expect(jsonData.totalStake).to.eql(pm.environment.get(\"stakes_balance\"));\r",
                      "// });\r",
                      "\r",
                      "//Compare format dynamic data\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    pm.expect(jsonData.status).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.stakeAddress).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.totalStake).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.rewardAvailable).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.rewardWithdrawn).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.pool).to.be.an(\"object\");\r",
                      "    if (jsonData.pool.tickerName) {\r",
                      "        pm.expect(typeof jsonData.pool.tickerName).to.be.oneOf(['object', 'string']);\r",
                      "    }\r",
                      "    if (jsonData.pool.poolName) {\r",
                      "        pm.expect(typeof jsonData.pool.poolName).to.be.oneOf(['object', 'string']);\r",
                      "    }\r",
                      "    pm.expect(jsonData.pool.poolId).to.be.a(\"string\");\r",
                      "    if (jsonData.pool.logoUrl) {\r",
                      "        pm.expect(typeof jsonData.pool.logoUrl).to.be.oneOf(['object', 'string']);\r",
                      "    }\r",
                      "    if (jsonData.pool.iconUrl) {\r",
                      "        pm.expect(typeof jsonData.pool.iconUrl).to.be.oneOf(['object', 'string']);\r",
                      "    }\r",
                      "    pm.expect(jsonData.rewardPools).to.be.an(\"array\");\r",
                      "});\r",
                      "\r",
                      "// Scenario Compare api: Get top delegators with api: Get a stake detail by stake key\r",
                      "//all variable get from API api/v1/stakes/top-delegators(Get top delegators)\r",
                      "pm.test(\"Compare Stakeaddress\", function () {\r",
                      "    pm.expect(jsonData.stakeAddress).to.include(pm.environment.get(\"stakes_stakeKey\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Compare PoolId\", function () {\r",
                      "    pm.expect(jsonData.pool.poolId).to.include(pm.environment.get(\"stakes_poolId\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Compare Name\", function () {\r",
                      "    if (jsonData.hasOwnProperty('poolName')) {\r",
                      "        pm.expect(jsonData.pool.poolName).to.eql(pm.environment.get(\"stakes_poolName\"))\r",
                      "            || pm.expect(jsonData.pool.poolName).to.include(pm.environment.get(\"stakes_poolName\"));\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Compare tickerName\", function () {\r",
                      "    if (jsonData.hasOwnProperty('tickerName')) {\r",
                      "        pm.expect(jsonData.pool.tickerName).to.eql(pm.environment.get(\"stakes_tickerName\"))\r",
                      "            || pm.expect(jsonData.pool.tickerName).to.include(pm.environment.get(\"stakes_tickerName\"))\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "//Scenario compare api Get: pool Owner with api Get: Get a stake detail by stake key (stakes)\r",
                      "pm.test(\"Get data of Get a stake detail by stake key api\", function () {\r",
                      "    pm.environment.set(\"stake_pool_poolId\", jsonData.pool.poolId);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/{{stakes_stakeKey}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    "{{stakes_stakeKey}}"
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakes_stakeKey}}",
                      "description": "(From api :Get top delegators - v1/stakes/top-delegators)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stakes",
                        ":stakeKey"
                      ],
                      "variable": [
                        {
                          "key": "stakeKey",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) Stake key"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"status\": \"DEACTIVATED\",\n  \"stakeAddress\": \"ut aliqua id nostrud\",\n  \"totalStake\": 85099477,\n  \"rewardAvailable\": 9303668,\n  \"rewardWithdrawn\": -78301382,\n  \"pool\": {\n    \"tickerName\": \"est deserunt quis\",\n    \"poolName\": \"voluptate fugiat cillum\",\n    \"poolId\": \"in reprehenderit\"\n  },\n  \"rewardPools\": [\n    \"ea est\",\n    \"Excepteur reprehenderi\"\n  ]\n}"
                }
              ]
            },
            {
              "name": "Get withdrawal transaction of stake key",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "var current_page = 0\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Compare Currentpage\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
                      "});\r",
                      "\r",
                      "//Compare format dynamic data\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].blockNo).to.be.a(\"number\");\r",
                      "    if(jsonData.data.txId){\r",
                      "        pm.expect(typeof jsonData.data[0].txId).to.be.oneOf([ 'object', 'number']);\r",
                      "    }\r",
                      "    pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "    if(jsonData.data.fee){\r",
                      "        pm.expect(typeof jsonData.data[0].fee).to.be.oneOf([ 'object', 'number']); \r",
                      "    }   \r",
                      "    pm.expect(jsonData.data[0].amount).to.be.a(\"number\");\r",
                      "    if(jsonData.data.stakeAddressId){\r",
                      "        pm.expect(typeof jsonData.data[0].stakeAddressId).to.be.oneOf([ 'object', 'string']);\r",
                      "    }     \r",
                      "});\r",
                      "\r",
                      "//Scenario compare get Withdrawal with Get withdrawal transaction of stake key\r",
                      "pm.test(\"Compare data between get Withdrawal and Get withdrawal transaction of stake key\",function (){\r",
                      "    //all variable get from API api/v1/stake-lifecycle/:stakeKey/withdrawals(get Withdrawals)\r",
                      "    var TX_Hash = pm.environment.get(\"getWithdrawals_data_txHash\");\r",
                      "    let result = jsonData.data.find(a => a.txHash === TX_Hash);\r",
                      "    \r",
                      "    if (result?.txHash === TX_Hash){\r",
                      "        pm.expect(result.txHash).to.include(pm.environment.get(\"getWithdrawals_data_txHash\"));\r",
                      "        pm.expect(result.amount).to.eql(pm.environment.get(\"getWithdrawals_data_value\"));\r",
                      "        pm.expect(result.time).to.contain(pm.environment.get(\"getWithdrawals_data_time\"));\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/withdrawal-history",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "withdrawal-history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "76",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/withdrawal-history?page=0&size=20&sort=ex&sort=nisi de",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stakes",
                        ":stakeKey",
                        "withdrawal-history"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "20"
                        },
                        {
                          "key": "sort",
                          "value": "ex"
                        },
                        {
                          "key": "sort",
                          "value": "nisi de"
                        }
                      ],
                      "variable": [
                        {
                          "key": "stakeKey",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) Stake key"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"time\": \"2018-12-27T06:20:16.603Z\",\n      \"txHash\": \"ipsum in ut\",\n      \"txId\": 42301109,\n      \"epochSlotNo\": 25509584,\n      \"epochNo\": 63328981,\n      \"amount\": -54873387,\n      \"fee\": 4144030,\n      \"blockNo\": -38193569\n    },\n    {\n      \"time\": \"1986-02-08T17:50:52.672Z\",\n      \"txHash\": \"adipisicing irure eiusmod reprehenderit laborum\",\n      \"txId\": 97485354,\n      \"epochSlotNo\": 84050974,\n      \"epochNo\": -21092501,\n      \"amount\": -10675888,\n      \"fee\": 1427659,\n      \"blockNo\": -93743081\n    }\n  ],\n  \"totalItems\": 61563279,\n  \"totalPages\": -81860932,\n  \"currentPage\": -72994741\n}"
                }
              ]
            },
            {
              "name": "Boundary - Get withdrawal transaction of stake key (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/withdrawal-history?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "withdrawal-history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get withdrawal transaction of stake key (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/withdrawal-history?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "withdrawal-history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get withdrawal transaction of stake key (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/withdrawal-history?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "withdrawal-history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get withdrawal transaction of stake key (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/withdrawal-history?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "withdrawal-history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get transactions of stake key",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "var current_page = 0\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Compare Currentpage\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
                      "});\r",
                      "\r",
                      "//Compare format dynamic data\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].hash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].blockNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].blockHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].slot).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].addressesInput).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].addressesOutput).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].totalOutput).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].balance).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].tokens).to.be.an(\"array\");\r",
                      "});\r",
                      "\r",
                      "//Scenario compare get Wallet Activities api with api Get transactions of stake key (stakes)\r",
                      "pm.test(\"Compare data with get Wallet Activities api\",function (){\r",
                      "    //all variable get from API api/v1/stake-lifecycle/:stakinglifecycle_stakeKey/wallet-activity(get Wallet Activities )\r",
                      "    var txhash = pm.environment.get(\"Wallet_Activities_data_txHash\");\r",
                      "    let result = jsonData.data.find(a => a.hash === txhash);\r",
                      "    \r",
                      "    if (result?.hash === txhash){\r",
                      "        pm.expect(result.hash).to.be.include(pm.environment.get(\"Wallet_Activities_data_txHash\"));\r",
                      "        pm.expect(result.balance).to.be.eql(pm.environment.get(\"Wallet_Activities_data_amount\"));\r",
                      "        pm.expect(result.fee).to.be.eql(pm.environment.get(\"Wallet_Activities_data_fee\"));\r",
                      "        pm.expect(result.time).to.be.contain(pm.environment.get(\"Wallet_Activities_time\"));\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/txs",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/txs?page=0&size=20&sort=ex&sort=nisi de",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stakes",
                        ":stakeKey",
                        "txs"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "20"
                        },
                        {
                          "key": "sort",
                          "value": "ex"
                        },
                        {
                          "key": "sort",
                          "value": "nisi de"
                        }
                      ],
                      "variable": [
                        {
                          "key": "stakeKey",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) Stake key"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"hash\": \"Excepteur sed labore\",\n      \"blockNo\": -46806813,\n      \"blockHash\": \"nisi in incididunt quis\",\n      \"epochNo\": -60608740,\n      \"epochSlotNo\": 68641533,\n      \"slot\": -54192140,\n      \"time\": \"1953-04-19T18:45:29.774Z\",\n      \"addressesInput\": [\n        \"consequat id\",\n        \"irure dolore\"\n      ],\n      \"addressesOutput\": [\n        \"dolor ea\",\n        \"magna laborum\"\n      ],\n      \"fee\": 14511110,\n      \"totalOutput\": 33083216,\n      \"balance\": 91663821,\n      \"tokens\": [\n        {\n          \"addressId\": -2475162,\n          \"address\": \"consequat\",\n          \"policy\": \"est qui in in\",\n          \"metadata\": {\n            \"url\": \"ea voluptate commodo nisi nostrud\",\n            \"ticker\": \"ex aliqua\",\n            \"decimals\": 35611207,\n            \"logo\": \"nostrud Excepteur qui\",\n            \"description\": \"cillum\"\n          },\n          \"name\": \"do fugiat reprehenderit ipsu\",\n          \"displayName\": \"occaecat ex\",\n          \"fingerprint\": \"minim d\",\n          \"quantity\": -28150056\n        },\n        {\n          \"addressId\": -70424671,\n          \"address\": \"laboris\",\n          \"policy\": \"dolor in incididunt\",\n          \"metadata\": {\n            \"url\": \"Excepteur reprehenderit\",\n            \"ticker\": \"sed Du\",\n            \"decimals\": 21239598,\n            \"logo\": \"ut enim\",\n            \"description\": \"amet officia nulla\"\n          },\n          \"name\": \"laborum reprehenderit deserunt\",\n          \"displayName\": \"eu nisi voluptate\",\n          \"fingerprint\": \"sed in\",\n          \"quantity\": 73188167\n        }\n      ]\n    },\n    {\n      \"hash\": \"occaecat non anim labore\",\n      \"blockNo\": -32853053,\n      \"blockHash\": \"pariatur sed dolore dolore\",\n      \"epochNo\": 92981403,\n      \"epochSlotNo\": 57548782,\n      \"slot\": 93943643,\n      \"time\": \"1977-06-16T06:16:08.168Z\",\n      \"addressesInput\": [\n        \"cillum enim\",\n        \"velit Duis minim aute\"\n      ],\n      \"addressesOutput\": [\n        \"officia fugiat Lorem\",\n        \"sint\"\n      ],\n      \"fee\": 87483890,\n      \"totalOutput\": 66035495,\n      \"balance\": -36872582,\n      \"tokens\": [\n        {\n          \"addressId\": 40282102,\n          \"address\": \"dolore ea Lorem eu consectetur\",\n          \"policy\": \"sed cillum\",\n          \"metadata\": {\n            \"url\": \"est exercitation irure\",\n            \"ticker\": \"ex voluptate\",\n            \"decimals\": 66574392,\n            \"logo\": \"exercitation eiusmod velit\",\n            \"description\": \"incididunt irure ut nostrud\"\n          },\n          \"name\": \"amet laboris sunt aute sint\",\n          \"displayName\": \"do\",\n          \"fingerprint\": \"mollit officia commodo enim in\",\n          \"quantity\": 96432812\n        },\n        {\n          \"addressId\": 61875921,\n          \"address\": \"dolore sit\",\n          \"policy\": \"sit dolor minim in\",\n          \"metadata\": {\n            \"url\": \"voluptate veniam laborum exercita\",\n            \"ticker\": \"dolore dolor\",\n            \"decimals\": -85521489,\n            \"logo\": \"sunt mollit nisi\",\n            \"description\": \"proident\"\n          },\n          \"name\": \"nisi aliquip anim\",\n          \"displayName\": \"cillum aute\",\n          \"fingerprint\": \"ut dolore\",\n          \"quantity\": -50581416\n        }\n      ]\n    }\n  ],\n  \"totalItems\": -30498291,\n  \"totalPages\": 48123678,\n  \"currentPage\": -67438345\n}"
                }
              ]
            },
            {
              "name": "Boundary - Get transactions of stake key (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(100);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/txs?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get transactions of stake key (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/txs?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get transactions of stake key (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/txs?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get transactions of stake key (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/txs?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get stake history of stake key",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "var current_page = 0\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Compare Currentpage\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
                      "});\r",
                      "\r",
                      "//Compare format dynamic data\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    \r",
                      "    if (jsonData.data[0].fee != null){\r",
                      "        pm.expect(jsonData.data[0].fee).to.be.a(\"number\")\r",
                      "    } else {\r",
                      "        pm.expect(jsonData.data[0].fee).to.be.null\r",
                      "    };\r",
                      "\r",
                      "    pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].blockNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");    \r",
                      "    pm.expect(jsonData.data[0].deposit).to.be.a(\"number\");   \r",
                      "    pm.expect(jsonData.data[0].blockIndex).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].action).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/stake-history",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "stake-history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake1u9pwlay8fvev5yfvnpx8c057n3m0aa5g493qw44zqdycz6sm0cph9",
                      "description": "(Required) Stake key"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/stake-history?page=0&size=20&sort=ex&sort=nisi de",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stakes",
                        ":stakeKey",
                        "stake-history"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "20"
                        },
                        {
                          "key": "sort",
                          "value": "ex"
                        },
                        {
                          "key": "sort",
                          "value": "nisi de"
                        }
                      ],
                      "variable": [
                        {
                          "key": "stakeKey",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) Stake key"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"time\": \"1957-12-23T12:35:29.705Z\",\n      \"txHash\": \"pariatur\",\n      \"deposit\": 30610829,\n      \"epochSlotNo\": -13365997,\n      \"epochNo\": 92963422,\n      \"fee\": -35664038,\n      \"blockNo\": -97846688,\n      \"blockIndex\": -20422519,\n      \"action\": \"nul\"\n    },\n    {\n      \"time\": \"1999-05-09T04:49:53.077Z\",\n      \"txHash\": \"Duis pariatur dolor\",\n      \"deposit\": -35117243,\n      \"epochSlotNo\": 8475137,\n      \"epochNo\": -43733210,\n      \"fee\": -27898075,\n      \"blockNo\": 67189709,\n      \"blockIndex\": -90661070,\n      \"action\": \"occaecat laborum veniam\"\n    }\n  ],\n  \"totalItems\": -66781591,\n  \"totalPages\": 66195551,\n  \"currentPage\": -51007974\n}"
                }
              ]
            },
            {
              "name": "Boundary - Get stake history of stake key (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/stake-history?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "stake-history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake1u9pwlay8fvev5yfvnpx8c057n3m0aa5g493qw44zqdycz6sm0cph9",
                      "description": "(Required) Stake key"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake history of stake key (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/stake-history?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "stake-history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake1u9pwlay8fvev5yfvnpx8c057n3m0aa5g493qw44zqdycz6sm0cph9",
                      "description": "(Required) Stake key"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake history of stake key (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/stake-history?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "stake-history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake1u9pwlay8fvev5yfvnpx8c057n3m0aa5g493qw44zqdycz6sm0cph9",
                      "description": "(Required) Stake key"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get stake history of stake key (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/stake-history?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "stake-history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake1u9pwlay8fvev5yfvnpx8c057n3m0aa5g493qw44zqdycz6sm0cph9",
                      "description": "(Required) Stake key"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get all address of stake",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "var current_page = 0\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Compare Currentpage\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
                      "});\r",
                      "\r",
                      "//Compare format dynamic data\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].txCount).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].balance).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].address).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/list-address",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "list-address"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake1uypy44wqjznc5w9ns9gsguz4ta83jekrg9d0wupa7j3zsacwvq5ex",
                      "description": "(Required) Stake key"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/list-address?page=0&size=20&sort=ex&sort=nisi de",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stakes",
                        ":stakeKey",
                        "list-address"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "20"
                        },
                        {
                          "key": "sort",
                          "value": "ex"
                        },
                        {
                          "key": "sort",
                          "value": "nisi de"
                        }
                      ],
                      "variable": [
                        {
                          "key": "stakeKey",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) Stake key"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"address\": \"elit fugiat magna et\",\n      \"txCount\": -96260110,\n      \"balance\": -31166932\n    },\n    {\n      \"address\": \"ea officia culpa\",\n      \"txCount\": 76870377,\n      \"balance\": 78684995\n    }\n  ],\n  \"totalItems\": -86817919,\n  \"totalPages\": -14279308,\n  \"currentPage\": 727956\n}"
                }
              ]
            },
            {
              "name": "Boundary - Get all address of stake (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/list-address?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "list-address"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake1uypy44wqjznc5w9ns9gsguz4ta83jekrg9d0wupa7j3zsacwvq5ex",
                      "description": "(Required) Stake key"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get all address of stake (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/list-address?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "list-address"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake1uypy44wqjznc5w9ns9gsguz4ta83jekrg9d0wupa7j3zsacwvq5ex",
                      "description": "(Required) Stake key"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get all address of stake (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/list-address?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "list-address"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake1uypy44wqjznc5w9ns9gsguz4ta83jekrg9d0wupa7j3zsacwvq5ex",
                      "description": "(Required) Stake key"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get all address of stake (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/list-address?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "list-address"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake1uypy44wqjznc5w9ns9gsguz4ta83jekrg9d0wupa7j3zsacwvq5ex",
                      "description": "(Required) Stake key"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get reward transaction of stake key",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "var current_page = 0\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Compare Currentpage\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
                      "});\r",
                      "\r",
                      "//Compare format dynamic data\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].blockNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");    \r",
                      "    pm.expect(jsonData.data[0].amount).to.be.a(\"string\");   \r",
                      "    pm.expect(jsonData.data[0].blockIndex).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "//Scenario Compare api: Get list of instantaneous rewardst with  api Get: Get reward transaction of stake key\r",
                      "pm.test(\"Get data of Get reward transaction of stake key api\",function(){\r",
                      "//Randome value\r",
                      "var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));\r",
                      "\r",
                      "pm.environment.set(\"stake_rewards_txhash\", jsonData.data[randomIndex].txHash);\r",
                      "pm.environment.set(\"stake_rewards_amount\", jsonData.data[randomIndex].amount);\r",
                      "pm.environment.set(\"stake_rewards_epochNo\", jsonData.data[randomIndex].epochNo);\r",
                      "pm.environment.set(\"stake_rewards_time\", jsonData.data[randomIndex].time);\r",
                      "pm.environment.set(\"stake_rewards_blockNo\", jsonData.data[randomIndex].blockNo);\r",
                      "pm.environment.set(\"stake_rewards_epochSlotNo\", jsonData.data[randomIndex].epochSlotNo);\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/instantaneous-rewards",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "instantaneous-rewards"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake1uypy44wqjznc5w9ns9gsguz4ta83jekrg9d0wupa7j3zsacwvq5ex",
                      "description": "(Required) Stake key"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/instantaneous-rewards?page=0&size=20&sort=ex&sort=nisi de",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stakes",
                        ":stakeKey",
                        "instantaneous-rewards"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "20"
                        },
                        {
                          "key": "sort",
                          "value": "ex"
                        },
                        {
                          "key": "sort",
                          "value": "nisi de"
                        }
                      ],
                      "variable": [
                        {
                          "key": "stakeKey",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) Stake key"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"time\": \"2005-06-27T06:09:09.385Z\",\n      \"txHash\": \"eiusmod sit\",\n      \"epochSlotNo\": 33428001,\n      \"epochNo\": -55085995,\n      \"amount\": \"officia sint fugiat cill\",\n      \"blockNo\": 67801809,\n      \"blockIndex\": -96050441\n    },\n    {\n      \"time\": \"1967-09-26T07:57:01.688Z\",\n      \"txHash\": \"non eu adipisicing tempor\",\n      \"epochSlotNo\": -66192336,\n      \"epochNo\": -53252436,\n      \"amount\": \"irure et\",\n      \"blockNo\": 70424806,\n      \"blockIndex\": 19976863\n    }\n  ],\n  \"totalItems\": 277587,\n  \"totalPages\": -41029825,\n  \"currentPage\": 28918008\n}"
                }
              ]
            },
            {
              "name": "Boundary - Get reward transaction of stake key (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/instantaneous-rewards?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "instantaneous-rewards"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake1uypy44wqjznc5w9ns9gsguz4ta83jekrg9d0wupa7j3zsacwvq5ex",
                      "description": "(Required) Stake key"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get reward transaction of stake key (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/instantaneous-rewards?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "instantaneous-rewards"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake1uypy44wqjznc5w9ns9gsguz4ta83jekrg9d0wupa7j3zsacwvq5ex",
                      "description": "(Required) Stake key"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get reward transaction of stake key (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/instantaneous-rewards?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "instantaneous-rewards"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake1uypy44wqjznc5w9ns9gsguz4ta83jekrg9d0wupa7j3zsacwvq5ex",
                      "description": "(Required) Stake key"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get reward transaction of stake key (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/instantaneous-rewards?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "instantaneous-rewards"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "stake1uypy44wqjznc5w9ns9gsguz4ta83jekrg9d0wupa7j3zsacwvq5ex",
                      "description": "(Required) Stake key"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get delegation history of stake key",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "var current_page = 0\r",
                      "var randomNumber = Math.floor(Math.random() * jsonData.data.length);\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Compare Currentpage\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
                      "});\r",
                      "\r",
                      "//Compare format dynamic data\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    \r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "\r",
                      "    //random index cho array\r",
                      "    if (jsonData.data[randomNumber].length > 6) {\r",
                      "\r",
                      "        pm.expect(jsonData.data[randomNumber].time).to.include(moment(jsonData.data[randomNumber].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "        pm.expect(jsonData.data[randomNumber].txHash).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.data[randomNumber].epochNo).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[randomNumber].blockNo).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[randomNumber].epochSlotNo).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[randomNumber].poolData).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.data[randomNumber].poolId).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.data[randomNumber].tickerName).to.be.a(\"string\");\r",
                      "            \r",
                      "    } else {\r",
                      "\r",
                      "        pm.expect(jsonData.data[randomNumber].time).to.include(moment(jsonData.data[randomNumber].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "        pm.expect(jsonData.data[randomNumber].txHash).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.data[randomNumber].epochNo).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[randomNumber].blockNo).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[randomNumber].epochSlotNo).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[randomNumber].poolId).to.be.a(\"string\");\r",
                      "\r",
                      "    }\r",
                      "\r",
                      "    \r",
                      "});\r",
                      "\r",
                      "//Scenario Compare value between Get top delegators and Get delegation history of stake key\r",
                      "//all variable get from API api/v1/stakes/top-delegators(Get top delegators)\r",
                      "pm.test(\"Compare value between Get top delegators and Get delegation history of stake key\", function () {\r",
                      "    var stakes_poolId = pm.environment.get(\"stakes_poolId\");\r",
                      "\r",
                      "    for (let i = 0; i < jsonData.data.length; i++) {\r",
                      "        if (jsonData.data[i].poolId === stakes_poolId) {\r",
                      "            pm.expect(jsonData.data[i].poolId).to.be.include(stakes_poolId);\r",
                      "        }\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "//Scenario compare get Delegation with Get delegation history of stake key\r",
                      "//all variable get from API api/v1/stake-lifecycle/:stakeKey/delegations(get Delegations)\r",
                      "var txhash = pm.environment.get(\"getDelegations_data_txHash\");\r",
                      "let result = jsonData.data.find(a => a.txHash === 1);\r",
                      "if (result?.txHash === txhash){\r",
                      "    pm.test(\"Compare value between get Delegation and Get delegation history of stake key\", function () {\r",
                      "\r",
                      "        pm.expect(result.txHash).to.be.include(pm.environment.get(\"getDelegations_data_txHash\"));\r",
                      "        pm.expect(result.time).to.be.eql(pm.environment.get(\"getDelegations_data_time\"));\r",
                      "    });\r",
                      "\r",
                      "}\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/delegation-history",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "delegation-history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/delegation-history?page=0&size=20&sort=ex&sort=nisi de",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stakes",
                        ":stakeKey",
                        "delegation-history"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "20"
                        },
                        {
                          "key": "sort",
                          "value": "ex"
                        },
                        {
                          "key": "sort",
                          "value": "nisi de"
                        }
                      ],
                      "variable": [
                        {
                          "key": "stakeKey",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) Stake key"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"time\": \"1975-04-16T11:45:49.946Z\",\n      \"poolId\": \"ut est dolor dolor\",\n      \"stakeAddress\": \"dolor nisi reprehenderit anim\",\n      \"poolData\": \"Lorem aliquip\",\n      \"tickerName\": \"eiusmod sed sunt ipsum\",\n      \"txHash\": \"officia adipisicing non\",\n      \"outSum\": -33769766,\n      \"epochSlotNo\": -92422933,\n      \"epochNo\": 37486967,\n      \"fee\": -7898698,\n      \"blockNo\": -4993602\n    },\n    {\n      \"time\": \"1943-12-08T01:13:37.039Z\",\n      \"poolId\": \"Duis quis do\",\n      \"stakeAddress\": \"do dolore exercitation culpa\",\n      \"poolData\": \"velit dolore dolor Lorem\",\n      \"tickerName\": \"tempo\",\n      \"txHash\": \"in est Excepteur fugiat\",\n      \"outSum\": -84218188,\n      \"epochSlotNo\": -41868088,\n      \"epochNo\": 625573,\n      \"fee\": -58659298,\n      \"blockNo\": -37980674\n    }\n  ],\n  \"totalItems\": -65267270,\n  \"totalPages\": -93836451,\n  \"currentPage\": -37714910\n}"
                }
              ]
            },
            {
              "name": "Boundary - Get delegation history of stake key (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/delegation-history?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "delegation-history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get delegation history of stake key (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/delegation-history?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "delegation-history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get delegation history of stake key (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/delegation-history?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "delegation-history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get delegation history of stake key (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/:stakeKey/delegation-history?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    ":stakeKey",
                    "delegation-history"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}",
                      "description": "(From api: Generate stake key report - v1/staking-lifecycle/report/stake-key)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get a stake detail by stake key",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "var stake_address = \"stake1u9tqcg5qatru0k7h45vtldj7j3c3zhgr6ndglgwu866qglqkzv6c2\"\r",
                      "var pool_id = \"pool1w7c2j0px43jmudhf48ezp7dy8j7904c9l3wc7809lhh2z026hch\"\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Compare Stakeaddress\", function () {\r",
                      "    pm.expect(jsonData.stakeAddress).to.include(stake_address);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Compare PoolId\", function () {\r",
                      "    pm.expect(jsonData.pool.poolId).to.include(pool_id);\r",
                      "});\r",
                      "\r",
                      "//Compare format dynamic data\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    pm.expect(jsonData.status).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.stakeAddress).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.totalStake).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.rewardAvailable).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.rewardWithdrawn).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.pool).to.be.an(\"object\");\r",
                      "    pm.expect(typeof jsonData.pool.tickerName).to.be.oneOf([ 'object', 'string']);\r",
                      "    pm.expect(typeof jsonData.pool.poolName).to.be.oneOf([ 'object', 'string']);\r",
                      "    pm.expect(jsonData.pool.poolId).to.be.a(\"string\");\r",
                      "    pm.expect(typeof jsonData.pool.logoUrl).to.be.oneOf([ 'object', 'string']);\r",
                      "    pm.expect(typeof jsonData.pool.iconUrl).to.be.oneOf([ 'object', 'string']);   \r",
                      "    pm.expect(jsonData.rewardPools).to.be.an(\"array\");\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/address/:address",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    "address",
                    ":address"
                  ],
                  "variable": [
                    {
                      "key": "address",
                      "value": "addr1q8pusk379txj05qkqefk6yh5ah757qqt0cshserew99fks2kps3gp6k8clda0tgch7m9a9r3z9ws84x637sac045q37q6tdtvz",
                      "description": "(Required) Address"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/stakes/address/:address",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "stakes",
                        "address",
                        ":address"
                      ],
                      "variable": [
                        {
                          "key": "address",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) Address"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"status\": \"ACTIVE\",\n  \"stakeAddress\": \"exercitation in eiusmod occaecat\",\n  \"totalStake\": 51974979,\n  \"rewardAvailable\": 76531293,\n  \"rewardWithdrawn\": -18505654,\n  \"pool\": {\n    \"tickerName\": \"id Ut\",\n    \"poolName\": \"deserunt occaec\",\n    \"poolId\": \"do nostrud veniam\"\n  },\n  \"rewardPools\": [\n    \"Lorem cillum\",\n    \"dolor ex consequat amet\"\n  ]\n}"
                }
              ]
            },
            {
              "name": "Get reward distribution information",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "//Compare format dynamic data\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.stakeAddress).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.rewardAvailable).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.hasMemberReward).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.hasLeaderReward).to.be.a(\"boolean\");\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/stakes/reward-distribution/:stakeKey",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "stakes",
                    "reward-distribution",
                    ":stakeKey"
                  ],
                  "variable": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakinglifecycle_stakeKey}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "scripts",
          "item": [
            {
              "name": "Verify native scrip contract",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var jsonDataRequest = JSON.parse(pm.request.body.raw);\r",
                      "\r",
                      "//Check status code \r",
                      "pm.test(\"Status code name has string\", function () {\r",
                      "    pm.response.to.have.status(\"Bad Request\");\r",
                      "    pm.environment.set(\"type_native_script\", jsonData.type);\r",
                      "    pm.environment.set(\"keyHash_native_script\", jsonData.keyHash);\r",
                      "    pm.environment.set(\"scripts_native_script\", JSON.stringify(jsonData.scripts));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Successful POST request\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "// pm.test(\"response should be okay to process\", function () {\r",
                      "//     pm.response.to.not.be.error;\r",
                      "//     pm.expect(jsonData.type).to.eql(jsonDataRequest.type);\r",
                      "//     if (jsonData.scripts) {\r",
                      "//         pm.expect(JSON.stringify(jsonData.scripts)).to.eql(JSON.stringify(jsonDataRequest.scripts))\r",
                      "//     }\r",
                      "//     if (jsonData.keyHash) {\r",
                      "//         pm.expect(jsonData.keyHash).to.eql(jsonDataRequest.keyHash)\r",
                      "//     }\r",
                      "// });\r",
                      "\r",
                      "//check format data type \r",
                      "// pm.test(\"Check data type of the response\", () => {\r",
                      "//     pm.expect(jsonData.type).to.be.a(\"string\");\r",
                      "//     if (jsonData.keyHash) {\r",
                      "//         pm.expect(jsonData.keyHash).to.be.a(\"string\");\r",
                      "//     }\r",
                      "//     if (jsonData.scripts) {\r",
                      "//         (jsonData.scripts || []).map(script => {\r",
                      "//             if (script.type) {\r",
                      "//                 pm.expect(script.type).to.be.a('string')\r",
                      "//             }\r",
                      "//             if (script.keyHash) {\r",
                      "//                 pm.expect(script.keyHash).to.be.a('string')\r",
                      "//             }\r",
                      "//             if (script.slot) {\r",
                      "//                 pm.expect(script.slot).to.be.a('number')\r",
                      "//             }\r",
                      "//         })\r",
                      "//     }\r",
                      "// });"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{access_token}}"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"type\": \"all\",\r\n    \"scripts\": [\r\n        {\r\n            \"type\": \"sig\",\r\n            \"keyHash\": \"26bacc7b88e2b40701387c521cd0c50d5c0cfa4c6c6d7f0901395757\"\r\n        },\r\n        {\r\n            \"type\": \"before\",\r\n            \"slot\": 23069343\r\n        }\r\n    ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/api/v1/scripts/native-scripts/:scriptHash/verify",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "scripts",
                    "native-scripts",
                    ":scriptHash",
                    "verify"
                  ],
                  "variable": [
                    {
                      "key": "scriptHash",
                      "value": "{{scriptHash}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"type\": \"all\",\r\n    \"scripts\": [\r\n        {\r\n            \"type\": \"sig\",\r\n            \"keyHash\": \"26bacc7b88e2b40701387c521cd0c50d5c0cfa4c6c6d7f0901395757\"\r\n        },\r\n        {\r\n            \"type\": \"before\",\r\n            \"slot\": 23069343\r\n        }\r\n    ]\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/scripts/native-scripts/:scriptHash/verify",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "scripts",
                        "native-scripts",
                        ":scriptHash",
                        "verify"
                      ],
                      "variable": [
                        {
                          "key": "scriptHash",
                          "value": "3a9241cd79895e3a8d65261b40077d4437ce71e9d7c8c6c00e3f658e"
                        }
                      ]
                    }
                  },
                  "_postman_previewlanguage": "Text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                }
              ]
            },
            {
              "name": "get Native Scripts",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].scriptHash).to.be.a(\"string\");\r",
                      "    if(jsonData.data[0].before){\r",
                      "        let moment = require ('moment');\r",
                      "        pm.expect(jsonData.data[0].before).to.include(moment(jsonData.data[0].before).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    }\r",
                      "    if(jsonData.data[0].after){\r",
                      "        let moment = require ('moment');\r",
                      "        pm.expect(jsonData.data[0].after).to.include(moment(jsonData.data[0].after).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    }\r",
                      "    pm.expect(jsonData.data[0].isMultiSig).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.data[0].numberOfTokens).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].numberOfAssetHolders).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].tokens).to.be.an(\"array\");\r",
                      "});\r",
                      "\r",
                      "//Random value\r",
                      "pm.test(\"Get random data\",function(){\r",
                      "    var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));\r",
                      "    pm.environment.set(\"native_scriptHash\", jsonData.data[randomIndex].scriptHash);\r",
                      "    pm.environment.set(\"native_numberOfTokens\", jsonData.data[randomIndex].numberOfTokens);\r",
                      "    pm.environment.set(\"native_numberOfAssetHolders\", jsonData.data[randomIndex].numberOfAssetHolders);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/scripts/native-scripts",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "scripts",
                    "native-scripts"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "<integer>",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "<integer>",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/scripts/native-scripts",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "scripts",
                        "native-scripts"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "<integer>",
                          "disabled": true
                        },
                        {
                          "key": "size",
                          "value": "<integer>",
                          "disabled": true
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "disabled": true
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "disabled": true
                        }
                      ]
                    }
                  },
                  "_postman_previewlanguage": "Text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                }
              ]
            },
            {
              "name": "Boundary - get Native Scripts (100)",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/scripts/native-scripts?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "scripts",
                    "native-scripts"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "<integer>",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Native Scripts (101)",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/scripts/native-scripts?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "scripts",
                    "native-scripts"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "<integer>",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Native Scripts (1)",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/scripts/native-scripts?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "scripts",
                    "native-scripts"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "<integer>",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Native Scripts (-1)",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/scripts/native-scripts?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "scripts",
                    "native-scripts"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "<integer>",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Native Scripts (0)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\");\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/scripts/native-scripts?size=0",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "scripts",
                    "native-scripts"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "<integer>",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "0",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get Native Script Detail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "//Check type of data\r",
                      "pm.test(\"Check respond for type of data\", function () {\r",
                      "    let moment = require('moment');\r",
                      "    pm.expect(jsonData.scriptHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.numberOfTokens).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.numberOfAssetHolders).to.be.a(\"number\");\r",
                      "    if (jsonData.conditionType) {\r",
                      "        pm.expect(typeof jsonData.conditionType).to.be.oneOf([\"object\", \"string\"]);\r",
                      "    }\r",
                      "    if (jsonData.require !== undefined) {\r",
                      "        if (typeof jsonData.required === 'number') {\r",
                      "            pm.expect(jsonData.required).to.be.a('number')\r",
                      "        } else {\r",
                      "            pm.expect(jsonData.required).to.eql(null);\r",
                      "        }\r",
                      "    }\r",
                      "    // else {\r",
                      "    //     pm.expect(jsonData.required).to.eql(undefined);\r",
                      "\r",
                      "    // }\r",
                      "\r",
                      "    pm.expect(jsonData.keyHashes).to.be.an(\"array\");\r",
                      "    if (jsonData.keyHashes.length > 0) {\r",
                      "        pm.expect(jsonData.keyHashes[0]).to.be.a(\"string\");\r",
                      "    }\r",
                      "\r",
                      "    if (jsonData.after !== undefined) {\r",
                      "        if (jsonData.after) {\r",
                      "            pm.expect(jsonData.after).to.include(moment(jsonData.after).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "        } else {\r",
                      "            pm.expect(jsonData.after).to.eql(null);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    if (jsonData.before !== undefined) {\r",
                      "        if (jsonData.before) {\r",
                      "            pm.expect(jsonData.before).to.include(moment(jsonData.before).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "        } else {\r",
                      "            pm.expect(jsonData.before).to.eql(null);\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    pm.expect(jsonData.associatedAddress).to.be.an(\"array\");\r",
                      "    if (jsonData.associatedAddress.length > 0) {\r",
                      "        pm.expect(jsonData.associatedAddress[0]).to.be.a(\"string\");\r",
                      "    }\r",
                      "\r",
                      "    if (jsonData.script != undefined) {\r",
                      "        {\r",
                      "            if (jsonData.script === null) {\r",
                      "                pm.expect(jsonData.script).to.eql(null);\r",
                      "            } else {\r",
                      "                pm.expect(jsonData.script).to.be.a(\"string\");\r",
                      "            }\r",
                      "        }\r",
                      "    }\r",
                      "\r",
                      "    if (jsonData.isOneTimeMint != undefined) {\r",
                      "        if (jsonData.isOneTimeMint === null) {\r",
                      "            pm.expect(jsonData.isOneTimeMint).to.eql(null);\r",
                      "        } else {\r",
                      "            pm.expect(jsonData.isOneTimeMint).to.be.a(\"boolean\", \"jsonData.isOneTimeMint\");\r",
                      "        }\r",
                      "\r",
                      "    }\r",
                      "\r",
                      "    if (jsonData.verifiedContract != undefined) {\r",
                      "        if (jsonData.verifiedContract === null) {\r",
                      "            pm.expect(jsonData.verifiedContract).to.eql(null);\r",
                      "        } else {\r",
                      "            pm.expect(jsonData.verifiedContract).to.be.a(\"boolean\");\r",
                      "        }\r",
                      "    }\r",
                      "})\r",
                      "\r",
                      "\r",
                      "//Scenario: compare data api get Native Scripts and get Native Script Detail\r",
                      "//all variable get from API /api/v1/scripts/native-scripts (get Native Scripts)\r",
                      "pm.test(\"Check Others value\", function () {\r",
                      "    pm.expect(jsonData.scriptHash).to.include(pm.environment.get(\"native_scriptHash\"));\r",
                      "    pm.expect(jsonData.numberOfTokens).to.equal(pm.environment.get(\"native_numberOfTokens\"));\r",
                      "    pm.expect(jsonData.numberOfAssetHolders).to.equal(pm.environment.get(\"native_numberOfAssetHolders\"));\r",
                      "});\r",
                      "\r",
                      "//Compare data with {{baseUrl}}/api/v1/scripts/native-scripts/:scriptHash/verify\r",
                      "// pm.test(\"response should be okay to process\", function () {\r",
                      "//     if (jsonData.script) {\r",
                      "//         pm.expect(JSON.parse(jsonData.script).type).to.eql(pm.environment.get(\"type_native_script\"));\r",
                      "//         //keyHashes check\r",
                      "//         if (jsonData.keyHashes.length > 0) {\r",
                      "//             if (pm.environment.get(\"keyHash_native_script\")) {\r",
                      "//                 pm.expect(jsonData.keyHashes).to.be.include(pm.environment.get(\"keyHash_native_script\"))\r",
                      "//             }\r",
                      "//             if (pm.environment.get(\"scripts_native_script\")) {\r",
                      "//                 pm.expect(jsonData.keyHashes[0]).to.eql(pm.environment.get(\"keyHash_native_script\"));\r",
                      "//             }\r",
                      "//         }\r",
                      "//     }\r",
                      "// })\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/scripts/native-scripts/:scriptHash",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "scripts",
                    "native-scripts",
                    ":scriptHash"
                  ],
                  "variable": [
                    {
                      "key": "scriptHash",
                      "value": "{{native_scriptHash}}",
                      "description": "(Required)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "get Native Script Detail",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/scripts/native-scripts/:scriptHash",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "scripts",
                        "native-scripts",
                        ":scriptHash"
                      ],
                      "variable": [
                        {
                          "key": "scriptHash",
                          "value": "{{native_scriptHash}}",
                          "description": "(Required)"
                        }
                      ]
                    }
                  },
                  "_postman_previewlanguage": "Text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                }
              ]
            },
            {
              "name": "Get tokens of a policy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type\", () => {\r",
                      "    if(jsonData.data.length > 0){\r",
                      "        let moment = require ('moment');\r",
                      "        pm.expect(jsonData).to.be.an(\"object\");\r",
                      "        pm.expect(jsonData.data[0].id).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[0].name).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.data[0].displayName).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.data[0].policy).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.data[0].fingerprint).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.data[0].txCount).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[0].supply).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.data[0].totalVolume).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.data[0].createdOn).to.include(moment(jsonData.data[0].createdOn).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    }\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/scripts/native-scripts/:scriptHash/tokens",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "scripts",
                    "native-scripts",
                    ":scriptHash",
                    "tokens"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "<integer>",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "<integer>",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "scriptHash",
                      "value": "{{scriptHash}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "Get tokens of a policy",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/scripts/native-scripts/:scriptHash/tokens",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "scripts",
                        "native-scripts",
                        ":scriptHash",
                        "tokens"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "<integer>",
                          "disabled": true
                        },
                        {
                          "key": "size",
                          "value": "<integer>",
                          "disabled": true
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "disabled": true
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "disabled": true
                        }
                      ],
                      "variable": [
                        {
                          "key": "scriptHash",
                          "value": "{{native_scriptHash}}"
                        }
                      ]
                    }
                  },
                  "_postman_previewlanguage": "Text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                }
              ]
            },
            {
              "name": "Get holders by policy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type\", () => {\r",
                      "    if(jsonData.data.length > 0){\r",
                      "        let moment = require ('moment');\r",
                      "        pm.expect(jsonData).to.be.an(\"object\");\r",
                      "        pm.expect(jsonData.data[0].address).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.data[0].policy).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.data[0].name).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.data[0].displayName).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.data[0].fingerprint).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.data[0].quantity).to.be.a(\"number\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/scripts/native-scripts/:scriptHash/holders",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "scripts",
                    "native-scripts",
                    ":scriptHash",
                    "holders"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "<integer>",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "<integer>",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "scriptHash",
                      "value": "{{native_scriptHash}}",
                      "description": "(Required) The native script hash"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "Get holders by policy",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/scripts/native-scripts/:scriptHash/holders",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "scripts",
                        "native-scripts",
                        ":scriptHash",
                        "holders"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "<integer>",
                          "disabled": true
                        },
                        {
                          "key": "size",
                          "value": "<integer>",
                          "disabled": true
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "disabled": true
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "disabled": true
                        }
                      ],
                      "variable": [
                        {
                          "key": "scriptHash",
                          "value": "{{native_scriptHash}}",
                          "description": "(Required) The native script hash"
                        }
                      ]
                    }
                  },
                  "_postman_previewlanguage": "Text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                }
              ]
            },
            {
              "name": "get Scripts Contracts",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].scriptHash).to.be.a(\"string\", \"scriptHash\");\r",
                      "    pm.expect(jsonData.data[0].scriptVersion).to.be.a(\"string\", \"scriptVersion\");\r",
                      "    pm.expect(jsonData.data[0].txCount).to.be.a(\"number\", \"txCount\")\r",
                      "    if (jsonData.data[0].scriptPurposeTypes) {\r",
                      "        pm.expect(jsonData.data[0].txPurposes).to.be.an(\"array\", \"txPurposes\");\r",
                      "        pm.expect(jsonData.data[0].txPurposes).to.contain.oneOf([\"SPEND\", \"MINT\", \"CERT\", \"REWARD\"]);\r",
                      "\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "//Random value\r",
                      "pm.test(\"Get random data\", function () {\r",
                      "    var randomIndex = Math.floor(Math.random() * (jsonData.data.length - 1));\r",
                      "    pm.environment.set(\"contract_scriptHash\", jsonData.data[randomIndex].scriptHash);\r",
                      "    pm.environment.set(\"contract_scriptVersion\", jsonData.data[randomIndex].scriptVersion);\r",
                      "    // pm.environment.set(\"contract_associatedAddress\", jsonData.data[randomIndex].associatedAddress);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/scripts/contracts",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "scripts",
                    "contracts"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "<integer>",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "<integer>",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "get Smart Contracts",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/scripts/contracts",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "scripts",
                        "contracts"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "<integer>",
                          "disabled": true
                        },
                        {
                          "key": "size",
                          "value": "<integer>",
                          "disabled": true
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "disabled": true
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "disabled": true
                        }
                      ]
                    }
                  },
                  "_postman_previewlanguage": "Text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                }
              ]
            },
            {
              "name": "Boundary - get Smart Contracts Copy (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/scripts/contracts?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "scripts",
                    "contracts"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "<integer>",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Smart Contracts Copy (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/scripts/contracts?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "scripts",
                    "contracts"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "<integer>",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Smart Contracts Copy (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/scripts/contracts?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "scripts",
                    "contracts"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "<integer>",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Smart Contracts Copy (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/scripts/contracts?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "scripts",
                    "contracts"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "<integer>",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Search script by script hash",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.scriptHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.nativeScript).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.smartContract).to.be.a(\"boolean\");\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/scripts/search/:scriptHash",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "scripts",
                    "search",
                    ":scriptHash"
                  ],
                  "variable": [
                    {
                      "key": "scriptHash",
                      "value": "{{scriptHash}}",
                      "description": "(Required) The script hash"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "Search script by script hash",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/scripts/search/:scriptHash",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "scripts",
                        "search",
                        ":scriptHash"
                      ],
                      "variable": [
                        {
                          "key": "scriptHash",
                          "value": "{{contract_scriptHash}}",
                          "description": "(Required) The script hash"
                        }
                      ]
                    }
                  },
                  "_postman_previewlanguage": "Text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                }
              ]
            },
            {
              "name": "Get transactions interact with smart contract",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "    if (jsonData.data && jsonData.data.length > 0) {\r",
                      "        pm.environment.set(\"contract_scriptHash_trx_hash\", jsonData.data[0].hash)\r",
                      "    } \r",
                      "    else {\r",
                      "        pm.environment.set(\"contract_scriptHash_trx_hash\", null)\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    if (jsonData.data.length > 0) {\r",
                      "        let moment = require('moment');\r",
                      "        pm.expect(jsonData).to.be.an(\"object\");\r",
                      "        pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "        if (jsonData.data.length > 0) {\r",
                      "            pm.expect(jsonData.data[0].hash).to.be.a(\"string\");\r",
                      "            pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "            pm.expect(jsonData.data[0].blockNo).to.be.a(\"number\");\r",
                      "            pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
                      "            pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
                      "            pm.expect(jsonData.data[0].absoluteSlot).to.be.a(\"number\");\r",
                      "            if (jsonData.data[0].addresses) {\r",
                      "                pm.expect(jsonData.data[0].addresses).to.be.an(\"array\");\r",
                      "            }\r",
                      "            if (jsonData.data[0].scriptPurposeTypes) {\r",
                      "                pm.expect(jsonData.data[0].scriptPurposeTypes).to.be.an(\"array\");\r",
                      "                pm.expect(jsonData.data[0].scriptPurposeTypes).to.contain.oneOf([\"SPEND\", \"MINT\", \"CERT\", \"REWARD\"]);\r",
                      "\r",
                      "            }\r",
                      "        }\r",
                      "\r",
                      "    }\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/scripts/contracts/:scriptHash/txs",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "scripts",
                    "contracts",
                    ":scriptHash",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "<integer>",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "<integer>",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "scriptHash",
                      "value": "{{contract_scriptHash}}",
                      "description": "(Required) The script hash"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "Get transactions interact with smart contract",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/scripts/contracts/:scriptHash/txs",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "scripts",
                        "contracts",
                        ":scriptHash",
                        "txs"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "<integer>",
                          "disabled": true
                        },
                        {
                          "key": "size",
                          "value": "<integer>",
                          "disabled": true
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "disabled": true
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "disabled": true
                        }
                      ],
                      "variable": [
                        {
                          "key": "scriptHash",
                          "value": "{{contract_scriptHash}}",
                          "description": "(Required) The script hash"
                        }
                      ]
                    }
                  },
                  "_postman_previewlanguage": "Text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                }
              ]
            },
            {
              "name": "Get smart contract detail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.scriptHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.scriptType).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.associatedAddresses).to.be.an(\"array\");\r",
                      "});\r",
                      "\r",
                      "//Scenario: compare data api get Smart Contracts and get Get smart contract detail\r",
                      "//all variable get from API /api/v1/scripts/contracts (get Smart Contracts)\r",
                      "pm.test(\"Check Others value\", function () {\r",
                      "    pm.expect(jsonData.scriptHash).to.include(pm.environment.get(\"contract_scriptHash\"));\r",
                      "    pm.expect(jsonData.scriptType).to.include(pm.environment.get(\"contract_scriptVersion\"));\r",
                      "    // pm.expect(jsonData.associatedAddresses).to.deep.equal(pm.environment.get(\"contract_associatedAddress\"));\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/scripts/contracts/:scriptHash",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "scripts",
                    "contracts",
                    ":scriptHash"
                  ],
                  "variable": [
                    {
                      "key": "scriptHash",
                      "value": "{{contract_scriptHash}}",
                      "description": "(Required) The script hash"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "Get smart contract detail",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/scripts/contracts/:scriptHash",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "scripts",
                        "contracts",
                        ":scriptHash"
                      ],
                      "variable": [
                        {
                          "key": "scriptHash",
                          "value": "{{contract_scriptHash}}",
                          "description": "(Required) The script hash"
                        }
                      ]
                    }
                  },
                  "_postman_previewlanguage": "Text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                }
              ]
            },
            {
              "name": "Get smart contract execution detail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Check status code\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);\r",
                      "});\r",
                      "\r",
                      "if (!jsonData.errorCode) {\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(stt);\r",
                      "    });\r",
                      "} else {\r",
                      "    pm.test(\"Status code is 400\", function () {\r",
                      "        pm.response.to.have.status(400);\r",
                      "    });\r",
                      "}\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    if (jsonData.length > 0) {\r",
                      "        pm.expect(jsonData[0]).to.be.a(\"string\")\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"check input output addresses executes\", () => {\r",
                      "    const contract_scripHash_tx = pm.environment.get(\"contract_scriptHash_trx_hash\")\r",
                      "    if (contract_scripHash_tx) {\r",
                      "        pm.expect(jsonData.length).to.be.above(0);\r",
                      "        jsonData.map(data => pm.expect(data).to.be.a(\"string\"))\r",
                      "    } else {\r",
                      "        pm.response.to.have.status(400)\r",
                      "    }\r",
                      "})\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "// const baseUrl = pm.environment.get(\"baseUrl\")\r",
                      "\r",
                      "// const contract_scripHash_tx = pm.environment.get(\"contract_scriptHash_trx_hash\")\r",
                      "// const contract_scriptHash = pm.environment.get(\"contract_scriptHash\")\r",
                      "\r",
                      "// if (!contract_scripHash_tx) {\r",
                      "//     pm.request.url.update(`${baseUrl}/api/v1/scripts/contract-executions/d86454e6e09d8c722a8690ab6594c01a8a37715a56623298e59099ce2f2b32b1/252eba5dd7dfc83c488bb44bfe7ac79acaa18a5d0fffa412237f2294`)\r",
                      "// }\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/scripts/contract-executions/:txHash/:scriptHash",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "scripts",
                    "contract-executions",
                    ":txHash",
                    ":scriptHash"
                  ],
                  "variable": [
                    {
                      "key": "txHash",
                      "value": "{{contract_scriptHash_trx_hash}}"
                    },
                    {
                      "key": "scriptHash",
                      "value": "{{contract_scriptHash}}",
                      "description": "(Required) The script hash"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "Get smart contract detail",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/scripts/contracts/:scriptHash",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "scripts",
                        "contracts",
                        ":scriptHash"
                      ],
                      "variable": [
                        {
                          "key": "scriptHash",
                          "value": "{{contract_scriptHash}}",
                          "description": "(Required) The script hash"
                        }
                      ]
                    }
                  },
                  "_postman_previewlanguage": "Text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                }
              ]
            }
          ]
        },
        {
          "name": "pools",
          "item": [
            {
              "name": "get Data For Pool Registration",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of txId\", () => {\r",
                      "    pm.expect(jsonData.data[0].txId).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of txHash\", () => {\r",
                      "    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of txTime\", () => {\r",
                      "    let moment = require('moment');\r",
                      "    pm.expect(jsonData.data[0].txTime).to.include(moment(jsonData.data[0].txTime).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of epoch\", () => {\r",
                      "    pm.expect(jsonData.data[0].epoch).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of block\", () => {\r",
                      "    pm.expect(jsonData.data[0].block).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of slotNo\", () => {\r",
                      "    pm.expect(jsonData.data[0].slotNo).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of poolName\", () => {\r",
                      "    if (jsonData.data.poolName) {\r",
                      "        pm.expect(typeof jsonData.data[0].poolName).to.be.oneOf(['object', 'string'],\"pool name\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of pledge\", () => {\r",
                      "    pm.expect(jsonData.data[0].pledge).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of cost\", () => {\r",
                      "    pm.expect(jsonData.data[0].cost).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of margin\", () => {\r",
                      "    pm.expect(jsonData.data[0].margin).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of poolId\", () => {\r",
                      "    pm.expect(jsonData.data[0].poolId).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of poolView\", () => {\r",
                      "    pm.expect(jsonData.data[0].poolView).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Check data type of stakeKey\", () => {\r",
                      "    pm.expect(jsonData.data[0].stakeKey).to.be.a(\"array\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalItems\", () => {\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalPages\", () => {\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0) {\r",
                      "    pm.test(\"Check Size default\", function () {\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pools/registration",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pools",
                    "registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "10",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/pools/registration?page=0&size=10&sort=ex&sort=nisi de",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "pools",
                        "registration"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "10"
                        },
                        {
                          "key": "sort",
                          "value": "ex"
                        },
                        {
                          "key": "sort",
                          "value": "nisi de"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"txId\": -69105617,\n      \"txHash\": \"ipsum consequat\",\n      \"txTime\": \"1979-01-14T06:11:09.451Z\",\n      \"epoch\": 58005434,\n      \"block\": -11347924,\n      \"slotNo\": -25506253,\n      \"poolName\": \"proident sit nostrud\",\n      \"pledge\": 72661275,\n      \"cost\": -84924338,\n      \"margin\": -38106200.452744246,\n      \"poolId\": 87913724,\n      \"poolView\": \"minim enim cillum pariatur\",\n      \"stakeKey\": [\n        \"cupidatat dolor nostrud \",\n        \"voluptate qui sed\"\n      ]\n    },\n    {\n      \"txId\": -97346069,\n      \"txHash\": \"Duis officia mollit\",\n      \"txTime\": \"1997-09-04T01:11:29.956Z\",\n      \"epoch\": -37269032,\n      \"block\": -13099803,\n      \"slotNo\": 98165798,\n      \"poolName\": \"nostrud in al\",\n      \"pledge\": -85658157,\n      \"cost\": 68109134,\n      \"margin\": -38178066.14987656,\n      \"poolId\": -66965963,\n      \"poolView\": \"aliqua commodo pariatur\",\n      \"stakeKey\": [\n        \"ut exercitation\",\n        \"velit amet non\"\n      ]\n    }\n  ],\n  \"totalItems\": -73194652,\n  \"totalPages\": -87965948,\n  \"currentPage\": 24124953\n}"
                }
              ]
            },
            {
              "name": "Boundary - get Data For Pool Registration (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(100);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pools/registration?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pools",
                    "registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Data For Pool Registration (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pools/registration?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pools",
                    "registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Data For Pool Registration (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pools/registration?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pools",
                    "registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Data For Pool Registration (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pools/registration?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pools",
                    "registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get Data For Pool De Registration",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of txId\", () => {\r",
                      "  pm.expect(jsonData.data[0].txId).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of txHash\", () => {\r",
                      "  pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of txTime\", () => {\r",
                      "        let moment = require ('moment');\r",
                      "  pm.expect(jsonData.data[0].txTime).to.include(moment(jsonData.data[0].txTime).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of epoch\", () => {\r",
                      "  pm.expect(jsonData.data[0].epoch).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of block\", () => {\r",
                      "  pm.expect(jsonData.data[0].block).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of slotNo\", () => {\r",
                      "  pm.expect(jsonData.data[0].slotNo).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of poolName\", () => {\r",
                      "  pm.expect(typeof jsonData.data[0].poolName).to.be.oneOf([ 'object', 'string']);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of pledge\", () => {\r",
                      "  pm.expect(jsonData.data[0].pledge).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of cost\", () => {\r",
                      "  pm.expect(jsonData.data[0].cost).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of margin\", () => {\r",
                      "  pm.expect(jsonData.data[0].margin).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of poolId\", () => {\r",
                      "  pm.expect(jsonData.data[0].poolId).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of poolView\", () => {\r",
                      "  pm.expect(jsonData.data[0].poolView).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Check data type of stakeKey\", () => {\r",
                      "  pm.expect(jsonData.data[0].stakeKey).to.be.a(\"array\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalItems\", () => {\r",
                      "  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalPages\", () => {\r",
                      "  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pools/de-registration",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pools",
                    "de-registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "10",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/pools/de-registration?page=0&size=10&sort=ex&sort=nisi de",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "pools",
                        "de-registration"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "10"
                        },
                        {
                          "key": "sort",
                          "value": "ex"
                        },
                        {
                          "key": "sort",
                          "value": "nisi de"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"txId\": 59970717,\n      \"txHash\": \"exercitation nisi Ut adipisicing dolore\",\n      \"txTime\": \"2018-04-01T15:17:36.768Z\",\n      \"epoch\": 83063203,\n      \"block\": 83258535,\n      \"slotNo\": -31320831,\n      \"poolName\": \"in dolore do\",\n      \"pledge\": 48314021,\n      \"cost\": 57138225,\n      \"margin\": 67869859.80957842,\n      \"poolId\": -88171498,\n      \"poolView\": \"eu non elit\",\n      \"stakeKey\": [\n        \"ex Ut tempor\",\n        \"exercitation consequat cillum qui\"\n      ]\n    },\n    {\n      \"txId\": -65986589,\n      \"txHash\": \"est\",\n      \"txTime\": \"1973-03-23T00:06:08.327Z\",\n      \"epoch\": -27681178,\n      \"block\": -29657854,\n      \"slotNo\": 96714466,\n      \"poolName\": \"mollit quis tempor nisi laborum\",\n      \"pledge\": 4580049,\n      \"cost\": 7575966,\n      \"margin\": 75229326.36893436,\n      \"poolId\": 19382966,\n      \"poolView\": \"ex exercitation cillum commodo\",\n      \"stakeKey\": [\n        \"sunt qui culpa irure\",\n        \"incididunt\"\n      ]\n    }\n  ],\n  \"totalItems\": -82708800,\n  \"totalPages\": -1180880,\n  \"currentPage\": -25444804\n}"
                }
              ]
            },
            {
              "name": "Boundary - get Data For Pool De Registration (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(100);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pools/de-registration?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pools",
                    "de-registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Data For Pool De Registration (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pools/de-registration?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pools",
                    "de-registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Data For Pool De Registration (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pools/de-registration?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pools",
                    "de-registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Data For Pool De Registration (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pools/de-registration?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pools",
                    "de-registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "delegations",
          "item": [
            {
              "name": "List delegations",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].blockNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].stakeKeys[0]).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].pools).to.be.an(\"array\");\r",
                      "    if (jsonData.data.pools && jsonData.data.pools.tickerName) {\r",
                      "        pm.expect(typeof jsonData.data[0].pools[0].tickerName).to.be.oneOf(['object', 'string']);\r",
                      "    }\r",
                      "    if (jsonData.data.pools?.poolName && jsonData.data[0].pools[0].poolName) {\r",
                      "        pm.expect(typeof jsonData.data[0].pools[0].poolName).to.be.oneOf(['object', 'string']);\r",
                      "    }\r",
                      "    pm.expect(jsonData.data[0].pools[0].poolId).to.be.a(\"string\");\r",
                      "\r",
                      "});\r",
                      "\r",
                      "//Random value\r",
                      "pm.test(\"Get random data\", function () {\r",
                      "    var randomIndex = Math.floor(Math.random() * (jsonData.data.length - 1));\r",
                      "    pm.environment.set(\"PoolView\", jsonData.data[randomIndex].pools[0].poolId);\r",
                      "    console.log(jsonData.data[randomIndex].pools[0].poolId)\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0) {\r",
                      "    pm.test(\"Check Size default\", function () {\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/delegations",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "delegations"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "txId,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/delegations?page=0&size=20&sort=txId,DESC",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "delegations"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "20",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "txId,DESC",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"txHash\": \"<string>\",\n      \"time\": \"<dateTime>\",\n      \"blockNo\": \"<long>\",\n      \"epochNo\": \"<integer>\",\n      \"epochSlotNo\": \"<integer>\",\n      \"stakeKeys\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"pools\": [\n        {\n          \"tickerName\": \"<string>\",\n          \"poolName\": \"<string>\",\n          \"poolId\": \"<string>\"\n        },\n        {\n          \"tickerName\": \"<string>\",\n          \"poolName\": \"<string>\",\n          \"poolId\": \"<string>\"\n        }\n      ]\n    },\n    {\n      \"txHash\": \"<string>\",\n      \"time\": \"<dateTime>\",\n      \"blockNo\": \"<long>\",\n      \"epochNo\": \"<integer>\",\n      \"epochSlotNo\": \"<integer>\",\n      \"stakeKeys\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"pools\": [\n        {\n          \"tickerName\": \"<string>\",\n          \"poolName\": \"<string>\",\n          \"poolId\": \"<string>\"\n        },\n        {\n          \"tickerName\": \"<string>\",\n          \"poolName\": \"<string>\",\n          \"poolId\": \"<string>\"\n        }\n      ]\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Boundary - List delegations (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(100);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/delegations?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "delegations"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "txId,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - List delegations (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/delegations?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "delegations"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "txId,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - List delegations (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/delegations?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "delegations"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "txId,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - List delegations (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/delegations?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "delegations"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "txId,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Find Top(default is 3) Delegation Pool order by pool size",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of id\", () => {\r",
                      "  pm.expect(jsonData[0].id).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of poolId\", () => {\r",
                      "  pm.expect(jsonData[0].poolId).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of poolName\", () => {\r",
                      "    if(jsonData[0].poolName){\r",
                      "        pm.expect(typeof jsonData[0].poolName).to.be.oneOf([ 'object', 'string']);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of tickerName\", () => {\r",
                      "    if(jsonData[0].tickerName){\r",
                      "        pm.expect(typeof jsonData[0].tickerName).to.be.oneOf([ 'object', 'string']);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of poolSize\", () => {\r",
                      "  pm.expect(jsonData[0].poolSize).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of feePercent\", () => {\r",
                      "  pm.expect(jsonData[0].feePercent).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of feeAmount\", () => {\r",
                      "  pm.expect(jsonData[0].feeAmount).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of pledge\", () => {\r",
                      "  pm.expect(jsonData[0].pledge).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of saturation\", () => {\r",
                      "  pm.expect(jsonData[0].saturation).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of stakeLimit\", () => {\r",
                      "    if(jsonData.stakeLimit){\r",
                      "        pm.expect(typeof jsonData[0].stakeLimit).to.be.oneOf([ 'object', 'number']);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of reserves\", () => {\r",
                      "    if(jsonData.reserves){\r",
                      "        pm.expect(typeof jsonData[0].reserves).to.be.oneOf([ 'object', 'number']);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of numberDelegators\", () => {\r",
                      "    if(jsonData.numberDelegators){\r",
                      "        pm.expect(typeof jsonData[0].numberDelegators).to.be.oneOf([ 'object', 'number']);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of epochBlock\", () => {\r",
                      "    if(jsonData.epochBlock){\r",
                      "        pm.expect(typeof jsonData[0].epochBlock).to.be.oneOf([ 'object', 'number']);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of lifetimeBlock\", () => {\r",
                      "    if(jsonData.lifetimeBlock){\r",
                      "        pm.expect(typeof jsonData[0].lifetimeBlock).to.be.oneOf([ 'object', 'number']);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of kparam\", () => {\r",
                      "    if(jsonData.kpara){\r",
                      "        pm.expect(typeof jsonData[0].kparam).to.be.oneOf([ 'object', 'number']);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "//Scenario Compare api: Get top delegation with api: Get data for pool detail + Scenario Compare api get Data For Pool Table with api Get: Find Top(default is 3) Delegation Pool order by pool size\r",
                      "pm.test(\"Get data of Find Top(default is 3) Delegation Pool order by pool size api\",function (){    \r",
                      "    //Randome value\r",
                      "    var randomIndex = Math.floor(Math.random() * (jsonData.length-1));\r",
                      "    console.log(jsonData[randomIndex].poolId)\r",
                      "\r",
                      "    pm.environment.set(\"delegation_poolId\", jsonData[randomIndex].poolId);\r",
                      "    pm.environment.set(\"delegation_id\", jsonData[randomIndex].id);\r",
                      "    pm.environment.set(\"delegation_poolName\", jsonData[randomIndex].poolName);\r",
                      "    pm.environment.set(\"delegation_poolSize\", jsonData[randomIndex].poolSize);\r",
                      "    pm.environment.set(\"delegation_reward\", jsonData[randomIndex].reward);\r",
                      "    pm.environment.set(\"delegation_feePercent\", jsonData[randomIndex].feePercent);\r",
                      "    pm.environment.set(\"delegation_feeAmount\", jsonData[randomIndex].feeAmount);\r",
                      "    pm.environment.set(\"delegation_pledge\", jsonData[randomIndex].pledge);\r",
                      "    pm.environment.set(\"delegation_saturation\", jsonData[randomIndex].saturation);\r",
                      "    pm.environment.set(\"delegation_stakeLimit\", jsonData[randomIndex].stakeLimit);\r",
                      "    pm.environment.set(\"delegation_reserves\", jsonData[randomIndex].reserves);\r",
                      "    pm.environment.set(\"delegation_numberDelegators\", jsonData[randomIndex].numberDelegators);\r",
                      "    pm.environment.set(\"delegation_epochBlock\", jsonData[randomIndex].epochBlock);\r",
                      "    pm.environment.set(\"delegation_lifetimeBlock\", jsonData[randomIndex].lifetimeBlock);\r",
                      "    pm.environment.set(\"delegation_lifetimeRos\", jsonData[randomIndex].lifetimeRos);\r",
                      "    pm.environment.set(\"delegation_kparam\", jsonData[randomIndex].kparam);\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/delegations/top",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "delegations",
                    "top"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "49540002",
                      "description": "(Required) ",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/delegations/top?page=<integer>&size=<integer>&sort=<string>,<string>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "delegations",
                        "top"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "<integer>"
                        },
                        {
                          "key": "size",
                          "value": "<integer>"
                        },
                        {
                          "key": "sort",
                          "value": "<string>,<string>"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "[\n  {\n    \"id\": 3582894,\n    \"poolId\": \"consequat adipisicing Duis aliquip ex\",\n    \"poolName\": \"nostrud\",\n    \"poolSize\": 14731364,\n    \"reward\": 96686489.89773166,\n    \"feePercent\": 70993240.3232114,\n    \"feeAmount\": 32154986,\n    \"pledge\": -66983487,\n    \"saturation\": -78598465.9928881,\n    \"stakeLimit\": -9779525.051954344,\n    \"reserves\": 9067232,\n    \"kparam\": -68590999\n  },\n  {\n    \"id\": 74328075,\n    \"poolId\": \"culpa ad\",\n    \"poolName\": \"fugiat aliquip mollit Duis dolore\",\n    \"poolSize\": -74928420,\n    \"reward\": -86023865.92985769,\n    \"feePercent\": -39992146.37116823,\n    \"feeAmount\": 51348307,\n    \"pledge\": 76515746,\n    \"saturation\": -85664211.0819026,\n    \"stakeLimit\": 28665945.73204489,\n    \"reserves\": -5650423,\n    \"kparam\": -5469041\n  }\n]"
                }
              ]
            },
            {
              "name": "get Data For Pool Detail header",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "var poolName = \"StakeNuts\"\r",
                      "var hashView = \"0f292fcaa02b8b2f9b3c8f9fd8e0bb21abedb692a6d5058df3ef2735\"\r",
                      "var createDate = \"2020/07/29 22:00:31\"\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Compare poolName\", function () {\r",
                      "    pm.expect(jsonData.poolName).to.eql(pm.environment.get(\"delegation_poolName\"))\r",
                      "    || pm.expect(jsonData.poolName).to.include(pm.environment.get(\"delegation_poolName\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of createDate\", () => {\r",
                      "        let moment = require ('moment');\r",
                      "  pm.expect(jsonData.createDate).to.include(moment(jsonData.createDate).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Compare poolSize\", function () {\r",
                      "    if (jsonData.hasOwnProperty('poolSize')){\r",
                      "        pm.expect(jsonData.poolSize).to.eql(pm.environment.get(\"delegation_poolSize\"));\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Compare reward\", function () {\r",
                      "    if (jsonData.hasOwnProperty('reward')) {\r",
                      "       pm.expect(jsonData.reward).to.eql(pm.environment.get(\"delegation_reward\"));\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Compare saturation\", function () {\r",
                      "    pm.expect(jsonData.saturation).to.eql(pm.environment.get(\"delegation_saturation\"));\r",
                      "});\r",
                      "\r",
                      "//Compare format dynamic data\r",
                      "pm.test(\"Check data type of poolName\", () => {\r",
                      "  pm.expect(typeof jsonData.poolName).to.be.oneOf([ 'object', 'string']);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of tickerName\", () => {\r",
                      "  pm.expect(typeof jsonData.tickerName).to.be.oneOf([ 'object', 'string']);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of hashView\", () => {\r",
                      "  pm.expect(jsonData.hashView).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of createDate\", () => {\r",
                      "        let moment = require ('moment');\r",
                      "  pm.expect(jsonData.createDate).to.include(moment(jsonData.createDate).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of rewardAccounts\", () => {\r",
                      "  pm.expect(jsonData.rewardAccounts).to.be.a(\"array\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of ownerAccounts\", () => {\r",
                      "  pm.expect(jsonData.ownerAccounts).to.be.a(\"array\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of poolSize\", () => {\r",
                      "  pm.expect(jsonData.poolSize).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of stakeLimit\", () => {\r",
                      "  pm.expect(jsonData.stakeLimit).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of delegators\", () => {\r",
                      "  pm.expect(jsonData.delegators).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of saturation\", () => {\r",
                      "  pm.expect(jsonData.saturation).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of reward\", () => {\r",
                      "    if (jsonData.hasOwnProperty('reward')){\r",
                      "        pm.expect(jsonData.reward).to.be.a(\"number\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of ros\", () => {\r",
                      "    if (jsonData.hasOwnProperty('ros')){\r",
                      "        pm.expect(jsonData.ros).to.be.a(\"number\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of pledge\", () => {\r",
                      "  pm.expect(jsonData.pledge).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of cost\", () => {\r",
                      "  pm.expect(jsonData.cost).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of margin\", () => {\r",
                      "  pm.expect(jsonData.margin).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of epochBlock\", () => {\r",
                      "  pm.expect(jsonData.epochBlock).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of lifetimeBlock\", () => {\r",
                      "  pm.expect(jsonData.lifetimeBlock).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of poolSatatus\", ()=> {\r",
                      "    pm.expect(jsonData.poolStatus).to.contain.oneOf([\"ACTIVE\", \"RETIRED\", \"RETIRING\"])\r",
                      "})"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/delegations/pool-detail-header/{{delegation_poolId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "delegations",
                    "pool-detail-header",
                    "{{delegation_poolId}}"
                  ],
                  "variable": [
                    {
                      "key": "poolView",
                      "value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/delegations/pool-detail-header/:poolView",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "delegations",
                        "pool-detail-header",
                        ":poolView"
                      ],
                      "variable": [
                        {
                          "key": "poolView",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) "
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"poolName\": \"Excepteur\",\n  \"tickerName\": \"eu amet tempor\",\n  \"hashView\": \"Duis\",\n  \"createDate\": \"2018-02-24T10:58:22.405Z\",\n  \"rewardAccounts\": [\n    \"laboris magna dolor\",\n    \"occaecat\"\n  ],\n  \"ownerAccounts\": [\n    \"dolor aliquip\",\n    \"consectetur et\"\n  ],\n  \"poolSize\": -43266925,\n  \"stakeLimit\": -27399170.704859838,\n  \"delegators\": -44942479,\n  \"saturation\": -41829384.80113334,\n  \"reward\": -46697121.19380853,\n  \"ros\": -94606826.06914848,\n  \"pledge\": -28383056,\n  \"cost\": 52199517,\n  \"margin\": -24101332.466295972,\n  \"epochBlock\": 58539520,\n  \"lifetimeBlock\": -90504000\n}"
                }
              ]
            },
            {
              "name": "get Data For Pool Table",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "var current_page = 0\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Compare Currentpage\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of id\", () => {\r",
                      "  pm.expect(jsonData.data[0].id).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of poolId\", () => {\r",
                      "  pm.expect(jsonData.data[0].poolId).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of poolName\", () => {\r",
                      "  pm.expect(typeof jsonData.data[0].poolName).to.be.oneOf([ 'object', 'string']);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of tickerName\", () => {\r",
                      "  pm.expect(typeof jsonData.data[0].tickerName).to.be.oneOf([ 'object', 'string']);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of poolSize\", () => {\r",
                      "  pm.expect(jsonData.data[0].poolSize).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "if (!jsonData.data[0]?.reward){\r",
                      "    pm.test(\"Check data type of reward\", () => true);}\r",
                      "else {\r",
                      "    pm.test(\"Check data type of reward\",() =>{pm.expect(jsonData.data[0].reward).to.be.a(\"number\");\r",
                      "});\r",
                      "}\r",
                      "\r",
                      "pm.test(\"Check data type of feePercent\", () => {\r",
                      "  pm.expect(jsonData.data[0].feePercent).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of feeAmount\", () => {\r",
                      "  pm.expect(jsonData.data[0].feeAmount).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of pledge\", () => {\r",
                      "  pm.expect(jsonData.data[0].pledge).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of saturation\", () => {\r",
                      "  pm.expect(jsonData.data[0].saturation).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "if(!jsonData.data[0]?.stakeLimit){\r",
                      "    pm.test(\"Check data type of stakeLimit\", () =>true)}\r",
                      "else {\r",
                      "    pm.test(\"Check data type of stakeLimit\", () =>{\r",
                      "    pm.expect(typeof jsonData.data[0].stakeLimit).to.be.oneOf([ 'object', 'number']);\r",
                      "});\r",
                      "}\r",
                      "\r",
                      "if(!jsonData.data[0]?.reserves){\r",
                      "    pm.test(\"Check data type of reserves\", () =>true)}\r",
                      "else {\r",
                      "    pm.test(\"Check data type of reserves\", () =>{\r",
                      "    pm.expect(typeof jsonData.data[0].reserves).to.be.oneOf([ 'object', 'number']);\r",
                      "});\r",
                      "}\r",
                      "\r",
                      "if(!jsonData.data[0]?.kparam){\r",
                      "    pm.test(\"Check data type of kparam\", () =>true)}\r",
                      "else {\r",
                      "    pm.test(\"Check data type of kparam\", () =>{\r",
                      "    pm.expect(typeof jsonData.data[0].kparam).to.be.oneOf([ 'object', 'number']);\r",
                      "});\r",
                      "}\r",
                      "\r",
                      "pm.test(\"Check data type of numberDelegators\", () => {\r",
                      "  pm.expect(jsonData.data[0].numberDelegators).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of epochBlock\", () => {\r",
                      "  pm.expect(jsonData.data[0].epochBlock).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of lifetimeBlock\", () => {\r",
                      "  pm.expect(jsonData.data[0].lifetimeBlock).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalItems\", () => {\r",
                      "  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalPages\", () => {\r",
                      "  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "//Scenario Compare api get Data For Pool Table with api Get: Find Top(default is 3) Delegation Pool order by pool size\r",
                      "pm.test(\"Compare value between api get Data For Pool Table and api Get: Find Top(default is 3) Delegation Pool order by pool size \",function (){    \r",
                      "    var pool_id = pm.environment.get(\"delegation_poolId\");\r",
                      "    let result = jsonData.data.find(a => a.poolId === pool_id);\r",
                      "\r",
                      "    pm.expect(result.id).to.be.eql(pm.environment.get(\"delegation_id\"));\r",
                      "    pm.expect(result.poolName).to.be.eql(pm.environment.get(\"delegation_poolName\"));\r",
                      "    pm.expect(result.poolSize).to.be.eql(pm.environment.get(\"delegation_poolSize\"));\r",
                      "    if(jsonData.hasOwnProperty('reward')){\r",
                      "    pm.expect(result.reward).to.be.eql(pm.environment.get(\"delegation_reward\"));}\r",
                      "    pm.expect(result.feePercent).to.be.eql(pm.environment.get(\"delegation_feePercent\"));\r",
                      "    pm.expect(result.feeAmount).to.be.eql(pm.environment.get(\"delegation_feeAmount\"));\r",
                      "    pm.expect(result.pledge).to.be.eql(pm.environment.get(\"delegation_pledge\"));\r",
                      "    pm.expect(result.saturation).to.be.eql(pm.environment.get(\"delegation_saturation\"));\r",
                      "    if(jsonData.hasOwnProperty('stakeLimit')){\r",
                      "    pm.expect(result.stakeLimit).to.be.eql(pm.environment.get(\"delegation_stakeLimit\"));}\r",
                      "    if(jsonData.hasOwnProperty('reserves')){\r",
                      "    pm.expect(result.reserves).to.be.eql(pm.environment.get(\"delegation_reserves\"));}\r",
                      "    if(jsonData.hasOwnProperty('epochBlock')){\r",
                      "    pm.expect(result.epochBlock).to.be.eql(pm.environment.get(\"delegation_epochBlock\"));}\r",
                      "    pm.expect(result.lifetimeBlock).to.be.eql(pm.environment.get(\"delegation_lifetimeBlock\"));\r",
                      "    if(jsonData.hasOwnProperty('lifetimeRos')){\r",
                      "    pm.expect(result.lifetimeRos).to.be.eql(pm.environment.get(\"delegation_lifetimeRos\"));}\r",
                      "    if(jsonData.hasOwnProperty('kparam')){\r",
                      "    pm.expect(result.kparam).to.be.eql(pm.environment.get(\"delegation_kparam\"));}\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/delegations/pool-list?search={{delegation_poolId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "delegations",
                    "pool-list"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "10",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "{{delegation_poolId}}",
                      "description": "api/v1/delegations/top (Find Top(default is 3) Delegation Pool order by pool size)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/delegations/pool-list?page=0&size=10&sort=ex&sort=nisi de&search=enim voluptate Excepteur ullamco",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "delegations",
                        "pool-list"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "10"
                        },
                        {
                          "key": "sort",
                          "value": "ex"
                        },
                        {
                          "key": "sort",
                          "value": "nisi de"
                        },
                        {
                          "key": "search",
                          "value": "enim voluptate Excepteur ullamco"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"id\": 56657873,\n      \"poolId\": \"proident\",\n      \"poolName\": \"minim\",\n      \"poolSize\": -35015109,\n      \"reward\": -87194384.21063441,\n      \"feePercent\": -3583589.273017168,\n      \"feeAmount\": 45846948,\n      \"pledge\": -29794943,\n      \"saturation\": 30561231.61416036,\n      \"stakeLimit\": 41801323.04536271,\n      \"reserves\": -94468756,\n      \"kparam\": -63319024\n    },\n    {\n      \"id\": -79129436,\n      \"poolId\": \"quis deserunt proident\",\n      \"poolName\": \"qui reprehenderit mol\",\n      \"poolSize\": 44633391,\n      \"reward\": -25826389.001877278,\n      \"feePercent\": 92971093.67675361,\n      \"feeAmount\": -97385751,\n      \"pledge\": 37012105,\n      \"saturation\": 48226713.54193923,\n      \"stakeLimit\": 60597120.692383915,\n      \"reserves\": -84556101,\n      \"kparam\": -36002111\n    }\n  ],\n  \"totalItems\": 96964772,\n  \"totalPages\": -62017864,\n  \"currentPage\": -43079151\n}"
                }
              ]
            },
            {
              "name": "Boundary - get Data For Pool Table (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/delegations/pool-list?size=100&search={{delegation_poolId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "delegations",
                    "pool-list"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "{{delegation_poolId}}",
                      "description": "api/v1/delegations/top (Find Top(default is 3) Delegation Pool order by pool size)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Data For Pool Table (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/delegations/pool-list?size=101&search={{delegation_poolId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "delegations",
                    "pool-list"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "{{delegation_poolId}}",
                      "description": "api/v1/delegations/top (Find Top(default is 3) Delegation Pool order by pool size)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Data For Pool Table (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/delegations/pool-list?size=1&search={{delegation_poolId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "delegations",
                    "pool-list"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "{{delegation_poolId}}",
                      "description": "api/v1/delegations/top (Find Top(default is 3) Delegation Pool order by pool size)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Data For Pool Table (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/delegations/pool-list?size=-1&search={{delegation_poolId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "delegations",
                    "pool-list"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "search",
                      "value": "{{delegation_poolId}}",
                      "description": "api/v1/delegations/top (Find Top(default is 3) Delegation Pool order by pool size)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get Epoch List For Pool Detail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Compare currentPage\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(pm.environment.get(\"page\"));\r",
                      "});\r",
                      "\r",
                      "// //Set Next value for size\r",
                      "// const sizes = pm.collectionVariables.get(\"sizes\");\r",
                      "// if (sizes && sizes.length > 0){\r",
                      "//     postman.setNextRequest(\"Loop Query Parameter\");\r",
                      "// } else {\r",
                      "//     postman.setNextRequest(null);\r",
                      "// }\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type\", () => {\r",
                      "    if(jsonData.data.length > 0){\r",
                      "        pm.expect(jsonData.data[0].epoch).to.be.a(\"number\");\r",
                      "        pm.expect(typeof jsonData.data[0].block).to.be.oneOf([ 'object', 'number']);\r",
                      "        pm.expect(jsonData.data[0].stakeAmount).to.be.a(\"number\");\r",
                      "        if(jsonData.data.delegators){\r",
                      "            pm.expect(typeof jsonData.data[0].delegators).to.be.oneOf([ 'object', 'number']);\r",
                      "        }\r",
                      "        if(jsonData.data.fee){\r",
                      "            pm.expect(typeof jsonData.data[0].fee).to.be.oneOf([ 'object', 'number']);\r",
                      "        }\r",
                      "        pm.expect(jsonData.data[0].ros).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0 && jsonData.data.length > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "let pages = pm.environment.get(\"pages\");\r",
                      "let sizes = pm.environment.get(\"sizes\");\r",
                      "\r",
                      "if(!pages || pages.length == 0) {\r",
                      "    pages = [0, 5, 10, 15];\r",
                      "};\r",
                      "\r",
                      "if(!sizes || sizes.length == 0) {\r",
                      "    sizes = [5, 10, 15, 20];\r",
                      "};\r",
                      "\r",
                      "let currentPage = pages.shift();\r",
                      "let currentsize = sizes.shift();\r",
                      "\r",
                      "pm.environment.set(\"page\", currentPage);\r",
                      "pm.environment.set(\"pages\", pages);\r",
                      "\r",
                      "pm.environment.set(\"size\", currentsize);\r",
                      "pm.environment.set(\"sizes\", sizes);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/delegations/pool-detail-epochs?poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy&page={{page}}&size={{size}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "delegations",
                    "pool-detail-epochs"
                  ],
                  "query": [
                    {
                      "key": "poolView",
                      "value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                      "description": "(Required) "
                    },
                    {
                      "key": "page",
                      "value": "{{page}}",
                      "description": "Zero-based page index (0..N)"
                    },
                    {
                      "key": "size",
                      "value": "{{size}}",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/delegations/pool-detail-epochs?poolView=enim voluptate Excepteur ullamco&page=0&size=10&sort=ex&sort=nisi de",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "delegations",
                        "pool-detail-epochs"
                      ],
                      "query": [
                        {
                          "key": "poolView",
                          "value": "enim voluptate Excepteur ullamco"
                        },
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "10"
                        },
                        {
                          "key": "sort",
                          "value": "ex"
                        },
                        {
                          "key": "sort",
                          "value": "nisi de"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"epoch\": -92654896,\n      \"block\": 55846836,\n      \"stakeAmount\": -74072003,\n      \"delegators\": -89940416,\n      \"fee\": 40222707,\n      \"ros\": 63789713.64269903\n    },\n    {\n      \"epoch\": 94289102,\n      \"block\": -42009602,\n      \"stakeAmount\": 74708702,\n      \"delegators\": 37432306,\n      \"fee\": 43018810,\n      \"ros\": 98181883.15364954\n    }\n  ],\n  \"totalItems\": 36477099,\n  \"totalPages\": -40687813,\n  \"currentPage\": 71106016\n}"
                }
              ]
            },
            {
              "name": "Boundary - get Epoch List For Pool Detail (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(100);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "let pages = pm.environment.get(\"pages\");\r",
                      "let sizes = pm.environment.get(\"sizes\");\r",
                      "\r",
                      "if(!pages || pages.length == 0) {\r",
                      "    pages = [0, 5, 10, 15];\r",
                      "};\r",
                      "\r",
                      "if(!sizes || sizes.length == 0) {\r",
                      "    sizes = [5, 10, 15, 20];\r",
                      "};\r",
                      "\r",
                      "let currentPage = pages.shift();\r",
                      "let currentsize = sizes.shift();\r",
                      "\r",
                      "pm.environment.set(\"page\", currentPage);\r",
                      "pm.environment.set(\"pages\", pages);\r",
                      "\r",
                      "pm.environment.set(\"size\", currentsize);\r",
                      "pm.environment.set(\"sizes\", sizes);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/delegations/pool-detail-epochs?poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy&size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "delegations",
                    "pool-detail-epochs"
                  ],
                  "query": [
                    {
                      "key": "poolView",
                      "value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                      "description": "(Required) "
                    },
                    {
                      "key": "page",
                      "value": "",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Epoch List For Pool Detail (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "let pages = pm.environment.get(\"pages\");\r",
                      "let sizes = pm.environment.get(\"sizes\");\r",
                      "\r",
                      "if(!pages || pages.length == 0) {\r",
                      "    pages = [0, 5, 10, 15];\r",
                      "};\r",
                      "\r",
                      "if(!sizes || sizes.length == 0) {\r",
                      "    sizes = [5, 10, 15, 20];\r",
                      "};\r",
                      "\r",
                      "let currentPage = pages.shift();\r",
                      "let currentsize = sizes.shift();\r",
                      "\r",
                      "pm.environment.set(\"page\", currentPage);\r",
                      "pm.environment.set(\"pages\", pages);\r",
                      "\r",
                      "pm.environment.set(\"size\", currentsize);\r",
                      "pm.environment.set(\"sizes\", sizes);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/delegations/pool-detail-epochs?poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy&size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "delegations",
                    "pool-detail-epochs"
                  ],
                  "query": [
                    {
                      "key": "poolView",
                      "value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                      "description": "(Required) "
                    },
                    {
                      "key": "page",
                      "value": "",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Epoch List For Pool Detail (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "let pages = pm.environment.get(\"pages\");\r",
                      "let sizes = pm.environment.get(\"sizes\");\r",
                      "\r",
                      "if(!pages || pages.length == 0) {\r",
                      "    pages = [0, 5, 10, 15];\r",
                      "};\r",
                      "\r",
                      "if(!sizes || sizes.length == 0) {\r",
                      "    sizes = [5, 10, 15, 20];\r",
                      "};\r",
                      "\r",
                      "let currentPage = pages.shift();\r",
                      "let currentsize = sizes.shift();\r",
                      "\r",
                      "pm.environment.set(\"page\", currentPage);\r",
                      "pm.environment.set(\"pages\", pages);\r",
                      "\r",
                      "pm.environment.set(\"size\", currentsize);\r",
                      "pm.environment.set(\"sizes\", sizes);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/delegations/pool-detail-epochs?poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy&size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "delegations",
                    "pool-detail-epochs"
                  ],
                  "query": [
                    {
                      "key": "poolView",
                      "value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                      "description": "(Required) "
                    },
                    {
                      "key": "page",
                      "value": "",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Epoch List For Pool Detail (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "let pages = pm.environment.get(\"pages\");\r",
                      "let sizes = pm.environment.get(\"sizes\");\r",
                      "\r",
                      "if(!pages || pages.length == 0) {\r",
                      "    pages = [0, 5, 10, 15];\r",
                      "};\r",
                      "\r",
                      "if(!sizes || sizes.length == 0) {\r",
                      "    sizes = [5, 10, 15, 20];\r",
                      "};\r",
                      "\r",
                      "let currentPage = pages.shift();\r",
                      "let currentsize = sizes.shift();\r",
                      "\r",
                      "pm.environment.set(\"page\", currentPage);\r",
                      "pm.environment.set(\"pages\", pages);\r",
                      "\r",
                      "pm.environment.set(\"size\", currentsize);\r",
                      "pm.environment.set(\"sizes\", sizes);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/delegations/pool-detail-epochs?poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy&size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "delegations",
                    "pool-detail-epochs"
                  ],
                  "query": [
                    {
                      "key": "poolView",
                      "value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                      "description": "(Required) "
                    },
                    {
                      "key": "page",
                      "value": "",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get Delegator For Pool Detail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "var current_page = 0\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Compare Currentpage\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of stakeAddressId\", () => {\r",
                      "  pm.expect(jsonData.data[0].stakeAddressId).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalStake\", () => {\r",
                      "  pm.expect(jsonData.data[0].totalStake).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of time\", () => {\r",
                      "        let moment = require ('moment');\r",
                      "  pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of fee\", () => {\r",
                      "  pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of view\", () => {\r",
                      "  pm.expect(jsonData.data[0].view).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalItems\", () => {\r",
                      "  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalPages\", () => {\r",
                      "  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/delegations/pool-detail-delegators?poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "delegations",
                    "pool-detail-delegators"
                  ],
                  "query": [
                    {
                      "key": "poolView",
                      "value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                      "description": "(Required) "
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "10",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/delegations/pool-detail-delegators?poolView=enim voluptate Excepteur ullamco&page=0&size=10&sort=ex&sort=nisi de",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "delegations",
                        "pool-detail-delegators"
                      ],
                      "query": [
                        {
                          "key": "poolView",
                          "value": "enim voluptate Excepteur ullamco"
                        },
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "10"
                        },
                        {
                          "key": "sort",
                          "value": "ex"
                        },
                        {
                          "key": "sort",
                          "value": "nisi de"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"stakeAddressId\": -32681859,\n      \"totalStake\": 14284070,\n      \"time\": \"1971-03-27T21:37:41.991Z\",\n      \"fee\": 89033495,\n      \"view\": \"in\"\n    },\n    {\n      \"stakeAddressId\": -35256305,\n      \"totalStake\": -57712460,\n      \"time\": \"1957-03-08T01:55:29.442Z\",\n      \"fee\": -4704659,\n      \"view\": \"sit sunt laborum \"\n    }\n  ],\n  \"totalItems\": 12071567,\n  \"totalPages\": -48613013,\n  \"currentPage\": -36622601\n}"
                }
              ]
            },
            {
              "name": "Boundary - get Delegator For Pool Detail (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(100);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/delegations/pool-detail-delegators?poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy&size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "delegations",
                    "pool-detail-delegators"
                  ],
                  "query": [
                    {
                      "key": "poolView",
                      "value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                      "description": "(Required) "
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Delegator For Pool Detail (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/delegations/pool-detail-delegators?poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy&size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "delegations",
                    "pool-detail-delegators"
                  ],
                  "query": [
                    {
                      "key": "poolView",
                      "value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                      "description": "(Required) "
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Delegator For Pool Detail (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/delegations/pool-detail-delegators?poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy&size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "delegations",
                    "pool-detail-delegators"
                  ],
                  "query": [
                    {
                      "key": "poolView",
                      "value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                      "description": "(Required) "
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - get Delegator For Pool Detail (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/delegations/pool-detail-delegators?poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy&size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "delegations",
                    "pool-detail-delegators"
                  ],
                  "query": [
                    {
                      "key": "poolView",
                      "value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                      "description": "(Required) "
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "get Analytics For Pool Detail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of highest\", () => {\r",
                      "  pm.expect(jsonData.epochChart.highest).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of lowest\", () => {\r",
                      "  pm.expect(jsonData.epochChart.lowest).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of epochNo\", () => {\r",
                      "  pm.expect(jsonData.epochChart.dataByDays[0].epochNo).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalStake\", () => {\r",
                      "  pm.expect(jsonData.epochChart.dataByDays[0].totalStake).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of highest\", () => {\r",
                      "  pm.expect(jsonData.delegatorChart.highest).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of lowest\", () => {\r",
                      "  pm.expect(jsonData.delegatorChart.lowest).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of epochNo\", () => {\r",
                      "  pm.expect(jsonData.delegatorChart.dataByDays[0].epochNo).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of numberDelegator\", () => {\r",
                      "  pm.expect(jsonData.delegatorChart.dataByDays[0].numberDelegator).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/delegations/pool-detail-analytics?poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "delegations",
                    "pool-detail-analytics"
                  ],
                  "query": [
                    {
                      "key": "poolView",
                      "value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/delegations/pool-detail-analytics?poolView=enim voluptate Excepteur ullamco",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "delegations",
                        "pool-detail-analytics"
                      ],
                      "query": [
                        {
                          "key": "poolView",
                          "value": "enim voluptate Excepteur ullamco"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"epochChart\": {\n    \"highest\": 95116071,\n    \"lowest\": 94994121,\n    \"dataByDays\": [\n      {\n        \"epochNo\": 64196947,\n        \"totalStake\": -65716731\n      },\n      {\n        \"epochNo\": 26212799,\n        \"totalStake\": -21704251\n      }\n    ]\n  },\n  \"delegatorChart\": {\n    \"highest\": 54482618,\n    \"lowest\": -58021728,\n    \"dataByDays\": [\n      {\n        \"epochNo\": -43580719,\n        \"numberDelegator\": 31863401\n      },\n      {\n        \"epochNo\": 21100263,\n        \"numberDelegator\": -68460321\n      }\n    ]\n  }\n}"
                }
              ]
            },
            {
              "name": "get Data For Delegation Header",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "//Compare format dynamic data\r",
                      "pm.test(\"Check data type of epochNo\", () => {\r",
                      "  pm.expect(jsonData.epochNo).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of countDownEndTime\", () => {\r",
                      "  pm.expect(jsonData.countDownEndTime).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of epochSlotNo\", () => {\r",
                      "  pm.expect(jsonData.epochSlotNo).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of liveStake\", () => {\r",
                      "  pm.expect(jsonData.liveStake).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of delegators\", () => {\r",
                      "  pm.expect(jsonData.delegators).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of activePools\", () => {\r",
                      "  pm.expect(jsonData.activePools).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of delegators\", () => {\r",
                      "  pm.expect(jsonData.retiredPools).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": "{{baseUrl}}/api/v1/delegations/header"
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": "{{baseUrl}}/api/v1/delegations/header"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"epochNo\": 49668737,\n  \"countDownEndTime\": 80617641,\n  \"epochSlotNo\": 20660255,\n  \"liveStake\": 31682705,\n  \"delegators\": 86659213\n}"
                }
              ]
            },
            {
              "name": "get list of pool certificates history",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Check type of Data\r",
                      "pm.test(\"Check type of data\", function () {\r",
                      "    const data = jsonData.data[0]\r",
                      "    let moment = require('moment')\r",
                      "    pm.expect(data.txHash).to.be.a(\"string\");\r",
                      "    pm.expect(data.blockNo).to.be.a(\"number\");\r",
                      "    pm.expect(data.epochSlotNo).to.be.a(\"number\");\r",
                      "    pm.expect(data.slotNo).to.be.a(\"number\");\r",
                      "    pm.expect(data.actions[0]).to.contain.oneOf([\"POOL_REGISTRATION\", \"POOL_UPDATE\", \"POOL_DEREGISTRATION\"]);\r",
                      "    pm.expect(data.createdAt).to.include(moment(data.createdAt).format(('YYYY/MM/DD HH:mm:ss')));\r",
                      "\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pools/certificates-history/:poolViewOrHash",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pools",
                    "certificates-history",
                    ":poolViewOrHash"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "10",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "poolViewOrHash",
                      "value": "{{PoolView}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/pools/de-registration?page=0&size=10&sort=ex&sort=nisi de",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "pools",
                        "de-registration"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "10"
                        },
                        {
                          "key": "sort",
                          "value": "ex"
                        },
                        {
                          "key": "sort",
                          "value": "nisi de"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"txId\": 59970717,\n      \"txHash\": \"exercitation nisi Ut adipisicing dolore\",\n      \"txTime\": \"2018-04-01T15:17:36.768Z\",\n      \"epoch\": 83063203,\n      \"block\": 83258535,\n      \"slotNo\": -31320831,\n      \"poolName\": \"in dolore do\",\n      \"pledge\": 48314021,\n      \"cost\": 57138225,\n      \"margin\": 67869859.80957842,\n      \"poolId\": -88171498,\n      \"poolView\": \"eu non elit\",\n      \"stakeKey\": [\n        \"ex Ut tempor\",\n        \"exercitation consequat cillum qui\"\n      ]\n    },\n    {\n      \"txId\": -65986589,\n      \"txHash\": \"est\",\n      \"txTime\": \"1973-03-23T00:06:08.327Z\",\n      \"epoch\": -27681178,\n      \"block\": -29657854,\n      \"slotNo\": 96714466,\n      \"poolName\": \"mollit quis tempor nisi laborum\",\n      \"pledge\": 4580049,\n      \"cost\": 7575966,\n      \"margin\": 75229326.36893436,\n      \"poolId\": 19382966,\n      \"poolView\": \"ex exercitation cillum commodo\",\n      \"stakeKey\": [\n        \"sunt qui culpa irure\",\n        \"incididunt\"\n      ]\n    }\n  ],\n  \"totalItems\": -82708800,\n  \"totalPages\": -1180880,\n  \"currentPage\": -25444804\n}"
                }
              ]
            }
          ]
        },
        {
          "name": "tokens",
          "item": [
            {
              "name": "Filter token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of name\", () => {\r",
                      "  pm.expect(jsonData.data[0].name).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of displayName\", () => {\r",
                      "  pm.expect(jsonData.data[0].displayName).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of policy\", () => {\r",
                      "  pm.expect(jsonData.data[0].policy).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of fingerprint\", () => {\r",
                      "  pm.expect(jsonData.data[0].fingerprint).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of txCount\", () => {\r",
                      "  pm.expect(jsonData.data[0].txCount).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of supply\", () => {\r",
                      "  pm.expect(jsonData.data[0].supply).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of volumeIn24h\", () => {\r",
                      "  pm.expect(jsonData.data[0].volumeIn24h).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalVolume\", () => {\r",
                      "  pm.expect(jsonData.data[0].totalVolume).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of numberOfHolders\", () => {\r",
                      "  pm.expect(jsonData.data[0].numberOfHolders).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of createdOn\", () => {\r",
                      "        let moment = require ('moment');\r",
                      "  pm.expect(jsonData.data[0].createdOn).to.include(moment(jsonData.data[0].createdOn).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalItems\", () => {\r",
                      "  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalPages\", () => {\r",
                      "  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Check data type of totalItems\", () => {\r",
                      "  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalPages\", () => {\r",
                      "  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "//Check scenario - variable declaration\r",
                      "pm.test(\"Others value exist\",function (){\r",
                      "    \r",
                      "    //Randome value 0-9\r",
                      "    var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));\r",
                      "    console.log(randomIndex);\r",
                      "    \r",
                      "    pm.environment.set(\"token_data_txCount\", jsonData.data[randomIndex].txCount)\r",
                      "    pm.environment.set(\"token_data_fingerprint\", jsonData.data[randomIndex].fingerprint)\r",
                      "    pm.environment.set(\"token_name\", jsonData.data[randomIndex].name);\r",
                      "    pm.environment.set(\"token_displayName\", jsonData.data[randomIndex].displayName);\r",
                      "    pm.environment.set(\"token_policy\", jsonData.data[randomIndex].policy);\r",
                      "    pm.environment.set(\"token_fingerprint\", jsonData.data[randomIndex].fingerprint);\r",
                      "    pm.environment.set(\"token_txCount\", jsonData.data[randomIndex].txCount);\r",
                      "    pm.environment.set(\"token_supply\", jsonData.data[randomIndex].supply);\r",
                      "    pm.environment.set(\"token_volumeIn24h\", jsonData.data[randomIndex].volumeIn24h);\r",
                      "    pm.environment.set(\"token_totalVolume\", jsonData.data[randomIndex].totalVolume);\r",
                      "    pm.environment.set(\"token_numberOfHolders\", jsonData.data[randomIndex].numberOfHolders);\r",
                      "    pm.environment.set(\"token_createdOn\", jsonData.data[randomIndex].createdOn);\r",
                      "\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tokens",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tokens"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "10",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "supply,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "txCount,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/tokens?page=0&size=20&sort=supply,DESC&sort=txCount,DESC",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "tokens"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "20"
                        },
                        {
                          "key": "sort",
                          "value": "supply,DESC"
                        },
                        {
                          "key": "sort",
                          "value": "txCount,DESC"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"id\": -48028014,\n      \"name\": \"commodo Excepte\",\n      \"displayName\": \"sint in magna non\",\n      \"policy\": \"proident id enim\",\n      \"fingerprint\": \"ut est in\",\n      \"txCount\": 59650504,\n      \"supply\": \"nisi deserunt sed\",\n      \"volumeIn24h\": \"id est commodo\",\n      \"totalVolume\": \"cillum sunt officia Lorem\",\n      \"numberOfHolders\": 58874026,\n      \"createdOn\": \"2004-07-06T06:19:43.072Z\",\n      \"metadata\": {\n        \"url\": \"aliquip ad\",\n        \"ticker\": \"velit dolore sit\",\n        \"decimals\": 33027460,\n        \"logo\": \"consectetur\",\n        \"description\": \"eiusmod tempor\"\n      }\n    },\n    {\n      \"id\": 93762100,\n      \"name\": \"exercitation in laborum aliquip\",\n      \"displayName\": \"sit cillum consequat\",\n      \"policy\": \"commodo ipsum tempor\",\n      \"fingerprint\": \"dolor\",\n      \"txCount\": -49335603,\n      \"supply\": \"et sed ut\",\n      \"volumeIn24h\": \"mollit culpa officia aute magna\",\n      \"totalVolume\": \"commodo ad dolor eu\",\n      \"numberOfHolders\": 16182956,\n      \"createdOn\": \"1969-10-29T12:18:21.392Z\",\n      \"metadata\": {\n        \"url\": \"dolor minim ut exercitation laborum\",\n        \"ticker\": \"amet eiusmod\",\n        \"decimals\": -8806910,\n        \"logo\": \"Ut proident consectetur sed\",\n        \"description\": \"ex\"\n      }\n    }\n  ],\n  \"totalItems\": 98576305,\n  \"totalPages\": 43181628,\n  \"currentPage\": 47532177\n}"
                }
              ]
            },
            {
              "name": "Boundary - Filter token (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(100);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tokens?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tokens"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "supply,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "txCount,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Filter token (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tokens?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tokens"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "supply,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "txCount,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Filter token (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tokens?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tokens"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "supply,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "txCount,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Filter token (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tokens?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tokens"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "supply,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "txCount,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Filter transaction by token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of hash\", () => {\r",
                      "    pm.expect(jsonData.data[0].hash).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of blockNo\", () => {\r",
                      "    pm.expect(jsonData.data[0].blockNo).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of blockHash\", () => {\r",
                      "    pm.expect(jsonData.data[0].blockHash).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of epochNo\", () => {\r",
                      "    pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of epochSlotNo\", () => {\r",
                      "    pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of slot\", () => {\r",
                      "    pm.expect(jsonData.data[0].slot).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of time\", () => {\r",
                      "    pm.expect(jsonData.data[0].time).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of addressesInput\", () => {\r",
                      "    pm.expect(jsonData.data[0].addressesInput).to.be.a(\"array\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of addressesOutput\", () => {\r",
                      "    pm.expect(jsonData.data[0].addressesOutput).to.be.a(\"array\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of fee\", () => {\r",
                      "    pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalOutput\", () => {\r",
                      "    pm.expect(jsonData.data[0].totalOutput).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalItems\", () => {\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalPages\", () => {\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of balance\", function () {\r",
                      "    if (jsonData.data[0].balance) {\r",
                      "        console.log(jsonData.data[0].balance)\r",
                      "        pm.expect(typeof jsonData.data[0].balance).to.be.oneOf(['object', 'number']);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of tokens\", () => {\r",
                      "    pm.expect(jsonData.data[0].tokens).to.be.a(\"array\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalItems\", () => {\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalPages\", () => {\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "//Check scenario compare data Filter transaction by token api with Filter token api - Data called from Filter token api: /api/v1/tokens\r",
                      "pm.test(\"Compare totalItems with txCount of filter token\", function () {\r",
                      "    pm.expect(jsonData.totalItems).to.eql(pm.environment.get(\"token_data_txCount\"));\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0) {\r",
                      "    pm.test(\"Check Size default\", function () {\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tokens/{{token_data_fingerprint}}/txs",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tokens",
                    "{{token_data_fingerprint}}",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "10",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "tokenId",
                      "value": "{{token_data_fingerprint}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/tokens/:tokenId/txs?page=0&size=20&sort=ex&sort=nisi de",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "tokens",
                        ":tokenId",
                        "txs"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "20"
                        },
                        {
                          "key": "sort",
                          "value": "ex"
                        },
                        {
                          "key": "sort",
                          "value": "nisi de"
                        }
                      ],
                      "variable": [
                        {
                          "key": "tokenId",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) "
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"hash\": \"Excepteur sed labore\",\n      \"blockNo\": -46806813,\n      \"blockHash\": \"nisi in incididunt quis\",\n      \"epochNo\": -60608740,\n      \"epochSlotNo\": 68641533,\n      \"slot\": -54192140,\n      \"time\": \"1953-04-19T18:45:29.774Z\",\n      \"addressesInput\": [\n        \"consequat id\",\n        \"irure dolore\"\n      ],\n      \"addressesOutput\": [\n        \"dolor ea\",\n        \"magna laborum\"\n      ],\n      \"fee\": 14511110,\n      \"totalOutput\": 33083216,\n      \"balance\": 91663821,\n      \"tokens\": [\n        {\n          \"addressId\": -2475162,\n          \"address\": \"consequat\",\n          \"policy\": \"est qui in in\",\n          \"metadata\": {\n            \"url\": \"ea voluptate commodo nisi nostrud\",\n            \"ticker\": \"ex aliqua\",\n            \"decimals\": 35611207,\n            \"logo\": \"nostrud Excepteur qui\",\n            \"description\": \"cillum\"\n          },\n          \"name\": \"do fugiat reprehenderit ipsu\",\n          \"displayName\": \"occaecat ex\",\n          \"fingerprint\": \"minim d\",\n          \"quantity\": -28150056\n        },\n        {\n          \"addressId\": -70424671,\n          \"address\": \"laboris\",\n          \"policy\": \"dolor in incididunt\",\n          \"metadata\": {\n            \"url\": \"Excepteur reprehenderit\",\n            \"ticker\": \"sed Du\",\n            \"decimals\": 21239598,\n            \"logo\": \"ut enim\",\n            \"description\": \"amet officia nulla\"\n          },\n          \"name\": \"laborum reprehenderit deserunt\",\n          \"displayName\": \"eu nisi voluptate\",\n          \"fingerprint\": \"sed in\",\n          \"quantity\": 73188167\n        }\n      ]\n    },\n    {\n      \"hash\": \"occaecat non anim labore\",\n      \"blockNo\": -32853053,\n      \"blockHash\": \"pariatur sed dolore dolore\",\n      \"epochNo\": 92981403,\n      \"epochSlotNo\": 57548782,\n      \"slot\": 93943643,\n      \"time\": \"1977-06-16T06:16:08.168Z\",\n      \"addressesInput\": [\n        \"cillum enim\",\n        \"velit Duis minim aute\"\n      ],\n      \"addressesOutput\": [\n        \"officia fugiat Lorem\",\n        \"sint\"\n      ],\n      \"fee\": 87483890,\n      \"totalOutput\": 66035495,\n      \"balance\": -36872582,\n      \"tokens\": [\n        {\n          \"addressId\": 40282102,\n          \"address\": \"dolore ea Lorem eu consectetur\",\n          \"policy\": \"sed cillum\",\n          \"metadata\": {\n            \"url\": \"est exercitation irure\",\n            \"ticker\": \"ex voluptate\",\n            \"decimals\": 66574392,\n            \"logo\": \"exercitation eiusmod velit\",\n            \"description\": \"incididunt irure ut nostrud\"\n          },\n          \"name\": \"amet laboris sunt aute sint\",\n          \"displayName\": \"do\",\n          \"fingerprint\": \"mollit officia commodo enim in\",\n          \"quantity\": 96432812\n        },\n        {\n          \"addressId\": 61875921,\n          \"address\": \"dolore sit\",\n          \"policy\": \"sit dolor minim in\",\n          \"metadata\": {\n            \"url\": \"voluptate veniam laborum exercita\",\n            \"ticker\": \"dolore dolor\",\n            \"decimals\": -85521489,\n            \"logo\": \"sunt mollit nisi\",\n            \"description\": \"proident\"\n          },\n          \"name\": \"nisi aliquip anim\",\n          \"displayName\": \"cillum aute\",\n          \"fingerprint\": \"ut dolore\",\n          \"quantity\": -50581416\n        }\n      ]\n    }\n  ],\n  \"totalItems\": -30498291,\n  \"totalPages\": 48123678,\n  \"currentPage\": -67438345\n}"
                }
              ]
            },
            {
              "name": "Boundary - Filter transaction by token (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(100);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tokens/{{token_data_fingerprint}}/txs?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tokens",
                    "{{token_data_fingerprint}}",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "tokenId",
                      "value": "{{token_data_fingerprint}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Filter transaction by token (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tokens/{{token_data_fingerprint}}/txs?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tokens",
                    "{{token_data_fingerprint}}",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "tokenId",
                      "value": "{{token_data_fingerprint}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Filter transaction by token (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tokens/{{token_data_fingerprint}}/txs?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tokens",
                    "{{token_data_fingerprint}}",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "tokenId",
                      "value": "{{token_data_fingerprint}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Filter transaction by token (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tokens/{{token_data_fingerprint}}/txs?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tokens",
                    "{{token_data_fingerprint}}",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "tokenId",
                      "value": "{{token_data_fingerprint}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Detail token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// var stt = \"200\";\r",
                      "// stt = pm.variables.get(\"stt\");\r",
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "//Scenario compare data Detail token api with Filter token api - Data called from api Filter token: /api/v1/tokens\r",
                      "pm.test(\"Check name value\", function () {\r",
                      "    pm.expect(jsonData.name).to.include(pm.environment.get(\"token_name\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check displayName value\", function () {\r",
                      "    pm.expect(jsonData.displayName).to.include(pm.environment.get(\"token_displayName\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check policy value\", function () {\r",
                      "    pm.expect(jsonData.policy).to.include(pm.environment.get(\"token_policy\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check fingerprint value\", function () {\r",
                      "    pm.expect(jsonData.fingerprint).to.include(pm.environment.get(\"token_fingerprint\"));\r",
                      "});\r",
                      "\r",
                      "if (jsonData.txCount) {\r",
                      "    pm.test(\"Check txCount value\", function () {\r",
                      "        pm.expect(jsonData.txCount).to.eql(pm.environment.get(\"token_txCount\"));\r",
                      "    });\r",
                      "}\r",
                      "\r",
                      "pm.test(\"Check supply value\", function () {\r",
                      "    pm.expect(jsonData.supply).to.contain(pm.environment.get(\"token_supply\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check volumeIn24h value\", function () {\r",
                      "    pm.expect(jsonData.volumeIn24h).to.contain(pm.environment.get(\"token_volumeIn24h\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check totalVolume value\", function () {\r",
                      "    pm.expect(jsonData.totalVolume).to.equal(pm.environment.get(\"token_totalVolume\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check numberOfHolders value\", function () {\r",
                      "    pm.expect(jsonData.numberOfHolders).to.eql(pm.environment.get(\"token_numberOfHolders\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check createdOn value\", function () {\r",
                      "    pm.expect(jsonData.createdOn).to.contain(pm.environment.get(\"token_createdOn\"));\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of name\", () => {\r",
                      "    pm.expect(jsonData.name).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of displayName\", () => {\r",
                      "    pm.expect(jsonData.displayName).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of supply\", () => {\r",
                      "    pm.expect(jsonData.supply).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalVolume\", () => {\r",
                      "    pm.expect(jsonData.totalVolume).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of numberOfHolders\", () => {\r",
                      "    pm.expect(jsonData.numberOfHolders).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of createdOn\", () => {\r",
                      "    let moment = require('moment')\r",
                      "    pm.expect(jsonData.createdOn).to.include(moment(jsonData.createdOn).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of tokenLastActivity\", () => {\r",
                      "    let moment = require('moment')\r",
                      "    pm.expect(jsonData.tokenLastActivity).to.include(moment(jsonData.tokenLastActivity).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of tokenType\", () => {\r",
                      "    pm.expect(jsonData.tokenType).to.contain.oneOf([\"NFT\", \"FT\"])\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of metadataJson\", () => {\r",
                      "    if (jsonData.metadataJson) {\r",
                      "        const policy = pm.environment.get(\"token_policy\")\r",
                      "        const tokenName = pm.environment.get(\"token_displayName\")\r",
                      "        const metadataJsonData = JSON.parse(jsonData.metadataJson)[policy][tokenName]\r",
                      "        console.log(metadataJsonData)\r",
                      "        if (metadataJsonData[tokenName]?.website) {\r",
                      "            pm.expect(metadataJsonData[tokenName].website).to.be.a(\"string\", \"metadataJsonData.website\");\r",
                      "        }\r",
                      "        if (metadataJsonData[tokenName]?.image) {\r",
                      "            pm.expect(metadataJsonData[tokenName].image).to.be.a(\"string\", \"metadataJsonData.image\")\r",
                      "        }\r",
                      "        if (metadataJsonData[tokenName]?.attributes && metadataJsonData[tokenName].attributes.edition) {\r",
                      "            pm.expect(metadataJsonData[tokenName].attributes.edition).to.be.a(\"string\", \"metadataJsonData.image\")\r",
                      "        }\r",
                      "        if (metadataJsonData[tokenName]?.effect && metadataJsonData[tokenName].effect.length > 0) {\r",
                      "            pm.expect(metadataJsonData[tokenName].effect[0]).to.be.an(\"array\")\r",
                      "        }\r",
                      "        if (metadataJsonData[tokenName]?.mediaType) {\r",
                      "            pm.expect(metadataJsonData[tokenName].mediaType).to.be.an(\"string\")\r",
                      "        }\r",
                      "        if (metadataJsonData[tokenName]?.name) {\r",
                      "            pm.expect(metadataJsonData[tokenName].name).to.be.an(\"string\")\r",
                      "        }\r",
                      "    }\r",
                      "})\r",
                      "\r",
                      "pm.test(\"Check type of metadataCIP25\", () => {\r",
                      "    const metadataCIP25 = jsonData.metadataCIP25\r",
                      "    const token_name = pm.environment.get('token_displayName')\r",
                      "    const tokenData = metadataCIP25.tokenMap[token_name]\r",
                      "    if (tokenData) {\r",
                      "        const requirePropertiesData = tokenData?.requireProperties[0]\r",
                      "        const optionalPropertiesData = tokenData?.optionalProperties[0]\r",
                      "\r",
                      "        pm.expect(tokenData.tokenName).to.eql(token_name)\r",
                      "        if (requirePropertiesData && requirePropertiesData.length > 0) {\r",
                      "            pm.expect(requirePropertiesData.index).to.be.a(\"string\")\r",
                      "            pm.expect(requirePropertiesData.valid).to.be.a(\"boolean\")\r",
                      "            pm.expect(requirePropertiesData.value).to.be.a(\"string\")\r",
                      "            pm.expect(requirePropertiesData.property).to.be.a(\"string\")\r",
                      "            pm.expect(requirePropertiesData.format).to.be.a(\"string\")\r",
                      "        }\r",
                      "        if (optionalPropertiesData && optionalPropertiesData.length > 0) {\r",
                      "            pm.expect(optionalPropertiesData.index).to.be.a(\"string\")\r",
                      "            pm.expect(optionalPropertiesData.valid).to.be.a(\"boolean\")\r",
                      "            pm.expect(optionalPropertiesData.value).to.be.a(\"string\")\r",
                      "            pm.expect(optionalPropertiesData.property).to.be.a(\"string\")\r",
                      "            pm.expect(optionalPropertiesData.format).to.be.a(\"string\")\r",
                      "        }\r",
                      "        pm.expect(metadataCIP25.valid).to.be.a(\"boolean\")\r",
                      "    }\r",
                      "})\r",
                      "\r",
                      "pm.test(\"Check type of metadataCIP60\", () => {\r",
                      "    const metadataCIP60 = jsonData.metadataCIP60\r",
                      "    const token_name = pm.environment.get('token_displayName')\r",
                      "    const tokenData = metadataCIP60.tokenMap[token_name]\r",
                      "    if (tokenData) {\r",
                      "        const requirePropertiesData = tokenData?.requireProperties[0]\r",
                      "        const optionalPropertiesData = tokenData?.optionalProperties[0]\r",
                      "\r",
                      "        pm.expect(tokenData.tokenName).to.eql(token_name)\r",
                      "        if (requirePropertiesData && requirePropertiesData.length > 0) {\r",
                      "            pm.expect(requirePropertiesData.index).to.be.a(\"string\")\r",
                      "            pm.expect(requirePropertiesData.valid).to.be.a(\"boolean\")\r",
                      "            pm.expect(requirePropertiesData.value).to.be.a(\"string\")\r",
                      "            pm.expect(requirePropertiesData.property).to.be.a(\"string\")\r",
                      "            pm.expect(requirePropertiesData.format).to.be.a(\"string\")\r",
                      "        }\r",
                      "        if (optionalPropertiesData && optionalPropertiesData.length > 0) {\r",
                      "            pm.expect(optionalPropertiesData.index).to.be.a(\"string\")\r",
                      "            pm.expect(optionalPropertiesData.valid).to.be.a(\"boolean\")\r",
                      "            pm.expect(optionalPropertiesData.value).to.be.a(\"string\")\r",
                      "            pm.expect(optionalPropertiesData.property).to.be.a(\"string\")\r",
                      "            pm.expect(optionalPropertiesData.format).to.be.a(\"string\")\r",
                      "        }\r",
                      "        pm.expect(metadataCIP60.valid).to.be.a(\"boolean\")\r",
                      "    }\r",
                      "})\r",
                      "\r",
                      "\r",
                      "\r",
                      "//Deleted level 2\r",
                      "// pm.test(\"Check data type of url\", () => {\r",
                      "//   pm.expect(jsonData.metadata.url).to.be.a(\"string\");\r",
                      "// });  \r",
                      "\r",
                      "// pm.test(\"Check data type of ticker\", () => {\r",
                      "//   pm.expect(jsonData.metadata.ticker).to.be.a(\"string\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Check data type of decimals\", () => {\r",
                      "//   pm.expect(jsonData.metadata.decimals).to.be.a(\"number\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Check data type of logo\", () => {\r",
                      "//   pm.expect(jsonData.metadata.logo).to.be.a(\"string\");\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Check data type of description\", () => {\r",
                      "//   pm.expect(jsonData.metadata.description).to.be.a(\"string\");\r",
                      "// });\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tokens/{{token_data_fingerprint}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tokens",
                    "{{token_data_fingerprint}}"
                  ],
                  "variable": [
                    {
                      "key": "tokenId",
                      "value": "{{token_data_fingerprint}}",
                      "description": "API Filter token: /api/v1/tokens"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/tokens/:tokenId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "tokens",
                        ":tokenId"
                      ],
                      "variable": [
                        {
                          "key": "tokenId",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) "
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"name\": \"dolor laboris culpa\",\n  \"displayName\": \"Duis\",\n  \"policy\": \"in voluptate \",\n  \"fingerprint\": \"nulla id pariatur\",\n  \"txCount\": -4532516,\n  \"supply\": \"et pariatur amet cillum\",\n  \"volumeIn24h\": \"et quis commodo sint\",\n  \"totalVolume\": \"ex irure\",\n  \"numberOfHolders\": -11792078,\n  \"createdOn\": \"2021-09-21T20:38:07.623Z\",\n  \"metadata\": {\n    \"url\": \"fugiat aliqua magna sunt\",\n    \"ticker\": \"labore anim eiusmod\",\n    \"decimals\": -91474124,\n    \"logo\": \"laborum occaecat deserunt ad\",\n    \"description\": \"non veniam in\"\n  }\n}"
                }
              ]
            },
            {
              "name": "Filter holders by token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of address\", () => {\r",
                      "  pm.expect(jsonData.data[0].address).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of quantity\", () => {\r",
                      "  pm.expect(jsonData.data[0].quantity).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of addressType\", () => {\r",
                      "  pm.expect(jsonData.data[0].addressType).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalItems\", () => {\r",
                      "  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalPages\", () => {\r",
                      "  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tokens/:tokenId/top_holders",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tokens",
                    ":tokenId",
                    "top_holders"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "tokenId",
                      "value": "asset17q7r59zlc3dgw0venc80pdv566q6yguw03f0d9",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/tokens/:tokenId/top_holders?page=0&size=20&sort=ex&sort=nisi de",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "tokens",
                        ":tokenId",
                        "top_holders"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "20"
                        },
                        {
                          "key": "sort",
                          "value": "ex"
                        },
                        {
                          "key": "sort",
                          "value": "nisi de"
                        }
                      ],
                      "variable": [
                        {
                          "key": "tokenId",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) "
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"addressId\": -56637167,\n      \"address\": \"laboris labore eu id\",\n      \"policy\": \"cillum ea elit\",\n      \"metadata\": {\n        \"url\": \"deserunt\",\n        \"ticker\": \"sed officia\",\n        \"decimals\": 81505882,\n        \"logo\": \"culpa aliquip\",\n        \"description\": \"sit adipisicing\"\n      },\n      \"name\": \"in adipisicing velit\",\n      \"displayName\": \"e\",\n      \"fingerprint\": \"enim laborum Duis\",\n      \"quantity\": 76374386\n    },\n    {\n      \"addressId\": -95565450,\n      \"address\": \"cillum cupidatat\",\n      \"policy\": \"sit\",\n      \"metadata\": {\n        \"url\": \"in ad voluptate Duis\",\n        \"ticker\": \"qui esse\",\n        \"decimals\": -32615745,\n        \"logo\": \"in\",\n        \"description\": \"dolor mollit\"\n      },\n      \"name\": \"irure dolor culpa\",\n      \"displayName\": \"qui\",\n      \"fingerprint\": \"culpa ulla\",\n      \"quantity\": 8717507\n    }\n  ],\n  \"totalItems\": 79962271,\n  \"totalPages\": -82813616,\n  \"currentPage\": 29412550\n}"
                }
              ]
            },
            {
              "name": "Boundary - Filter holders by token (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(100);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tokens/:tokenId/top_holders?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tokens",
                    ":tokenId",
                    "top_holders"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "tokenId",
                      "value": "asset17q7r59zlc3dgw0venc80pdv566q6yguw03f0d9",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Filter holders by token (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tokens/:tokenId/top_holders?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tokens",
                    ":tokenId",
                    "top_holders"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "tokenId",
                      "value": "asset17q7r59zlc3dgw0venc80pdv566q6yguw03f0d9",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Filter holders by token (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tokens/:tokenId/top_holders?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tokens",
                    ":tokenId",
                    "top_holders"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "tokenId",
                      "value": "asset17q7r59zlc3dgw0venc80pdv566q6yguw03f0d9",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Filter holders by token (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tokens/:tokenId/top_holders?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tokens",
                    ":tokenId",
                    "top_holders"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "2",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "tokenId",
                      "value": "asset17q7r59zlc3dgw0venc80pdv566q6yguw03f0d9",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Filter token mint transaction",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of txHash\", () => {\r",
                      "  pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of amount\", () => {\r",
                      "  pm.expect(jsonData.data[0].amount).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of createdOn\", () => {\r",
                      "        let moment = require ('moment');\r",
                      "  pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "pm.test(\"Check data type of totalItems\", () => {\r",
                      "  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalPages\", () => {\r",
                      "  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tokens/:tokenId/mints",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tokens",
                    ":tokenId",
                    "mints"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "5",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "tokenId",
                      "value": "asset17q7r59zlc3dgw0venc80pdv566q6yguw03f0d9",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/tokens/:tokenId/mints?page=0&size=20&sort=id,DESC",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "tokens",
                        ":tokenId",
                        "mints"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "20"
                        },
                        {
                          "key": "sort",
                          "value": "id,DESC"
                        }
                      ],
                      "variable": [
                        {
                          "key": "tokenId",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) "
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"txHash\": \"id consectetur laborum elit in\",\n      \"amount\": \"occaecat anim aliquip\",\n      \"time\": \"1970-06-11T23:19:14.715Z\"\n    },\n    {\n      \"txHash\": \"quis dolor\",\n      \"amount\": \"nisi sit consectetur velit\",\n      \"time\": \"2001-01-25T06:12:20.905Z\"\n    }\n  ],\n  \"totalItems\": 73010671,\n  \"totalPages\": 84853465,\n  \"currentPage\": 20364577\n}"
                }
              ]
            },
            {
              "name": "Boundary - Filter token mint transaction (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tokens/:tokenId/mints?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tokens",
                    ":tokenId",
                    "mints"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "tokenId",
                      "value": "asset17q7r59zlc3dgw0venc80pdv566q6yguw03f0d9",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Filter token mint transaction (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tokens/:tokenId/mints?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tokens",
                    ":tokenId",
                    "mints"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "tokenId",
                      "value": "asset17q7r59zlc3dgw0venc80pdv566q6yguw03f0d9",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Filter token mint transaction (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tokens/:tokenId/mints?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tokens",
                    ":tokenId",
                    "mints"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "tokenId",
                      "value": "asset17q7r59zlc3dgw0venc80pdv566q6yguw03f0d9",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Filter token mint transaction (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tokens/:tokenId/mints?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tokens",
                    ":tokenId",
                    "mints"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "tokenId",
                      "value": "asset17q7r59zlc3dgw0venc80pdv566q6yguw03f0d9",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Filter transaction by token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of date\", () => {\r",
                      "        let moment = require ('moment');\r",
                      "  pm.expect(jsonData[0].date).to.include(moment(jsonData[0].date).format('YYYY/MM/DD'));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of value\", () => {\r",
                      "  pm.expect(typeof jsonData[0].value).to.be.oneOf([ 'object', 'number']);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/tokens/analytics/:tokenId/:type",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "tokens",
                    "analytics",
                    ":tokenId",
                    ":type"
                  ],
                  "variable": [
                    {
                      "key": "tokenId",
                      "value": "asset17q7r59zlc3dgw0venc80pdv566q6yguw03f0d9",
                      "description": "(Required) "
                    },
                    {
                      "key": "type",
                      "value": "ONE_DAY",
                      "description": "(Required) Type analytics: 1d, 1w, 1m, 3m"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/tokens/analytics/:tokenId/:type",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "tokens",
                        "analytics",
                        ":tokenId",
                        ":type"
                      ],
                      "variable": [
                        {
                          "key": "tokenId",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) "
                        },
                        {
                          "key": "type",
                          "value": "THREE_MONTH",
                          "description": "(Required) Type analytics: 1d, 1w, 1m, 3m"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "[\n  {\n    \"date\": \"1974-01-28\",\n    \"value\": 97554919\n  },\n  {\n    \"date\": \"1997-05-23\",\n    \"value\": 32469025\n  }\n]"
                }
              ]
            }
          ]
        },
        {
          "name": "addresses",
          "item": [
            {
              "name": "Get top addresses",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of address\", () => {\r",
                      "  pm.expect(jsonData.data[0].address).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of txCount\", () => {\r",
                      "  pm.expect(jsonData.data[0].txCount).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of balance\", () => {\r",
                      "  pm.expect(jsonData.data[0].balance).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of balance\", () => {\r",
                      "  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of balance\", () => {\r",
                      "  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "//Check scenario - Variable declaration\r",
                      "pm.test(\"Others value exist\",function (){\r",
                      "    \r",
                      "    //Randome value 0-9\r",
                      "    var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));\r",
                      "    console.log(randomIndex);\r",
                      "    \r",
                      "    pm.environment.set(\"address_address\", jsonData.data[randomIndex].address);\r",
                      "    pm.environment.set(\"address_txCount\", jsonData.data[randomIndex].txCount);\r",
                      "    pm.environment.set(\"address_balance\", jsonData.data[randomIndex].balance);\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/addresses/top-addresses",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "addresses",
                    "top-addresses"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "5",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/addresses/top-addresses?page=0&size=20&sort=ex&sort=nisi de",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "addresses",
                        "top-addresses"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "20"
                        },
                        {
                          "key": "sort",
                          "value": "ex"
                        },
                        {
                          "key": "sort",
                          "value": "nisi de"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"address\": \"sit aliquip ex\",\n      \"txCount\": 24208350,\n      \"balance\": -41043114\n    },\n    {\n      \"address\": \"pariatur\",\n      \"txCount\": -68428665,\n      \"balance\": -21601964\n    }\n  ],\n  \"totalItems\": -85662247,\n  \"totalPages\": 61390795,\n  \"currentPage\": -23235984\n}"
                }
              ]
            },
            {
              "name": "Boundary - Get top addresses (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(100);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/addresses/top-addresses?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "addresses",
                    "top-addresses"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get top addresses (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/addresses/top-addresses?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "addresses",
                    "top-addresses"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get top addresses (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/addresses/top-addresses?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "addresses",
                    "top-addresses"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get top addresses (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/addresses/top-addresses?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "addresses",
                    "top-addresses"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get a address detail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// var stt = \"200\";\r",
                      "// stt = pm.variables.get(\"stt\");\r",
                      "    var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      " //Scenario compare data Get a address detail api with get top addresses api - Data called from Get top addresses api: /api/v1/addresses/top-addresses\r",
                      "pm.test(\"Check address value\", function () {\r",
                      "    pm.expect(jsonData.address).to.include(pm.environment.get(\"address_address\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check txCount value\", function () {\r",
                      "    pm.expect(jsonData.txCount).to.equal(pm.environment.get(\"address_txCount\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check balance value\", function () {\r",
                      "    pm.expect(jsonData.balance).to.eql(pm.environment.get(\"address_balance\"));\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of address\", () => {\r",
                      "  pm.expect(jsonData.address).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of txCount\", () => {\r",
                      "  pm.expect(jsonData.txCount).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of balance\", () => {\r",
                      "  pm.expect(jsonData.balance).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of stakeAddress\", () => {\r",
                      "    if(jsonData.stakeAddress){\r",
                      "        pm.expect(typeof jsonData.stakeAddress).to.be.oneOf([ 'object', 'string']);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of isContract\", function () {\r",
                      "    if (jsonData.hasOwnProperty('isContract')) {\r",
                      "       pm.expect(jsonData.isContract).to.be.a(\"boolean\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of verifiedContract\", function () {\r",
                      "    if (jsonData.hasOwnProperty('verifiedContract')) {\r",
                      "       pm.expect(jsonData.isContract).to.be.a(\"boolean\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "pm.environment.set(\"address\", \"Ae2tdPwUPEYwFx4dmJheyNPPYXtvHbJLeCaA96o6Y2iiUL18cAt7AizN2zG\");\r",
                      "pm.environment.set(\"address\", \"123\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/addresses/{{address_address}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "addresses",
                    "{{address_address}}"
                  ],
                  "variable": [
                    {
                      "key": "address",
                      "value": "{{address_address}}",
                      "description": "API Get top addresses: /api/v1/addresses/top-addresses"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/addresses/:address",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "addresses",
                        ":address"
                      ],
                      "variable": [
                        {
                          "key": "address",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) Address"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"address\": \"non\",\n  \"txCount\": -35068675,\n  \"balance\": -56411490,\n  \"stakeAddress\": \"culpa Duis\",\n  \"isContract\": true,\n  \"verifiedContract\": true\n}"
                }
              ]
            },
            {
              "name": "Get the highest and lowest balance address",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json()\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of hash\", () => {\r",
                      "  pm.expect(jsonData.data[0].hash).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of blockNo\", () => {\r",
                      "  pm.expect(jsonData.data[0].blockNo).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of blockHash\", () => {\r",
                      "  pm.expect(jsonData.data[0].blockHash).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of epochNo\", () => {\r",
                      "  pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of epochSlotNo\", () => {\r",
                      "  pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of slot\", () => {\r",
                      "  pm.expect(jsonData.data[0].slot).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of time\", () => {\r",
                      "        let moment = require ('moment');\r",
                      "  pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of addressesInput\", () => {\r",
                      "  pm.expect(jsonData.data[0].addressesInput[0]).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of addressesOutput\", () => {\r",
                      "  pm.expect(jsonData.data[0].addressesOutput[0]).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of fee\", () => {\r",
                      "  pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalOutput\", () => {\r",
                      "  pm.expect(jsonData.data[0].totalOutput).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of balance\", () => {\r",
                      "  pm.expect(jsonData.data[0].balance).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of policy\", () => {\r",
                      "  pm.expect(jsonData.data[0].tokens[0].policy).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of name\", () => {\r",
                      "  pm.expect(jsonData.data[0].tokens[0].name).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of displayName\", () => {\r",
                      "  pm.expect(jsonData.data[0].tokens[0].displayName).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of fingerprint\", () => {\r",
                      "  pm.expect(jsonData.data[0].tokens[0].fingerprint).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of quantity\", () => {\r",
                      "  pm.expect(jsonData.data[0].tokens[0].quantity).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalItems\", () => {\r",
                      "  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalPages\", () => {\r",
                      "  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/addresses/:address/txs",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "addresses",
                    ":address",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "address",
                      "value": "Ae2tdPwUPEYwFx4dmJheyNPPYXtvHbJLeCaA96o6Y2iiUL18cAt7AizN2zG",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/addresses/:address/txs?page=0&size=20&sort=ex&sort=nisi de",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "addresses",
                        ":address",
                        "txs"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "20"
                        },
                        {
                          "key": "sort",
                          "value": "ex"
                        },
                        {
                          "key": "sort",
                          "value": "nisi de"
                        }
                      ],
                      "variable": [
                        {
                          "key": "address",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) "
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"hash\": \"Excepteur sed labore\",\n      \"blockNo\": -46806813,\n      \"blockHash\": \"nisi in incididunt quis\",\n      \"epochNo\": -60608740,\n      \"epochSlotNo\": 68641533,\n      \"slot\": -54192140,\n      \"time\": \"1953-04-19T18:45:29.774Z\",\n      \"addressesInput\": [\n        \"consequat id\",\n        \"irure dolore\"\n      ],\n      \"addressesOutput\": [\n        \"dolor ea\",\n        \"magna laborum\"\n      ],\n      \"fee\": 14511110,\n      \"totalOutput\": 33083216,\n      \"balance\": 91663821,\n      \"tokens\": [\n        {\n          \"addressId\": -2475162,\n          \"address\": \"consequat\",\n          \"policy\": \"est qui in in\",\n          \"metadata\": {\n            \"url\": \"ea voluptate commodo nisi nostrud\",\n            \"ticker\": \"ex aliqua\",\n            \"decimals\": 35611207,\n            \"logo\": \"nostrud Excepteur qui\",\n            \"description\": \"cillum\"\n          },\n          \"name\": \"do fugiat reprehenderit ipsu\",\n          \"displayName\": \"occaecat ex\",\n          \"fingerprint\": \"minim d\",\n          \"quantity\": -28150056\n        },\n        {\n          \"addressId\": -70424671,\n          \"address\": \"laboris\",\n          \"policy\": \"dolor in incididunt\",\n          \"metadata\": {\n            \"url\": \"Excepteur reprehenderit\",\n            \"ticker\": \"sed Du\",\n            \"decimals\": 21239598,\n            \"logo\": \"ut enim\",\n            \"description\": \"amet officia nulla\"\n          },\n          \"name\": \"laborum reprehenderit deserunt\",\n          \"displayName\": \"eu nisi voluptate\",\n          \"fingerprint\": \"sed in\",\n          \"quantity\": 73188167\n        }\n      ]\n    },\n    {\n      \"hash\": \"occaecat non anim labore\",\n      \"blockNo\": -32853053,\n      \"blockHash\": \"pariatur sed dolore dolore\",\n      \"epochNo\": 92981403,\n      \"epochSlotNo\": 57548782,\n      \"slot\": 93943643,\n      \"time\": \"1977-06-16T06:16:08.168Z\",\n      \"addressesInput\": [\n        \"cillum enim\",\n        \"velit Duis minim aute\"\n      ],\n      \"addressesOutput\": [\n        \"officia fugiat Lorem\",\n        \"sint\"\n      ],\n      \"fee\": 87483890,\n      \"totalOutput\": 66035495,\n      \"balance\": -36872582,\n      \"tokens\": [\n        {\n          \"addressId\": 40282102,\n          \"address\": \"dolore ea Lorem eu consectetur\",\n          \"policy\": \"sed cillum\",\n          \"metadata\": {\n            \"url\": \"est exercitation irure\",\n            \"ticker\": \"ex voluptate\",\n            \"decimals\": 66574392,\n            \"logo\": \"exercitation eiusmod velit\",\n            \"description\": \"incididunt irure ut nostrud\"\n          },\n          \"name\": \"amet laboris sunt aute sint\",\n          \"displayName\": \"do\",\n          \"fingerprint\": \"mollit officia commodo enim in\",\n          \"quantity\": 96432812\n        },\n        {\n          \"addressId\": 61875921,\n          \"address\": \"dolore sit\",\n          \"policy\": \"sit dolor minim in\",\n          \"metadata\": {\n            \"url\": \"voluptate veniam laborum exercita\",\n            \"ticker\": \"dolore dolor\",\n            \"decimals\": -85521489,\n            \"logo\": \"sunt mollit nisi\",\n            \"description\": \"proident\"\n          },\n          \"name\": \"nisi aliquip anim\",\n          \"displayName\": \"cillum aute\",\n          \"fingerprint\": \"ut dolore\",\n          \"quantity\": -50581416\n        }\n      ]\n    }\n  ],\n  \"totalItems\": -30498291,\n  \"totalPages\": 48123678,\n  \"currentPage\": -67438345\n}"
                }
              ]
            },
            {
              "name": "Boundary - Get the highest and lowest balance address (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(100);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/addresses/:address/txs?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "addresses",
                    ":address",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "address",
                      "value": "Ae2tdPwUPEYwFx4dmJheyNPPYXtvHbJLeCaA96o6Y2iiUL18cAt7AizN2zG",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get the highest and lowest balance address (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/addresses/:address/txs?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "addresses",
                    ":address",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "address",
                      "value": "Ae2tdPwUPEYwFx4dmJheyNPPYXtvHbJLeCaA96o6Y2iiUL18cAt7AizN2zG",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get the highest and lowest balance address (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/addresses/:address/txs?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "addresses",
                    ":address",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "address",
                      "value": "Ae2tdPwUPEYwFx4dmJheyNPPYXtvHbJLeCaA96o6Y2iiUL18cAt7AizN2zG",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get the highest and lowest balance address (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/addresses/:address/txs?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "addresses",
                    ":address",
                    "txs"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "address",
                      "value": "Ae2tdPwUPEYwFx4dmJheyNPPYXtvHbJLeCaA96o6Y2iiUL18cAt7AizN2zG",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get list token by address",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "    var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of policy\", () => {\r",
                      "  pm.expect(jsonData.data[0].policy).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of name\", () => {\r",
                      "  pm.expect(jsonData.data[0].name).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of displayName\", () => {\r",
                      "  pm.expect(jsonData.data[0].displayName).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of fingerprint\", () => {\r",
                      "  pm.expect(jsonData.data[0].fingerprint).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of quantity\", () => {\r",
                      "  pm.expect(jsonData.data[0].quantity).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/addresses/:address/tokens",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "addresses",
                    ":address",
                    "tokens"
                  ],
                  "query": [
                    {
                      "key": "displayName",
                      "value": "enim voluptate Excepteur ullamco",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "address",
                      "value": "Ae2tdPwUPEYwFx4dmJheyNPPYXtvHbJLeCaA96o6Y2iiUL18cAt7AizN2zG",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/addresses/:address/tokens?displayName=enim voluptate Excepteur ullamco&page=0&size=20&sort=ex&sort=nisi de",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "addresses",
                        ":address",
                        "tokens"
                      ],
                      "query": [
                        {
                          "key": "displayName",
                          "value": "enim voluptate Excepteur ullamco"
                        },
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "20"
                        },
                        {
                          "key": "sort",
                          "value": "ex"
                        },
                        {
                          "key": "sort",
                          "value": "nisi de"
                        }
                      ],
                      "variable": [
                        {
                          "key": "address",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) "
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"addressId\": -97014357,\n      \"address\": \"dolore non sint fugiat dolor\",\n      \"policy\": \"dolore occaecat ut\",\n      \"metadata\": {\n        \"url\": \"sed ea consectetur\",\n        \"ticker\": \"laboris Lorem esse nostrud\",\n        \"decimals\": -81176225,\n        \"logo\": \"esse minim cupidatat\",\n        \"description\": \"ipsum Excepteur ad mag\"\n      },\n      \"name\": \"dolor consectetur\",\n      \"displayName\": \"irure in\",\n      \"fingerprint\": \"sint cillum\",\n      \"quantity\": -65976550\n    },\n    {\n      \"addressId\": 57474225,\n      \"address\": \"non eu ut\",\n      \"policy\": \"sunt dolor\",\n      \"metadata\": {\n        \"url\": \"occaecat Excepteur\",\n        \"ticker\": \"in non nisi commodo\",\n        \"decimals\": -42639989,\n        \"logo\": \"eu est minim\",\n        \"description\": \"nulla commodo in minim\"\n      },\n      \"name\": \"adipisicing Ut\",\n      \"displayName\": \"adipisic\",\n      \"fingerprint\": \"in\",\n      \"quantity\": 52137399\n    }\n  ],\n  \"totalItems\": -17693588,\n  \"totalPages\": -40021544,\n  \"currentPage\": -88844091\n}"
                }
              ]
            },
            {
              "name": "Boundary - Get list token by address (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(100);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/addresses/:address/tokens?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "addresses",
                    ":address",
                    "tokens"
                  ],
                  "query": [
                    {
                      "key": "displayName",
                      "value": "enim voluptate Excepteur ullamco",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "address",
                      "value": "Ae2tdPwUPEYwFx4dmJheyNPPYXtvHbJLeCaA96o6Y2iiUL18cAt7AizN2zG",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get list token by address (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/addresses/:address/tokens?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "addresses",
                    ":address",
                    "tokens"
                  ],
                  "query": [
                    {
                      "key": "displayName",
                      "value": "enim voluptate Excepteur ullamco",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "address",
                      "value": "Ae2tdPwUPEYwFx4dmJheyNPPYXtvHbJLeCaA96o6Y2iiUL18cAt7AizN2zG",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get list token by address (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "    pm.expect(jsonData.data.length).to.eql(1);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/addresses/:address/tokens?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "addresses",
                    ":address",
                    "tokens"
                  ],
                  "query": [
                    {
                      "key": "displayName",
                      "value": "enim voluptate Excepteur ullamco",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "address",
                      "value": "Ae2tdPwUPEYwFx4dmJheyNPPYXtvHbJLeCaA96o6Y2iiUL18cAt7AizN2zG",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get list token by address (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/addresses/:address/tokens?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "addresses",
                    ":address",
                    "tokens"
                  ],
                  "query": [
                    {
                      "key": "displayName",
                      "value": "enim voluptate Excepteur ullamco",
                      "disabled": true
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "dolore non est",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "elit",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "address",
                      "value": "Ae2tdPwUPEYwFx4dmJheyNPPYXtvHbJLeCaA96o6Y2iiUL18cAt7AizN2zG",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get a address analytics",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData.data[0].value).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].date).to.include(moment(jsonData.data[0].date).format('YYYY/MM/DD'));\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/addresses/analytics/:address/:type",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "addresses",
                    "analytics",
                    ":address",
                    ":type"
                  ],
                  "variable": [
                    {
                      "key": "address",
                      "value": "addr1vy6p2t2lspjhf2nr2g7hfygkxdeulw3vvr8yhrkyv9qvzncmulqgh",
                      "description": "(Required) Address"
                    },
                    {
                      "key": "type",
                      "value": "ONE_WEEK",
                      "description": "(Required) Value: ONE_DAY, ONE_WEEK, ONE_MONTH, THREE_MONTH"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/addresses/analytics/:address/:type",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "addresses",
                        "analytics",
                        ":address",
                        ":type"
                      ],
                      "variable": [
                        {
                          "key": "address",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) Address"
                        },
                        {
                          "key": "type",
                          "value": "THREE_MONTH",
                          "description": "(Required) Type analytics: 1d, 1w, 1m, 3m"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "[\n  {\n    \"date\": \"1974-01-28\",\n    \"value\": 97554919\n  },\n  {\n    \"date\": \"1997-05-23\",\n    \"value\": 32469025\n  }\n]"
                }
              ]
            }
          ]
        },
        {
          "name": "pool-report",
          "item": [
            {
              "name": "create",
              "item": [
                {
                  "name": "create Pool Report",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "pm.environment.set(\"pool_report_reportName\", \"Report1_pool1mv9jm887f4gdpr0f5p8rerewjsdgvd29lt2awtdnmj3ggkq973a\");\r",
                          "pm.environment.set(\"pool_report_poolId\", \"pool1mv9jm887f4gdpr0f5p8rerewjsdgvd29lt2awtdnmj3ggkq973a\");\r",
                          "pm.environment.set(\"pool_report_isPoolSize\",true);\r",
                          "pm.environment.set(\"pool_report_isFeesPaid\", true);\r",
                          "pm.environment.set(\"pool_report_eventRegistration\", true);\r",
                          "pm.environment.set(\"pool_report_eventDeregistration\", true);\r",
                          "pm.environment.set(\"pool_report_eventReward\", true);\r",
                          "pm.environment.set(\"pool_report_eventPoolUpdate\", true);\r",
                          "pm.environment.set(\"pool_report_epochRanges_first\", \"0\" );\r",
                          "pm.environment.set(\"pool_report_epochRanges_last\", \"300\" );"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": {
                        "token": "{{Bearer Token}}"
                      }
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"reportName\": \"{{pool_report_reportName}}\",\r\n  \"poolId\": \"{{pool_report_poolId}}\",\r\n  \"isPoolSize\": \"{{pool_report_isPoolSize}}\",\r\n  \"isFeesPaid\": \"{{pool_report_isFeesPaid}}\",\r\n  \"eventRegistration\": \"{{pool_report_eventRegistration}}\",\r\n  \"eventDeregistration\": \"{{pool_report_eventDeregistration}}\",\r\n  \"eventReward\": \"{{pool_report_eventReward}}\",\r\n  \"eventPoolUpdate\": \"{{pool_report_eventPoolUpdate}}\",\r\n  \"epochRanges\": [{{pool_report_epochRanges_first}}, {{pool_report_epochRanges_last}}]\r\n}",
                      "options": {
                        "raw": {
                          "headerFamily": "json",
                          "language": "json"
                        }
                      }
                    },
                    "url": "{{baseUrl}}/api/v1/pool-report/create"
                  },
                  "response": [
                    {
                      "name": "OK",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "*/*"
                          },
                          {
                            "key": "Authorization",
                            "value": "Bearer <token>",
                            "description": "Added as a part of security scheme: bearer"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n  \"reportName\": \"<string>\",\n  \"poolId\": \"<string>\",\n  \"isPoolSize\": \"<boolean>\",\n  \"isFeesPaid\": \"<boolean>\",\n  \"eventRegistration\": \"<boolean>\",\n  \"eventDeregistration\": \"<boolean>\",\n  \"eventReward\": \"<boolean>\",\n  \"eventPoolUpdate\": \"<boolean>\",\n  \"epochRanges\": [\n    \"<integer>\",\n    \"<integer>\"\n  ]\n}",
                          "options": {
                            "raw": {
                              "headerFamily": "json",
                              "language": "json"
                            }
                          }
                        },
                        "url": "{{baseUrl}}/api/v1/pool-report/create"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "*/*"
                        }
                      ],
                      "cookie": [],
                      "body": "<boolean>"
                    }
                  ]
                }
              ]
            },
            {
              "name": "list Pool Report",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].reportId).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].reportName).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].epochRanges).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].isPoolSize).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.data[0].isFeesPaid).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.data[0].eventRegistration).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.data[0].eventDeregistration).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.data[0].eventReward).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.data[0].eventPoolUpdate).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.data[0].createdAt).to.include(moment(jsonData.data[0].createdAt).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].status).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "//Scenario compare Create Pool report api with Get: list pool Report api\r",
                      "pm.test(\"Compare value between Get: list pool Report api and  Create Pool report api\",function(){\r",
                      "    pm.expect(jsonData.data[0].reportName).to.be.include(pm.environment.get(\"pool_report_reportName\"));\r",
                      "    pm.expect(jsonData.data[0].isPoolSize).to.be.eql(pm.environment.get(\"pool_report_isPoolSize\"));\r",
                      "    pm.expect(jsonData.data[0].isFeesPaid).to.be.eql(pm.environment.get(\"pool_report_isFeesPaid\"));\r",
                      "    pm.expect(jsonData.data[0].eventRegistration).to.be.eql(pm.environment.get(\"pool_report_eventRegistration\"));\r",
                      "    pm.expect(jsonData.data[0].eventDeregistration).to.be.eql(pm.environment.get(\"pool_report_eventDeregistration\"));\r",
                      "    pm.expect(jsonData.data[0].eventReward).to.be.eql(pm.environment.get(\"pool_report_eventReward\"));\r",
                      "    pm.expect(jsonData.data[0].eventPoolUpdate).to.be.eql(pm.environment.get(\"pool_report_eventPoolUpdate\"));\r",
                      "});\r",
                      "\r",
                      "//Scenario compare Get list pool Report api with get detail pool Report api - variable declaration\r",
                      "pm.test(\"Others value exist\",function (){\r",
                      "    \r",
                      "    //Randome value \r",
                      "    var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));\r",
                      "    \r",
                      "    pm.environment.set(\"pool_report_reportId\", jsonData.data[randomIndex].reportId)\r",
                      "    pm.environment.set(\"pool_report_isPoolSize\", jsonData.data[randomIndex].isPoolSize)\r",
                      "    pm.environment.set(\"pool_report_isFeesPaid\", jsonData.data[randomIndex].isFeesPaid)\r",
                      "    pm.environment.set(\"pool_report_eventRegistration\", jsonData.data[randomIndex].eventRegistration)\r",
                      "    pm.environment.set(\"pool_report_eventDeregistration\", jsonData.data[randomIndex].eventDeregistration)\r",
                      "    pm.environment.set(\"pool_report_eventReward\", jsonData.data[randomIndex].eventReward)\r",
                      "    pm.environment.set(\"pool_report_eventPoolUpdate\", jsonData.data[randomIndex].eventPoolUpdate)\r",
                      "    pm.environment.set(\"pool_report_reportName\", jsonData.data[randomIndex].reportName)\r",
                      "    pm.environment.set(\"pool_report_createdAt\", jsonData.data[randomIndex].createdAt)\r",
                      "    pm.environment.set(\"pool_report_status\", jsonData.data[randomIndex].status)\r",
                      "\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};\r",
                      "\r",
                      "var idlist = [];\r",
                      "for (let i = 0; i < jsonData.data.length; i++) {\r",
                      "    idlist[i] = jsonData.data[i].reportId\r",
                      "};\r",
                      "pm.environment.set(\"pool_report_overreportId\", (Math.max(...idlist)+1));\r",
                      "console.log((Math.max(...idlist)+1))\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/list",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "list"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/pool-report/list?page=0&size=10&sort=id,DESC",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "pool-report",
                        "list"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "10",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "id,DESC",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"reportId\": \"<long>\",\n      \"reportName\": \"<string>\",\n      \"epochRanges\": [\n        \"<integer>\",\n        \"<integer>\"\n      ],\n      \"isPoolSize\": \"<boolean>\",\n      \"isFeesPaid\": \"<boolean>\",\n      \"eventRegistration\": \"<boolean>\",\n      \"eventDeregistration\": \"<boolean>\",\n      \"eventReward\": \"<boolean>\",\n      \"eventPoolUpdate\": \"<boolean>\",\n      \"createdAt\": \"<dateTime>\",\n      \"status\": \"IN_PROGRESS\"\n    },\n    {\n      \"reportId\": \"<long>\",\n      \"reportName\": \"<string>\",\n      \"epochRanges\": [\n        \"<integer>\",\n        \"<integer>\"\n      ],\n      \"isPoolSize\": \"<boolean>\",\n      \"isFeesPaid\": \"<boolean>\",\n      \"eventRegistration\": \"<boolean>\",\n      \"eventDeregistration\": \"<boolean>\",\n      \"eventReward\": \"<boolean>\",\n      \"eventPoolUpdate\": \"<boolean>\",\n      \"createdAt\": \"<dateTime>\",\n      \"status\": \"GENERATED\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Boundary - list Pool Report (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/list?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "list"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - list Pool Report (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/list?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "list"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - list Pool Report (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/list?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "list"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - list Pool Report (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/list?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "list"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "id,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "export",
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/export?exportType=EXCEL",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    ":reportId",
                    "export"
                  ],
                  "query": [
                    {
                      "key": "exportType",
                      "value": "EXCEL"
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{pool_report_reportId}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/export?exportType=EXCEL",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "pool-report",
                        "detail",
                        ":reportId",
                        "export"
                      ],
                      "query": [
                        {
                          "key": "exportType",
                          "value": "EXCEL"
                        }
                      ],
                      "variable": [
                        {
                          "key": "reportId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "<string>"
                }
              ]
            },
            {
              "name": "detail Epoch Size Pool Report",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].epoch).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].size).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/epoch-size",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    ":reportId",
                    "epoch-size"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{pool_report_reportId}}",
                      "description": "(From api: list Pool Report - v1/pool-report/list)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/epoch-size?page=0&size=10&sort=<string>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "pool-report",
                        "detail",
                        ":reportId",
                        "epoch-size"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "10",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ],
                      "variable": [
                        {
                          "key": "reportId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"epoch\": \"<string>\",\n      \"fee\": \"<integer>\",\n      \"size\": \"<number>\"\n    },\n    {\n      \"epoch\": \"<string>\",\n      \"fee\": \"<integer>\",\n      \"size\": \"<number>\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Over Boundary - detail Epoch Size Pool Report",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is reportId not valid\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Pool report history not found\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/epoch-size",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    ":reportId",
                    "epoch-size"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{pool_report_overreportId}}",
                      "description": "(From api: list Pool Report - v1/pool-report/list)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - detail Epoch Size Pool Report (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/epoch-size?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    ":reportId",
                    "epoch-size"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{pool_report_reportId}}",
                      "description": "(From api: list Pool Report - v1/pool-report/list)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - detail Epoch Size Pool Report (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/epoch-size?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    ":reportId",
                    "epoch-size"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{pool_report_reportId}}",
                      "description": "(From api: list Pool Report - v1/pool-report/list)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - detail Epoch Size Pool Report (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/epoch-size?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    ":reportId",
                    "epoch-size"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{pool_report_reportId}}",
                      "description": "(From api: list Pool Report - v1/pool-report/list)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - detail Epoch Size Pool Report (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/epoch-size?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    ":reportId",
                    "epoch-size"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{pool_report_reportId}}",
                      "description": "(From api: list Pool Report - v1/pool-report/list)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "detail Pool Report",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check id value\", function () {\r",
                      "    pm.expect(jsonData.id).to.eql(pm.environment.get(\"pool_report_reportId\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check isPoolSize value\", function () {\r",
                      "    pm.expect(jsonData.isPoolSize).to.eql(pm.environment.get(\"pool_report_isPoolSize\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check isFeesPaid value\", function () {\r",
                      "    pm.expect(jsonData.isFeesPaid).to.eql(pm.environment.get(\"pool_report_isFeesPaid\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check eventRegistration value\", function () {\r",
                      "    pm.expect(jsonData.eventRegistration).to.eql(pm.environment.get(\"pool_report_eventRegistration\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check eventDeregistration value\", function () {\r",
                      "    pm.expect(jsonData.eventDeregistration).to.eql(pm.environment.get(\"pool_report_eventDeregistration\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check eventReward value\", function () {\r",
                      "    pm.expect(jsonData.eventReward).to.eql(pm.environment.get(\"pool_report_eventReward\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check eventPoolUpdate value\", function () {\r",
                      "    pm.expect(jsonData.eventPoolUpdate).to.eql(pm.environment.get(\"pool_report_eventPoolUpdate\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check reportName value\", function () {\r",
                      "    pm.expect(jsonData.reportHistory.reportName).to.include(pm.environment.get(\"pool_report_reportName\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check createdAt value\", function () {\r",
                      "    pm.expect(jsonData.reportHistory.createdAt).to.contain(pm.environment.get(\"pool_report_createdAt\"));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check status value\", function () {\r",
                      "    pm.expect(jsonData.reportHistory.status).to.contain.oneOf([\"IN_PROGRESS\", \"GENERATED\", \"FAILED\", \"EXPIRED\"])\r",
                      "});\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.id).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.poolView).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.isPoolSize).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.isFeesPaid).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.eventRegistration).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.eventDeregistration).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.eventReward).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.eventPoolUpdate).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.beginEpoch).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.endEpoch).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.reportHistory.id).to.be.a(\"number\");\r",
                      "    if(jsonData.reportHistory.storageKey){\r",
                      "        pm.expect(typeof jsonData.reportHistory.storageKey).to.be.oneOf([ 'object', 'string']);\r",
                      "    }\r",
                      "    pm.expect(jsonData.reportHistory.reportName).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.reportHistory.username).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.reportHistory.createdAt).to.include(moment(jsonData.reportHistory.createdAt).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.reportHistory.uploadedAt).to.include(moment(jsonData.reportHistory.uploadedAt).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.reportHistory.status).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.reportHistory.type).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "//Check scenario continue: get poolview\r",
                      "pm.test(\"Others value exist\",function (){\r",
                      "    pm.environment.set(\"pool_report_poolView\", jsonData.poolView)\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": "{{baseUrl}}/api/v1/pool-report/detail/{{pool_report_reportId}}"
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "pool-report",
                        "detail",
                        ":reportId"
                      ],
                      "variable": [
                        {
                          "key": "reportId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"id\": \"<long>\",\n  \"poolView\": \"<string>\",\n  \"isPoolSize\": \"<boolean>\",\n  \"isFeesPaid\": \"<boolean>\",\n  \"eventRegistration\": \"<boolean>\",\n  \"eventDeregistration\": \"<boolean>\",\n  \"eventReward\": \"<boolean>\",\n  \"eventPoolUpdate\": \"<boolean>\",\n  \"beginEpoch\": \"<integer>\",\n  \"endEpoch\": \"<integer>\",\n  \"reportHistory\": {\n    \"id\": \"<long>\",\n    \"storageKey\": \"<string>\",\n    \"reportName\": \"<string>\",\n    \"username\": \"<string>\",\n    \"createdAt\": \"<dateTime>\",\n    \"uploadedAt\": \"<dateTime>\",\n    \"status\": \"EXPIRED\",\n    \"type\": \"STAKE_KEY\"\n  }\n}"
                }
              ]
            },
            {
              "name": "Over Boundary - detail Pool Report",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is reportId not valid\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Pool report history not found\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": "{{baseUrl}}/api/v1/pool-report/detail/{{pool_report_overreportId}}"
              },
              "response": []
            },
            {
              "name": "detail Deregistration",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "if  (jsonData.data.length > 0){\r",
                      "    //Compare data type\r",
                      "    pm.test(\"Check data type of the response\", () => {\r",
                      "        let moment = require ('moment');\r",
                      "        pm.expect(jsonData).to.be.an(\"object\");\r",
                      "        pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "        pm.expect(jsonData.data[0].poolId).to.be.a(\"string\");\r",
                      "        if(jsonData.data.poolName){\r",
                      "            pm.expect(typeof jsonData.data[0].poolName).to.be.oneOf([\"object\",\"string\"]);\r",
                      "        }\r",
                      "        pm.expect(jsonData.data[0].poolView).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.data[0].stakeKeys).to.be.a(\"array\");\r",
                      "        pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.data[0].totalFee).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[0].poolHold).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "        pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[0].retiringEpoch).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[0].refundFlag).to.be.a(\"boolean\");\r",
                      "    });\r",
                      "    \r",
                      "    //Scenario compare Get detail Deregistration api with get de Registration api \r",
                      "    pm.test(\"Get detail Deregistration data\",function(){\r",
                      "        \r",
                      "        //Randome value\r",
                      "        var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));\r",
                      "        pm.environment.set(\"poolreport_detailDere_data_poolId\", jsonData.data[randomIndex].poolId);\r",
                      "        pm.environment.set(\"poolreport_detailDere_data_poolName\", jsonData.data[randomIndex].poolName);\r",
                      "        pm.environment.set(\"poolreport_detailDere_data_poolView\", jsonData.data[randomIndex].poolView);\r",
                      "        pm.environment.set(\"poolreport_detailDere_data_stakeKeys\", jsonData.data[randomIndex].stakeKeys);\r",
                      "        pm.environment.set(\"poolreport_detailDere_data_txHash\", jsonData.data[randomIndex].txHash);\r",
                      "        pm.environment.set(\"poolreport_detailDere_data_totalFee\", jsonData.data[randomIndex].totalFee);\r",
                      "        pm.environment.set(\"poolreport_detailDere_data_poolHold\", jsonData.data[randomIndex].poolHold);\r",
                      "        pm.environment.set(\"poolreport_detailDere_data_time\", jsonData.data[randomIndex].time);\r",
                      "        pm.environment.set(\"poolreport_detailDere_data_fee\", jsonData.data[randomIndex].fee);\r",
                      "        pm.environment.set(\"poolreport_detailDere_data_retiringEpoch\", jsonData.data[randomIndex].retiringEpoch);\r",
                      "        pm.environment.set(\"poolreport_detailDere_data_refundFlag\", jsonData.data[randomIndex].refundFlag);  \r",
                      "    });\r",
                      "}\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/{{pool_report_reportId}}/deregistration",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    "{{pool_report_reportId}}",
                    "deregistration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{pool_report_reportId}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/deregistration?page=0&size=10&sort=<string>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "pool-report",
                        "detail",
                        ":reportId",
                        "deregistration"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "10",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ],
                      "variable": [
                        {
                          "key": "reportId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"poolId\": \"<string>\",\n      \"poolName\": \"<string>\",\n      \"poolView\": \"<string>\",\n      \"stakeKeys\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"txHash\": \"<string>\",\n      \"totalFee\": \"<integer>\",\n      \"poolHold\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"fee\": \"<integer>\",\n      \"retiringEpoch\": \"<integer>\",\n      \"refundFlag\": \"<boolean>\"\n    },\n    {\n      \"poolId\": \"<string>\",\n      \"poolName\": \"<string>\",\n      \"poolView\": \"<string>\",\n      \"stakeKeys\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"txHash\": \"<string>\",\n      \"totalFee\": \"<integer>\",\n      \"poolHold\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"fee\": \"<integer>\",\n      \"retiringEpoch\": \"<integer>\",\n      \"refundFlag\": \"<boolean>\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Over Boundary - detail Deregistration",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is reportId not valid\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Pool report history not found\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/{{pool_report_overreportId}}/deregistration",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    "{{pool_report_overreportId}}",
                    "deregistration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - detail Deregistration (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/{{pool_report_reportId}}/deregistration?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    "{{pool_report_reportId}}",
                    "deregistration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{pool_report_reportId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - detail Deregistration (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/{{pool_report_reportId}}/deregistration?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    "{{pool_report_reportId}}",
                    "deregistration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{pool_report_reportId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - detail Deregistration (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/{{pool_report_reportId}}/deregistration?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    "{{pool_report_reportId}}",
                    "deregistration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{pool_report_reportId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - detail Deregistration (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/{{pool_report_reportId}}/deregistration?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    "{{pool_report_reportId}}",
                    "deregistration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{pool_report_reportId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "detail Pool Registration",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].poolUpdateId).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].totalFee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].stakeKeys).to.be.a(\"array\");\r",
                      "    pm.expect(jsonData.data[0].deposit).to.be.a(\"number\");\r",
                      "\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/{{pool_report_reportId}}/pool-registration",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    "{{pool_report_reportId}}",
                    "pool-registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/pool-registration?page=0&size=10&sort=<string>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "pool-report",
                        "detail",
                        ":reportId",
                        "pool-registration"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "10",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ],
                      "variable": [
                        {
                          "key": "reportId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"poolUpdateId\": \"<long>\",\n      \"txHash\": \"<string>\",\n      \"totalFee\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"fee\": \"<integer>\",\n      \"stakeKeys\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"deposit\": \"<integer>\"\n    },\n    {\n      \"poolUpdateId\": \"<long>\",\n      \"txHash\": \"<string>\",\n      \"totalFee\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"fee\": \"<integer>\",\n      \"stakeKeys\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"deposit\": \"<integer>\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Over Boundary - detail Pool Registration",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is reportId not valid\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Pool report history not found\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/{{pool_report_overreportId}}/pool-registration",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    "{{pool_report_overreportId}}",
                    "pool-registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - detail Pool Registration (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/{{pool_report_reportId}}/pool-registration?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    "{{pool_report_reportId}}",
                    "pool-registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - detail Pool Registration (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/{{pool_report_reportId}}/pool-registration?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    "{{pool_report_reportId}}",
                    "pool-registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - detail Pool Registration (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/{{pool_report_reportId}}/pool-registration?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    "{{pool_report_reportId}}",
                    "pool-registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - detail Pool Registration (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/{{pool_report_reportId}}/pool-registration?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    "{{pool_report_reportId}}",
                    "pool-registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "detail Rewards Distribution",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "if  (jsonData.data.length > 0){  \r",
                      "\r",
                      "    //Compare data type\r",
                      "    pm.test(\"Check data type of the response\", () => {\r",
                      "         \r",
                      "        let moment = require ('moment');\r",
                      "        pm.expect(jsonData).to.be.an(\"object\");\r",
                      "        pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "        pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "        pm.expect(jsonData.data[0].amount).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[0].rewardAccount).to.be.a(\"string\");\r",
                      "        \r",
                      "    });\r",
                      "\r",
                      "    //Check scenario call data detail Rewards Distribution api \r",
                      "    pm.test(\"Others value exist\",function (){\r",
                      "        \r",
                      "        //Randome value\r",
                      "        var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));\r",
                      "        pm.environment.set(\"pool_report_data_epochNo\", jsonData.data[randomIndex].epochNo)\r",
                      "        pm.environment.set(\"pool_report_data_time\", jsonData.data[randomIndex].time);\r",
                      "        pm.environment.set(\"pool_report_data_amount\", jsonData.data[randomIndex].amount);\r",
                      "        pm.environment.set(\"pool_report_data_rewardAccount\", jsonData.data[randomIndex].rewardAccount);\r",
                      "        \r",
                      "    }); \r",
                      "\r",
                      "    pm.environment.set(\"pool_report_data_ResStt\", \"Not null\");\r",
                      "} else {\r",
                      "    pm.environment.set(\"pool_report_data_ResStt\", \"Null\");\r",
                      "}\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/rewards-distribution",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    ":reportId",
                    "rewards-distribution"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{pool_report_reportId}}",
                      "description": "(From api: list Pool Report - v1/pool-report/list)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/rewards-distribution?page=0&size=10&sort=<string>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "pool-report",
                        "detail",
                        ":reportId",
                        "rewards-distribution"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "10",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ],
                      "variable": [
                        {
                          "key": "reportId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"epochNo\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"amount\": \"<integer>\",\n      \"rewardAccount\": \"<string>\"\n    },\n    {\n      \"epochNo\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"amount\": \"<integer>\",\n      \"rewardAccount\": \"<string>\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Over Boundary - detail Rewards Distribution",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is reportId not valid\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Pool report history not found\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/rewards-distribution",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    ":reportId",
                    "rewards-distribution"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{pool_report_overreportId}}",
                      "description": "(From api: list Pool Report - v1/pool-report/list)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - detail Rewards Distribution (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/rewards-distribution?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    ":reportId",
                    "rewards-distribution"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{pool_report_reportId}}",
                      "description": "(From api: list Pool Report - v1/pool-report/list)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - detail Rewards Distribution (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/rewards-distribution?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    ":reportId",
                    "rewards-distribution"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{pool_report_reportId}}",
                      "description": "(From api: list Pool Report - v1/pool-report/list)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - detail Rewards Distribution (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/rewards-distribution?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    ":reportId",
                    "rewards-distribution"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{pool_report_reportId}}",
                      "description": "(From api: list Pool Report - v1/pool-report/list)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - detail Rewards Distribution (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/rewards-distribution?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    ":reportId",
                    "rewards-distribution"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{pool_report_reportId}}",
                      "description": "(From api: list Pool Report - v1/pool-report/list)"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "detail Pool Update",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].poolUpdateId).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].poolId).to.be.a(\"string\");\r",
                      "    if(jsonData.data.poolName){\r",
                      "        pm.expect(typeof jsonData.data[0].poolName).to.be.oneOf([ 'object', 'string']);\r",
                      "    }\r",
                      "    pm.expect(jsonData.data[0].poolView).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].previousPledge).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].previousMargin).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].stakeKeys).to.be.a(\"array\");\r",
                      "    pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].rewardAccount).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].vrfKey).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].pledge).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].margin).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].cost).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].deposit).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "//Scenario compare Get detail Pool Update api with get pool Update 1 api - variable declaration\r",
                      "pm.test(\"Get data of detail Pool Update api\",function(){\r",
                      "    //Randome value\r",
                      "    var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));\r",
                      "\r",
                      "    pm.environment.set(\"poolreport_data_poolUpdateId\", jsonData.data[randomIndex].poolUpdateId);\r",
                      "    pm.environment.set(\"poolreport_data_poolId\", jsonData.data[randomIndex].poolId);\r",
                      "    pm.environment.set(\"poolreport_data_poolName\", jsonData.data[randomIndex].poolName);\r",
                      "    pm.environment.set(\"poolreport_data_poolView\", jsonData.data[randomIndex].poolView);\r",
                      "    pm.environment.set(\"poolreport_data_previousPledge\", jsonData.data[randomIndex].previousPledge);\r",
                      "    pm.environment.set(\"poolreport_data_previousMargin\", jsonData.data[randomIndex].previousMargin);\r",
                      "    pm.environment.set(\"poolreport_data_txHash\", jsonData.data[randomIndex].txHash);\r",
                      "    pm.environment.set(\"poolreport_data_time\", jsonData.data[randomIndex].time);\r",
                      "    pm.environment.set(\"poolreport_data_stakeKeys\", jsonData.data[randomIndex].stakeKeys);\r",
                      "    pm.environment.set(\"poolreport_data_fee\", jsonData.data[randomIndex].fee);\r",
                      "    pm.environment.set(\"poolreport_data_rewardAccount\", jsonData.data[randomIndex].rewardAccount);\r",
                      "    pm.environment.set(\"poolreport_data_vrfKey\", jsonData.data[randomIndex].vrfKey);\r",
                      "    pm.environment.set(\"poolreport_data_pledge\", jsonData.data[randomIndex].pledge);\r",
                      "    pm.environment.set(\"poolreport_data_margin\", jsonData.data[randomIndex].margin);\r",
                      "    pm.environment.set(\"poolreport_data_cost\", jsonData.data[randomIndex].cost);\r",
                      "    pm.environment.set(\"poolreport_data_deposit\", jsonData.data[randomIndex].deposit);\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/{{pool_report_reportId}}/pool-update",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    "{{pool_report_reportId}}",
                    "pool-update"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": null,
                      "value": "",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{pool_report_reportId}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/pool-report/detail/:reportId/pool-update?page=0&size=10&sort=<string>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "pool-report",
                        "detail",
                        ":reportId",
                        "pool-update"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "10",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ],
                      "variable": [
                        {
                          "key": "reportId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"poolUpdateId\": \"<long>\",\n      \"poolId\": \"<string>\",\n      \"poolName\": \"<string>\",\n      \"poolView\": \"<string>\",\n      \"previousPledge\": \"<integer>\",\n      \"previousMargin\": \"<double>\",\n      \"txHash\": \"<string>\",\n      \"time\": \"<dateTime>\",\n      \"stakeKeys\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"fee\": \"<integer>\",\n      \"rewardAccount\": \"<string>\",\n      \"vrfKey\": \"<string>\",\n      \"pledge\": \"<integer>\",\n      \"margin\": \"<double>\",\n      \"cost\": \"<integer>\",\n      \"deposit\": \"<integer>\"\n    },\n    {\n      \"poolUpdateId\": \"<long>\",\n      \"poolId\": \"<string>\",\n      \"poolName\": \"<string>\",\n      \"poolView\": \"<string>\",\n      \"previousPledge\": \"<integer>\",\n      \"previousMargin\": \"<double>\",\n      \"txHash\": \"<string>\",\n      \"time\": \"<dateTime>\",\n      \"stakeKeys\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"fee\": \"<integer>\",\n      \"rewardAccount\": \"<string>\",\n      \"vrfKey\": \"<string>\",\n      \"pledge\": \"<integer>\",\n      \"margin\": \"<double>\",\n      \"cost\": \"<integer>\",\n      \"deposit\": \"<integer>\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Over Boundary - detail Pool Update",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is reportId not valid\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Pool report history not found\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/{{pool_report_overreportId}}/pool-update",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    "{{pool_report_overreportId}}",
                    "pool-update"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": null,
                      "value": "",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - detail Pool Update (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/{{pool_report_reportId}}/pool-update?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    "{{pool_report_reportId}}",
                    "pool-update"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": null,
                      "value": "",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{pool_report_reportId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - detail Pool Update (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/{{pool_report_reportId}}/pool-update?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    "{{pool_report_reportId}}",
                    "pool-update"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": null,
                      "value": "",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{pool_report_reportId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - detail Pool Update (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/{{pool_report_reportId}}/pool-update?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    "{{pool_report_reportId}}",
                    "pool-update"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": null,
                      "value": "",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{pool_report_reportId}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - detail Pool Update (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-report/detail/{{pool_report_reportId}}/pool-update?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-report",
                    "detail",
                    "{{pool_report_reportId}}",
                    "pool-update"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": null,
                      "value": "",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "reportId",
                      "value": "{{pool_report_reportId}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "contracts",
          "item": [
            {
              "name": "Get list contract",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].address).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].txCount).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].balance).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/contracts",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "contracts"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "balance,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/contracts?page=0&size=20&sort=balance,DESC",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "contracts"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "20"
                        },
                        {
                          "key": "sort",
                          "value": "balance,DESC"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"address\": \"elit fugiat magna et\",\n      \"txCount\": -96260110,\n      \"balance\": -31166932\n    },\n    {\n      \"address\": \"ea officia culpa\",\n      \"txCount\": 76870377,\n      \"balance\": 78684995\n    }\n  ],\n  \"totalItems\": -86817919,\n  \"totalPages\": -14279308,\n  \"currentPage\": 727956\n}"
                }
              ]
            },
            {
              "name": "Boundary - Get list contract (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/contracts?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "contracts"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "balance,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get list contract (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/contracts?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "contracts"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "balance,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get list contract (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/contracts?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "contracts"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "balance,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get list contract (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/contracts?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "contracts"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "balance,DESC",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "protocols",
          "item": [
            {
              "name": "Get current protocol latest change",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check type of Data\", function () {\r",
                      "    const keys = Object.keys(jsonData);\r",
                      "    (keys || []).map(k => {console.log(jsonData)\r",
                      "        if (jsonData[k]&&jsonData[k]?.time) {\r",
                      "            let moment = require('moment')\r",
                      "            pm.expect(jsonData[k].time).to.include(moment(jsonData[k].time).format('YYYY/MM/DD HH:mm:ss'))\r",
                      "        }\r",
                      "        if (jsonData[k]&&jsonData[k].value) {\r",
                      "            pm.expect(typeof jsonData[k].value).to.be.oneOf([\"number\",\"string\"])\r",
                      "        } \r",
                      "        if (keys.epochNo) {\r",
                      "            pm.expect(jsonData[k].epochNo).to.be.a(\"number\", \"jsonData[k].epochNo\")\r",
                      "        }\r",
                      "    })\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": "{{baseUrl}}/api/v1/protocols/latest"
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": "{{baseUrl}}/api/v1/protocols/latest"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"epochChange\": {\n    \"startEpoch\": \"<integer>\",\n    \"endEpoch\": \"<integer>\"\n  },\n  \"minFeeA\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"UPDATED\"\n  },\n  \"minFeeB\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"NOT_EXIST\"\n  },\n  \"maxBlockSize\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"NOT_CHANGE\"\n  },\n  \"maxTxSize\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"NOT_EXIST\"\n  },\n  \"maxBhSize\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"UPDATED\"\n  },\n  \"keyDeposit\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"NOT_EXIST\"\n  },\n  \"poolDeposit\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"ADDED\"\n  },\n  \"maxEpoch\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"UPDATED\"\n  },\n  \"optimalPoolCount\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"UPDATED\"\n  },\n  \"influence\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"NOT_CHANGE\"\n  },\n  \"monetaryExpandRate\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"UPDATED\"\n  },\n  \"treasuryGrowthRate\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"ADDED\"\n  },\n  \"decentralisation\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"NOT_CHANGE\"\n  },\n  \"entropy\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"ADDED\"\n  },\n  \"protocolMajor\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"NOT_EXIST\"\n  },\n  \"protocolMinor\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"NOT_CHANGE\"\n  },\n  \"minUtxoValue\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"UPDATED\"\n  },\n  \"minPoolCost\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"UPDATED\"\n  },\n  \"costModel\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"NOT_EXIST\"\n  },\n  \"priceMem\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"ADDED\"\n  },\n  \"priceStep\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"NOT_CHANGE\"\n  },\n  \"maxTxExMem\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"NOT_EXIST\"\n  },\n  \"maxTxExSteps\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"ADDED\"\n  },\n  \"maxBlockExMem\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"NOT_CHANGE\"\n  },\n  \"maxBlockExSteps\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"ADDED\"\n  },\n  \"maxValSize\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"ADDED\"\n  },\n  \"collateralPercent\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"NOT_EXIST\"\n  },\n  \"maxCollateralInputs\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"UPDATED\"\n  },\n  \"coinsPerUtxoSize\": {\n    \"time\": \"<dateTime>\",\n    \"transactionHash\": \"<string>\",\n    \"value\": {},\n    \"status\": \"ADDED\"\n  },\n  \"timestamp\": \"<dateTime>\",\n  \"empty\": \"<boolean>\"\n}"
                }
              ]
            },
            {
              "name": "Get current protocol history change",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check type of Data\", () => {\r",
                      "    const keys = Object.keys(jsonData)\r",
                      "    keys.map(k => {\r",
                      "        if (k === 'epochChanges') {\r",
                      "            console.log(\"k = \", k)\r",
                      "            console.log(\"jsonData[k] = \", jsonData[k])\r",
                      "            pm.expect(jsonData[k][0].startEpoch).to.be.a(\"number\");\r",
                      "            pm.expect(jsonData[k][0].endEpoch).to.be.a(\"number\");\r",
                      "        } \r",
                      "        else {\r",
                      "            let moment = require('moment')\r",
                      "            pm.expect(jsonData[k][0].status).to.contain.oneOf([\"UPDATED\", \"ADDED\", \"NOT_EXIST\", \"NOT_CHANGE\"])\r",
                      "            if(jsonData[k].value){\r",
                      "                pm.expect(typeof jsonData[k][0].value).to.be.oneOf(\"number\",\"string\")\r",
                      "            }\r",
                      "            if(jsonData[k].time){\r",
                      "                pm.expect(jsonData[k][0].time).to.include(moment(jsonDat[k][0].time).format('YYYY/MM/DD HH:mm:ss'))\r",
                      "            }\r",
                      "            if(jsonData[k].transactionHashs && jsonData[k].transactionHashs.lenght>0){\r",
                      "                pm.expect(jsonData[k][0].transactionHashs[0]).to.be.a(\"string\")\r",
                      "            }\r",
                      "            \r",
                      "            console.log(\"k = \", k)\r",
                      "            console.log(\"jsonData[k] = \", jsonData[k])\r",
                      "        }\r",
                      "    })\r",
                      "\r",
                      "\r",
                      "\r",
                      "})\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "// pm.test(\"Check data type of response\", () => {\r",
                      "//     let moment = require ('moment');\r",
                      "//     pm.expect(jsonData.epochChanges).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.minFeeA).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.minFeeB).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.maxBlockSize).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.maxTxSize).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.maxBhSize).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.keyDeposit).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.poolDeposit).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.maxEpoch).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.optimalPoolCount).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.influence).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.monetaryExpandRate).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.treasuryGrowthRate).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.decentralisation).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.entropy).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.protocolMajor).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.protocolMinor).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.minUtxoValue).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.minPoolCost).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.costModel).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.priceMem).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.priceStep).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.maxTxExMem).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.maxTxExSteps).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.maxBlockExMem).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.maxBlockExSteps).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.maxValSize).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.collateralPercent).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.maxCollateralInputs).to.be.an(\"array\");\r",
                      "//     pm.expect(jsonData.coinsPerUTxOByte).to.be.an(\"array\");\r",
                      "// });\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/protocols/histories/filter/:protocolsTypes",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "protocols",
                    "histories",
                    "filter",
                    ":protocolsTypes"
                  ],
                  "query": [
                    {
                      "key": "startTime",
                      "value": "<integer>",
                      "disabled": true
                    },
                    {
                      "key": "endTime",
                      "value": "<integer>",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "protocolsTypes",
                      "value": "ALL"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/protocols/histories/filter/:protocolsTypes?startTime=<integer>&endTime=<integer>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "protocols",
                        "histories",
                        "filter",
                        ":protocolsTypes"
                      ],
                      "query": [
                        {
                          "key": "startTime",
                          "value": "<integer>"
                        },
                        {
                          "key": "endTime",
                          "value": "<integer>"
                        }
                      ],
                      "variable": [
                        {
                          "key": "protocolsTypes"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"epochChanges\": [\n    {\n      \"startEpoch\": \"<integer>\",\n      \"endEpoch\": \"<integer>\"\n    },\n    {\n      \"startEpoch\": \"<integer>\",\n      \"endEpoch\": \"<integer>\"\n    }\n  ],\n  \"minFeeA\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_EXIST\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    }\n  ],\n  \"minFeeB\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    }\n  ],\n  \"maxBlockSize\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    }\n  ],\n  \"maxTxSize\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    }\n  ],\n  \"maxBhSize\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    }\n  ],\n  \"keyDeposit\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_EXIST\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_EXIST\"\n    }\n  ],\n  \"poolDeposit\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    }\n  ],\n  \"maxEpoch\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    }\n  ],\n  \"optimalPoolCount\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    }\n  ],\n  \"influence\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    }\n  ],\n  \"monetaryExpandRate\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    }\n  ],\n  \"treasuryGrowthRate\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_EXIST\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_EXIST\"\n    }\n  ],\n  \"decentralisation\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_EXIST\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    }\n  ],\n  \"entropy\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_EXIST\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_EXIST\"\n    }\n  ],\n  \"protocolMajor\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    }\n  ],\n  \"protocolMinor\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_EXIST\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    }\n  ],\n  \"minUtxoValue\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_EXIST\"\n    }\n  ],\n  \"minPoolCost\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    }\n  ],\n  \"costModel\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_EXIST\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    }\n  ],\n  \"priceMem\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_EXIST\"\n    }\n  ],\n  \"priceStep\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    }\n  ],\n  \"maxTxExMem\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_EXIST\"\n    }\n  ],\n  \"maxTxExSteps\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    }\n  ],\n  \"maxBlockExMem\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    }\n  ],\n  \"maxBlockExSteps\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_EXIST\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    }\n  ],\n  \"maxValSize\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    }\n  ],\n  \"collateralPercent\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    }\n  ],\n  \"maxCollateralInputs\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"ADDED\"\n    }\n  ],\n  \"coinsPerUtxoSize\": [\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"UPDATED\"\n    },\n    {\n      \"time\": \"<dateTime>\",\n      \"transactionHash\": \"<string>\",\n      \"value\": {},\n      \"status\": \"NOT_CHANGE\"\n    }\n  ]\n}"
                }
              ]
            },
            {
              "name": "Get fixed protocols parameters ",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "//Compare format data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData.activeSlotsCoeff).to.be.a(\"number\");\r",
                      "    pm.expect(typeof jsonData.genDelegs).to.be.oneOf([ 'object', 'array']);\r",
                      "    pm.expect(jsonData.updateQuorum).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.networkId).to.be.a(\"string\");\r",
                      "    pm.expect(typeof jsonData.initialFunds).to.be.oneOf([ 'object', 'array']);\r",
                      "    pm.expect(jsonData.maxLovelaceSupply).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.networkMagic).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.epochLength).to.be.an(\"number\");\r",
                      "    pm.expect(jsonData.timestamp).to.include(moment(jsonData.timestamp).format('YYYY-MM-DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.slotsPerKESPeriod).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.slotLength).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.maxKESEvolutions).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.securityParam).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": "{{baseUrl}}/api/v1/protocols/fixed"
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": "{{baseUrl}}/api/v1/protocols/fixed"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"activeSlotsCoeff\": \"<float>\",\n  \"genDelegs\": {},\n  \"updateQuorum\": \"<integer>\",\n  \"networkId\": \"<string>\",\n  \"initialFunds\": \"<string>\",\n  \"maxLovelaceSupply\": \"<integer>\",\n  \"networkMagic\": \"<integer>\",\n  \"epochLength\": \"<integer>\",\n  \"timestamp\": \"<string>\",\n  \"slotsPerKESPeriod\": \"<integer>\",\n  \"slotLength\": \"<integer>\",\n  \"maxKESEvolutions\": \"<integer>\",\n  \"securityParam\": \"<integer>\"\n}"
                }
              ]
            }
          ]
        },
        {
          "name": "pool-lifecycle",
          "item": [
            {
              "name": "pool Owner",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "if (jsonData.data.length > 0) {\r",
                      "    //Compare data type\r",
                      "    pm.test(\"Check data type of the response\", () => {\r",
                      "        let moment = require('moment');\r",
                      "        pm.expect(jsonData).to.be.an(\"object\");\r",
                      "        pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "        if (jsonData.data.length>0) {\r",
                      "            pm.expect(jsonData.data[0]).to.be.a(\"string\");\r",
                      "        }\r",
                      "\r",
                      "    });\r",
                      "\r",
                      "    //Scenario compare api Get: pool Owner with api Get: Get a stake detail by stake key (stakes)\r",
                      "    pm.test(\"Compare api Get: pool Owner with api Get: Get a stake detail by stake key\", function () {\r",
                      "        pm.expect(jsonData.data).to.include(pm.environment.get(\"stake_pool_poolId\"));\r",
                      "    });\r",
                      "}\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0) {\r",
                      "    pm.test(\"Check Size default\", function () {\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/owner?stakeKey={{stakes_stakeKey}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "owner"
                  ],
                  "query": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakes_stakeKey}}",
                      "description": "(Required) "
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "10",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/pool-lifecycle/owner?stakeKey=<string>&page=0&size=10&sort=<string>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "pool-lifecycle",
                        "owner"
                      ],
                      "query": [
                        {
                          "key": "stakeKey",
                          "value": "<string>",
                          "description": "(Required) "
                        },
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "10",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Boundary - pool Owner (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/owner?stakeKey={{stakes_stakeKey}}&size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "owner"
                  ],
                  "query": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakes_stakeKey}}",
                      "description": "(Required) "
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - pool Owner (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/owner?stakeKey={{stakes_stakeKey}}&size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "owner"
                  ],
                  "query": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakes_stakeKey}}",
                      "description": "(Required) "
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - pool Owner (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/owner?stakeKey={{stakes_stakeKey}}&size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "owner"
                  ],
                  "query": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakes_stakeKey}}",
                      "description": "(Required) "
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - pool Owner (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/owner?stakeKey={{stakes_stakeKey}}&size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "owner"
                  ],
                  "query": [
                    {
                      "key": "stakeKey",
                      "value": "{{stakes_stakeKey}}",
                      "description": "(Required) "
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "registration List",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].poolUpdateId).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].totalFee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].stakeKeys[0]).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].deposit).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "//Check scenario - variable declaration\r",
                      "pm.test(\"Others value exist\",function (){\r",
                      "    \r",
                      "    //Randome value\r",
                      "    var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));\r",
                      "\r",
                      "    pm.environment.set(\"pool_lifecycle_data_poolUpdateId\", jsonData.data[randomIndex].poolUpdateId)\r",
                      "    pm.environment.set(\"pool_lifecycle_data_txHash\", jsonData.data[randomIndex].txHash);\r",
                      "    pm.environment.set(\"pool_lifecycle_data_totalFee\", jsonData.data[randomIndex].totalFee);\r",
                      "    pm.environment.set(\"pool_lifecycle_data_time\", jsonData.data[randomIndex].time);\r",
                      "    pm.environment.set(\"pool_lifecycle_data_fee\", jsonData.data[randomIndex].fee);\r",
                      "    pm.environment.set(\"pool_lifecycle_data_stakeKeys\", jsonData.data[randomIndex].stakeKeys);\r",
                      "    pm.environment.set(\"pool_lifecycle_data_deposit\", jsonData.data[randomIndex].deposit);\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/registration-list?poolView={{pool_report_poolView}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "registration-list"
                  ],
                  "query": [
                    {
                      "key": "poolView",
                      "value": "{{pool_report_poolView}}",
                      "description": "(Required)(From api: detail Pool Report - v1/pool-report/detail/{{pool-report_reportId}})"
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/pool-lifecycle/registration-list?poolView=<string>&page=0&size=10&sort=<string>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "pool-lifecycle",
                        "registration-list"
                      ],
                      "query": [
                        {
                          "key": "poolView",
                          "value": "<string>",
                          "description": "(Required) "
                        },
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "10",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"poolUpdateId\": \"<long>\",\n      \"txHash\": \"<string>\",\n      \"totalFee\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"fee\": \"<integer>\",\n      \"stakeKeys\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"deposit\": \"<integer>\"\n    },\n    {\n      \"poolUpdateId\": \"<long>\",\n      \"txHash\": \"<string>\",\n      \"totalFee\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"fee\": \"<integer>\",\n      \"stakeKeys\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"deposit\": \"<integer>\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Boundary - registration List (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/registration-list?size=100&poolView={{pool_report_poolView}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "registration-list"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "{{pool_report_poolView}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - registration List (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/registration-list?size=101&poolView={{pool_report_poolView}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "registration-list"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "{{pool_report_poolView}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - registration List (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/registration-list?poolView={{pool_report_poolView}}&size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "registration-list"
                  ],
                  "query": [
                    {
                      "key": "poolView",
                      "value": "{{pool_report_poolView}}",
                      "description": "(Required)(From api: detail Pool Report - v1/pool-report/detail/{{pool-report_reportId}})"
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - registration List (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/registration-list?poolView={{pool_report_poolView}}&size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "registration-list"
                  ],
                  "query": [
                    {
                      "key": "poolView",
                      "value": "{{pool_report_poolView}}",
                      "description": "(Required)(From api: detail Pool Report - v1/pool-report/detail/{{pool-report_reportId}})"
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "registration Detail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "\r",
                      "    pm.expect(jsonData.poolId).to.be.a(\"string\");\r",
                      "    if(jsonData.poolName){\r",
                      "        pm.expect(typeof jsonData.poolName).to.be.oneOf([ 'object', 'string']);\r",
                      "    }\r",
                      "    pm.expect(jsonData.poolView).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.totalFee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.time).to.include(moment(jsonData.time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.rewardAccount).to.be.an(\"string\");\r",
                      "    pm.expect(jsonData.stakeKeys).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.vrfKey).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.pledge).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.margin).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.cost).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.deposit).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "//scenario compare value off registration Detail api and registration List\r",
                      "pm.test(\"Others value exist\",function (){\r",
                      "    //All value: API registration List (v1/pool-lifecycle/registration-list?poolView={{pool-report_poolView}})\r",
                      "    pm.expect(jsonData.txHash).to.include(pm.environment.get(\"pool_lifecycle_data_txHash\"));\r",
                      "    pm.expect(jsonData.time).to.contain(pm.environment.get(\"pool_lifecycle_data_time\"));\r",
                      "    pm.expect(jsonData.stakeKeys).to.eql(pm.environment.get(\"pool_lifecycle_data_stakeKeys\"));\r",
                      "    pm.expect(jsonData.deposit).to.eql(pm.environment.get(\"pool_lifecycle_data_deposit\"));\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/registration-detail?poolView={{pool_report_poolView}}&id={{pool_lifecycle_data_poolUpdateId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "registration-detail"
                  ],
                  "query": [
                    {
                      "key": "poolView",
                      "value": "{{pool_report_poolView}}",
                      "description": "(From api: detail Pool Report - v1/pool-report/detail/{{pool-report_reportId}})"
                    },
                    {
                      "key": "id",
                      "value": "{{pool_lifecycle_data_poolUpdateId}}",
                      "description": "(From api: registration List - v1/pool-lifecycle/registration-list?poolView={{pool-report_poolView}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/pool-lifecycle/registration-detail?poolView=<string>&id=<long>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "pool-lifecycle",
                        "registration-detail"
                      ],
                      "query": [
                        {
                          "key": "poolView",
                          "value": "<string>",
                          "description": "(Required) "
                        },
                        {
                          "key": "id",
                          "value": "<long>",
                          "description": "(Required) "
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"poolId\": \"<string>\",\n  \"poolName\": \"<string>\",\n  \"poolView\": \"<string>\",\n  \"txHash\": \"<string>\",\n  \"totalFee\": \"<integer>\",\n  \"time\": \"<dateTime>\",\n  \"fee\": \"<integer>\",\n  \"rewardAccount\": \"<string>\",\n  \"stakeKeys\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"vrfKey\": \"<string>\",\n  \"pledge\": \"<integer>\",\n  \"margin\": \"<double>\",\n  \"cost\": \"<integer>\",\n  \"deposit\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "registration",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].poolUpdateId).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].margin).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].poolHold).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/registration?poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy&txHash=a96c79773b7506211eb56bf94886a2face17657d1009f52fb5ea05f19cc8823e",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                      "description": "(Required) "
                    },
                    {
                      "key": "txHash",
                      "value": "a96c79773b7506211eb56bf94886a2face17657d1009f52fb5ea05f19cc8823e",
                      "description": "(Required) "
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/pool-lifecycle/registration?page=0&size=10&sort=<string>&poolView=<string>&txHash=<string>&fromDate=<dateTime>&toDate=<dateTime>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "pool-lifecycle",
                        "registration"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "10",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        },
                        {
                          "key": "poolView",
                          "value": "<string>",
                          "description": "(Required) "
                        },
                        {
                          "key": "txHash",
                          "value": "<string>",
                          "description": "(Required) "
                        },
                        {
                          "key": "fromDate",
                          "value": "<dateTime>",
                          "description": "(Required) "
                        },
                        {
                          "key": "toDate",
                          "value": "<dateTime>",
                          "description": "(Required) "
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"poolUpdateId\": \"<long>\",\n      \"txHash\": \"<string>\",\n      \"fee\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"margin\": \"<double>\",\n      \"poolHold\": \"<integer>\"\n    },\n    {\n      \"poolUpdateId\": \"<long>\",\n      \"txHash\": \"<string>\",\n      \"fee\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"margin\": \"<double>\",\n      \"poolHold\": \"<integer>\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Boundary - registration (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/registration?size=100&poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy&txHash=a96c79773b7506211eb56bf94886a2face17657d1009f52fb5ea05f19cc8823e",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                      "description": "(Required) "
                    },
                    {
                      "key": "txHash",
                      "value": "a96c79773b7506211eb56bf94886a2face17657d1009f52fb5ea05f19cc8823e",
                      "description": "(Required) "
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - registration (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/registration?size=101&poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy&txHash=a96c79773b7506211eb56bf94886a2face17657d1009f52fb5ea05f19cc8823e",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                      "description": "(Required) "
                    },
                    {
                      "key": "txHash",
                      "value": "a96c79773b7506211eb56bf94886a2face17657d1009f52fb5ea05f19cc8823e",
                      "description": "(Required) "
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - registration (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/registration?size=1&poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy&txHash=a96c79773b7506211eb56bf94886a2face17657d1009f52fb5ea05f19cc8823e",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                      "description": "(Required) "
                    },
                    {
                      "key": "txHash",
                      "value": "a96c79773b7506211eb56bf94886a2face17657d1009f52fb5ea05f19cc8823e",
                      "description": "(Required) "
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - registration (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/registration?size=-1&poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy&txHash=a96c79773b7506211eb56bf94886a2face17657d1009f52fb5ea05f19cc8823e",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                      "description": "(Required) "
                    },
                    {
                      "key": "txHash",
                      "value": "a96c79773b7506211eb56bf94886a2face17657d1009f52fb5ea05f19cc8823e",
                      "description": "(Required) "
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "pool Info",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check poolId value\", function () {\r",
                      "    pm.expect(jsonData.poolId).to.include(\"0f292fcaa02b8b2f9b3c8f9fd8e0bb21abedb692a6d5058df3ef2735\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check poolName value\", function () {\r",
                      "    pm.expect(jsonData.poolName).to.include(\"StakeNuts\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check poolView value\", function () {\r",
                      "    pm.expect(jsonData.poolView).to.include(\"pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy\");\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.poolId).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.poolName).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.poolView).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.poolSize).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.rewardAvailable).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.status).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.epochNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.stakeKeys).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.rewardAccounts).to.be.an(\"array\");\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/pool-info?poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "pool-info"
                  ],
                  "query": [
                    {
                      "key": "poolView",
                      "value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/pool-lifecycle/pool-info?poolView=<string>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "pool-lifecycle",
                        "pool-info"
                      ],
                      "query": [
                        {
                          "key": "poolView",
                          "value": "<string>",
                          "description": "(Required) "
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"poolId\": \"<string>\",\n  \"poolName\": \"<string>\",\n  \"poolView\": \"<string>\",\n  \"poolSize\": \"<integer>\",\n  \"rewardAvailable\": \"<integer>\",\n  \"status\": \"<string>\",\n  \"epochNo\": \"<integer>\",\n  \"stakeKeys\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"rewardAccounts\": [\n    \"<string>\",\n    \"<string>\"\n  ]\n}"
                }
              ]
            },
            {
              "name": "reward",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Check name\r",
                      "pm.test(\"Check name of contributions in field data\", function () {\r",
                      "    var arrayOfResponseKeys  = Object.keys(jsonData)\r",
                      "    var myKeysList = [\"data\", \"totalItems\", \"totalPages\", \"currentPage\",\"isDataOverSize\"];\r",
                      "    for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
                      "        pm.expect(arrayOfResponseKeys[i]).to.be.oneOf(myKeysList);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "if  (jsonData.data.length > 0 && pm.environment.get(\"pool-report_data_ResStt\") === \"Not null\"){\r",
                      "    //Compare data type\r",
                      "    pm.test(\"Check data type of the response\", () => {\r",
                      "        \r",
                      "        let moment = require ('moment');\r",
                      "        pm.expect(jsonData).to.be.an(\"object\");\r",
                      "        pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "        pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "        pm.expect(jsonData.data[0].amount).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[0].rewardAccount).to.be.an(\"string\");\r",
                      "        \r",
                      "    });\r",
                      "\r",
                      "    //scenario compare value of reward api detail reward Distribution 1 api - data called from detail Reward Distribution api: /api/v1/pool-report/detail/:reportId/rewards-distribution\r",
                      "    pm.test(\"Others value exist\",function (){\r",
                      "        var epochNo = pm.environment.get(\"pool_report_data_epochNo\");\r",
                      "        let result = jsonData.data.find(a => a.epochNo === epochNo);\r",
                      "        pm.expect(result.time).to.contain(pm.environment.get(\"pool_report_data_time\"));\r",
                      "        pm.expect(result.amount).to.eql(pm.environment.get(\"pool_report_data_amount\"));\r",
                      "        pm.expect(result.rewardAccount).to.eql(pm.environment.get(\"pool_report_data_rewardAccount\"));\r",
                      "        \r",
                      "    });\r",
                      "}\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/reward?poolView={{pool_report_poolView}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "reward"
                  ],
                  "query": [
                    {
                      "key": "poolView",
                      "value": "{{pool_report_poolView}}",
                      "description": "(Required) "
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/pool-lifecycle/reward?poolView=<string>&page=0&size=10&sort=<string>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "pool-lifecycle",
                        "reward"
                      ],
                      "query": [
                        {
                          "key": "poolView",
                          "value": "<string>",
                          "description": "(Required) "
                        },
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "10",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"epochNo\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"amount\": \"<integer>\",\n      \"rewardAccount\": \"<string>\"\n    },\n    {\n      \"epochNo\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"amount\": \"<integer>\",\n      \"rewardAccount\": \"<string>\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Boundary - reward (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/reward?size=100&poolView={{pool_report_poolView}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "reward"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "{{pool_report_poolView}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - reward (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/reward?size=101&poolView={{pool_report_poolView}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "reward"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "{{pool_report_poolView}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - reward (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/reward?size=1&poolView={{pool_report_poolView}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "reward"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "{{pool_report_poolView}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - reward (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/reward?size=-1&poolView={{pool_report_poolView}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "reward"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "{{pool_report_poolView}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "pool Update 1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "if  (jsonData.data.length > 0){\r",
                      "    //Compare data type\r",
                      "    pm.test(\"Check data type of the response\", () => {    \r",
                      "        let moment = require ('moment');\r",
                      "\r",
                      "        pm.expect(jsonData).to.be.an(\"object\");\r",
                      "        pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "        pm.expect(jsonData.data[0].poolUpdateId).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[0].poolId).to.be.a(\"string\");\r",
                      "        if(jsonData.data.poolName){\r",
                      "            pm.expect(typeof jsonData.data[0].poolName).to.be.oneOf([ 'object', 'string']);\r",
                      "        }\r",
                      "        pm.expect(jsonData.data[0].poolView).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.data[0].previousPledge).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[0].previousMargin).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "        pm.expect(jsonData.data[0].stakeKeys[0]).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[0].rewardAccount).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.data[0].vrfKey).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.data[0].pledge).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[0].margin).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[0].cost).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[0].deposit).to.be.a(\"number\");\r",
                      "\r",
                      "    });\r",
                      "\r",
                      "//Scenario compare Get detail Pool Update api with get pool Update 1 api \r",
                      "pm.test(\"Others value exist\",function (){\r",
                      "    var poolUpdateId = pm.environment.get(\"poolreport_data_poolUpdateId\");\r",
                      "    let result = jsonData.data.find(a => a.poolUpdateId === poolUpdateId);\r",
                      "\r",
                      "    pm.expect(result.poolId).to.be.eql(pm.environment.get(\"poolreport_data_poolId\"));\r",
                      "    pm.expect(result.poolName || \"\").to.be.include(pm.environment.get(\"poolreport_data_poolName\") || \"\");\r",
                      "    pm.expect(result.poolView).to.be.include(pm.environment.get(\"poolreport_data_poolView\"));\r",
                      "    pm.expect(result.previousPledge).to.be.eql(pm.environment.get(\"poolreport_data_previousPledge\"));\r",
                      "    pm.expect(result.previousMargin).to.be.eql(pm.environment.get(\"poolreport_data_previousMargin\"));\r",
                      "    pm.expect(result.txHash).to.be.include(pm.environment.get(\"poolreport_data_txHash\"));\r",
                      "    pm.expect(result.time).to.be.contain(pm.environment.get(\"poolreport_data_time\"));\r",
                      "    pm.expect(result.stakeKeys).to.be.eql(pm.environment.get(\"poolreport_data_stakeKeys\"));\r",
                      "    pm.expect(result.fee).to.be.eql(pm.environment.get(\"poolreport_data_fee\"));\r",
                      "    pm.expect(result.rewardAccount).to.be.include(pm.environment.get(\"poolreport_data_rewardAccount\"));\r",
                      "    pm.expect(result.vrfKey).to.be.include(pm.environment.get(\"poolreport_data_vrfKey\"));\r",
                      "    pm.expect(result.pledge).to.be.eql(pm.environment.get(\"poolreport_data_pledge\"));\r",
                      "    pm.expect(result.margin).to.be.eql(pm.environment.get(\"poolreport_data_margin\"));\r",
                      "    pm.expect(result.cost).to.be.eql(pm.environment.get(\"poolreport_data_cost\"));\r",
                      "    pm.expect(result.deposit).to.be.eql(pm.environment.get(\"poolreport_data_deposit\"));\r",
                      "});\r",
                      "\r",
                      "    //Count total contribution\r",
                      "    pm.test(\"Check number of contributions in data level 2\", function () {\r",
                      "\r",
                      "        var number = Object.keys(jsonData.data[0]).length;\r",
                      "        pm.expect(number).to.eql(16)\r",
                      "\r",
                      "    });\r",
                      "\r",
                      "    //Check name\r",
                      "    pm.test(\"Check name of contributions in data data\", function () {\r",
                      "        var arrayOfResponseKeys  = Object.keys(jsonData.data[0])\r",
                      "        var myKeysList = [\"poolUpdateId\", \"poolId\", \"poolName\", \"poolView\", \"previousPledge\", \"previousMargin\", \"txHash\", \"time\", \"stakeKeys\", \"fee\", \"rewardAccount\", \"vrfKey\", \"pledge\", \"margin\", \"cost\", \"deposit\"];\r",
                      "\r",
                      "        for (let i = 0; i < arrayOfResponseKeys.length; i++) {\r",
                      "            pm.expect(arrayOfResponseKeys[i]).to.be.oneOf(myKeysList);\r",
                      "        }\r",
                      "            \r",
                      "    });\r",
                      "\r",
                      "    //Check scenario call data at pool Update 1 api - variable declaration\r",
                      "    pm.test(\"Others value exist\",function (){  \r",
                      "        //Randome value\r",
                      "        var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));\r",
                      "\r",
                      "        pm.environment.set(\"pool_lifecycle_data_poolUpdateId\", jsonData.data[randomIndex].poolUpdateId);\r",
                      "        pm.environment.set(\"pool_lifecycle_data_poolId\", jsonData.data[randomIndex].poolId);\r",
                      "        pm.environment.set(\"pool_lifecycle_data_poolName\", jsonData.data[randomIndex].poolName);\r",
                      "        pm.environment.set(\"pool_lifecycle_data_poolView\", jsonData.data[randomIndex].poolView);\r",
                      "        pm.environment.set(\"pool_lifecycle_data_previousPledge\", jsonData.data[randomIndex].previousPledge);\r",
                      "        pm.environment.set(\"pool_lifecycle_data_previousMargin\", jsonData.data[randomIndex].previousMargin);\r",
                      "        pm.environment.set(\"pool_lifecycle_data_txHash\", jsonData.data[randomIndex].txHash);\r",
                      "        pm.environment.set(\"pool_lifecycle_data_time\", jsonData.data[randomIndex].time);\r",
                      "        pm.environment.set(\"pool_lifecycle_data_stakeKeys\", jsonData.data[randomIndex].stakeKeys);\r",
                      "        pm.environment.set(\"pool_lifecycle_data_fee\", jsonData.data[randomIndex].fee);\r",
                      "        pm.environment.set(\"pool_lifecycle_data_rewardAccount\", jsonData.data[randomIndex].rewardAccount);\r",
                      "        pm.environment.set(\"pool_lifecycle_data_vrfKey\", jsonData.data[randomIndex].vrfKey);\r",
                      "        pm.environment.set(\"pool_lifecycle_data_pledge\", jsonData.data[randomIndex].pledge);\r",
                      "        pm.environment.set(\"pool_lifecycle_data_margin\", jsonData.data[randomIndex].margin);\r",
                      "        pm.environment.set(\"pool_lifecycle_data_cost\", jsonData.data[randomIndex].cost);\r",
                      "        pm.environment.set(\"pool_lifecycle_data_deposit\", jsonData.data[randomIndex].deposit);\r",
                      "        \r",
                      "    }); \r",
                      "}\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/pool-update-list?poolView={{pool_report_poolView}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "pool-update-list"
                  ],
                  "query": [
                    {
                      "key": "poolView",
                      "value": "{{pool_report_poolView}}",
                      "description": "(From api: detail Pool Report - /api/v1/pool-report/detail/reportId)"
                    },
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/pool-lifecycle/pool-update-list?poolView=<string>&page=0&size=10&sort=<string>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "pool-lifecycle",
                        "pool-update-list"
                      ],
                      "query": [
                        {
                          "key": "poolView",
                          "value": "<string>",
                          "description": "(Required) "
                        },
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "10",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"poolUpdateId\": \"<long>\",\n      \"poolId\": \"<string>\",\n      \"poolName\": \"<string>\",\n      \"poolView\": \"<string>\",\n      \"previousPledge\": \"<integer>\",\n      \"previousMargin\": \"<double>\",\n      \"txHash\": \"<string>\",\n      \"time\": \"<dateTime>\",\n      \"stakeKeys\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"fee\": \"<integer>\",\n      \"rewardAccount\": \"<string>\",\n      \"vrfKey\": \"<string>\",\n      \"pledge\": \"<integer>\",\n      \"margin\": \"<double>\",\n      \"cost\": \"<integer>\",\n      \"deposit\": \"<integer>\"\n    },\n    {\n      \"poolUpdateId\": \"<long>\",\n      \"poolId\": \"<string>\",\n      \"poolName\": \"<string>\",\n      \"poolView\": \"<string>\",\n      \"previousPledge\": \"<integer>\",\n      \"previousMargin\": \"<double>\",\n      \"txHash\": \"<string>\",\n      \"time\": \"<dateTime>\",\n      \"stakeKeys\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"fee\": \"<integer>\",\n      \"rewardAccount\": \"<string>\",\n      \"vrfKey\": \"<string>\",\n      \"pledge\": \"<integer>\",\n      \"margin\": \"<double>\",\n      \"cost\": \"<integer>\",\n      \"deposit\": \"<integer>\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Boundary - pool Update 1 (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/pool-update-list?size=100&poolView={{pool_report_poolView}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "pool-update-list"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "{{pool_report_poolView}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - pool Update 1 (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/pool-update-list?size=101&poolView={{pool_report_poolView}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "pool-update-list"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "{{pool_report_poolView}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - pool Update 1 (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/pool-update-list?size=1&poolView={{pool_report_poolView}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "pool-update-list"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "{{pool_report_poolView}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - pool Update 1 (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/pool-update-list?size=-1&poolView={{pool_report_poolView}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "pool-update-list"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "{{pool_report_poolView}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "de Registration",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "if  (jsonData.data.length > 0){\r",
                      "    //Compare data type\r",
                      "    pm.test(\"Check data type of the response\", () => {\r",
                      "\r",
                      "        let moment = require ('moment');\r",
                      "        pm.expect(jsonData).to.be.an(\"object\");\r",
                      "        pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "        pm.expect(jsonData.data[0].poolId).to.be.a(\"string\");\r",
                      "        if(jsonData.data.poolName){\r",
                      "            pm.expect(typeof jsonData.data[0].poolName).to.be.oneOf([\"object\",\"string\"]);\r",
                      "        }\r",
                      "        pm.expect(jsonData.data[0].poolView).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.data[0].stakeKeys).to.be.an(\"array\");\r",
                      "        pm.expect(jsonData.data[0].stakeKeys[0]).to.be.an(\"string\");\r",
                      "        pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "        pm.expect(jsonData.data[0].totalFee).to.be.a(\"number\");\r",
                      "        if(jsonData.data.poolHold){\r",
                      "            pm.expect(typeof jsonData.data[0].poolHold).to.be.oneOf(['object', 'number']);\r",
                      "        }\r",
                      "        pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "        pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[0].retiringEpoch).to.be.a(\"number\");\r",
                      "        pm.expect(jsonData.data[0].refundFlag).to.be.a(\"boolean\");\r",
                      "\r",
                      "    });\r",
                      "\r",
                      "    //Scenario compare Get detail Deregistration api with get de Registration api \r",
                      "    pm.test(\"Compare data at Get de Registration api with Get detail Deregistration api\",function(){\r",
                      "        \r",
                      "        var pool_view = pm.environment.get(\"poolreport_detailDere_data_poolView\");\r",
                      "        let result = jsonData.data.find(a => a.poolView === pool_view);\r",
                      "\r",
                      "        pm.expect(result.poolId).to.be.eql(pm.environment.get(\"poolreport_detailDere_data_poolId\"));\r",
                      "        pm.expect(result.poolName || \"\").to.be.include(pm.environment.get(\"poolreport_detailDere_data_poolName\") || \"\");\r",
                      "        pm.expect(result.poolView).to.be.include(pm.environment.get(\"poolreport_detailDere_data_poolView\"));\r",
                      "        pm.expect(result.stakeKeys).to.be.eql(pm.environment.get(\"poolreport_detailDere_data_stakeKeys\"));\r",
                      "        pm.expect(result.txHash).to.be.include(pm.environment.get(\"poolreport_detailDere_data_txHash\"));\r",
                      "        pm.expect(result.totalFee).to.be.eql(pm.environment.get(\"poolreport_detailDere_data_totalFee\"));\r",
                      "        pm.expect(result.poolHold).to.be.eql(pm.environment.get(\"poolreport_detailDere_data_poolHold\"));\r",
                      "        pm.expect(result.time).to.be.contain(pm.environment.get(\"poolreport_detailDere_data_time\"));\r",
                      "        pm.expect(result.fee).to.be.eql(pm.environment.get(\"poolreport_detailDere_data_fee\"));\r",
                      "        pm.expect(result.retiringEpoch).to.be.eql(pm.environment.get(\"poolreport_detailDere_data_retiringEpoch\"));\r",
                      "        pm.expect(result.refundFlag).to.be.eql(pm.environment.get(\"poolreport_detailDere_data_refundFlag\"));\r",
                      "        \r",
                      "    })\r",
                      "}\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/de-registration?poolView={{pool_report_poolView}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "de-registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "{{pool_report_poolView}}"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/pool-lifecycle/de-registration?page=0&size=10&sort=<string>&poolView=<string>&txHash=<string>&fromDate=<dateTime>&toDate=<dateTime>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "pool-lifecycle",
                        "de-registration"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "10",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        },
                        {
                          "key": "poolView",
                          "value": "<string>",
                          "description": "(Required) "
                        },
                        {
                          "key": "txHash",
                          "value": "<string>",
                          "description": "(Required) "
                        },
                        {
                          "key": "fromDate",
                          "value": "<dateTime>",
                          "description": "(Required) "
                        },
                        {
                          "key": "toDate",
                          "value": "<dateTime>",
                          "description": "(Required) "
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"poolId\": \"<string>\",\n      \"poolName\": \"<string>\",\n      \"poolView\": \"<string>\",\n      \"stakeKeys\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"txHash\": \"<string>\",\n      \"totalFee\": \"<integer>\",\n      \"poolHold\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"fee\": \"<integer>\",\n      \"retiringEpoch\": \"<integer>\",\n      \"refundFlag\": \"<boolean>\"\n    },\n    {\n      \"poolId\": \"<string>\",\n      \"poolName\": \"<string>\",\n      \"poolView\": \"<string>\",\n      \"stakeKeys\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"txHash\": \"<string>\",\n      \"totalFee\": \"<integer>\",\n      \"poolHold\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"fee\": \"<integer>\",\n      \"retiringEpoch\": \"<integer>\",\n      \"refundFlag\": \"<boolean>\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Boundary - de Registration (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/de-registration?size=100&poolView={{pool_report_poolView}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "de-registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "{{pool_report_poolView}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - de Registration (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/de-registration?size=101&poolView={{pool_report_poolView}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "de-registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "{{pool_report_poolView}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - de Registration (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/de-registration?size=1&poolView={{pool_report_poolView}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "de-registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "{{pool_report_poolView}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - de Registration (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/de-registration?size=-1&poolView={{pool_report_poolView}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "de-registration"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "{{pool_report_poolView}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "pool Update",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].poolUpdateId).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].margin).to.be.a(\"number\");\r",
                      "    if(jsonData.data.poolHold){\r",
                      "        pm.expect(typeof jsonData.data[0].poolHold).to.be.oneOf(['object', 'string']);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/pool-update?poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "pool-update"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                      "description": "(Required) "
                    },
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/pool-lifecycle/pool-update?page=0&size=10&sort=<string>&poolView=<string>&txHash=<string>&fromDate=<dateTime>&toDate=<dateTime>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "pool-lifecycle",
                        "pool-update"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "10",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        },
                        {
                          "key": "poolView",
                          "value": "<string>",
                          "description": "(Required) "
                        },
                        {
                          "key": "txHash",
                          "value": "<string>",
                          "description": "(Required) "
                        },
                        {
                          "key": "fromDate",
                          "value": "<dateTime>",
                          "description": "(Required) "
                        },
                        {
                          "key": "toDate",
                          "value": "<dateTime>",
                          "description": "(Required) "
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"poolUpdateId\": \"<long>\",\n      \"txHash\": \"<string>\",\n      \"fee\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"margin\": \"<double>\",\n      \"poolHold\": \"<integer>\"\n    },\n    {\n      \"poolUpdateId\": \"<long>\",\n      \"txHash\": \"<string>\",\n      \"fee\": \"<integer>\",\n      \"time\": \"<dateTime>\",\n      \"margin\": \"<double>\",\n      \"poolHold\": \"<integer>\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Boundary - pool Update (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/pool-update?size=100&poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "pool-update"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                      "description": "(Required) "
                    },
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - pool Update (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/pool-update?size=101&poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "pool-update"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                      "description": "(Required) "
                    },
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - pool Update (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/pool-update?size=1&poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "pool-update"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                      "description": "(Required) "
                    },
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - pool Update (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/pool-update?size=-1&poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "pool-update"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "poolView",
                      "value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                      "description": "(Required) "
                    },
                    {
                      "key": "txHash",
                      "value": "<string>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "fromDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    },
                    {
                      "key": "toDate",
                      "value": "<dateTime>",
                      "description": "(Required) ",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "pool Status",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.isRegistration).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.isUpdate).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.isReward).to.be.a(\"boolean\");\r",
                      "    pm.expect(jsonData.isDeRegistration).to.be.a(\"boolean\");\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/status?poolView=pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "status"
                  ],
                  "query": [
                    {
                      "key": "poolView",
                      "value": "pool1pu5jlj4q9w9jlxeu370a3c9myx47md5j5m2str0naunn2q3lkdy",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/pool-lifecycle/status?poolView=<string>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "pool-lifecycle",
                        "status"
                      ],
                      "query": [
                        {
                          "key": "poolView",
                          "value": "<string>",
                          "description": "(Required) "
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"isRegistration\": \"<boolean>\",\n  \"isUpdate\": \"<boolean>\",\n  \"isReward\": \"<boolean>\",\n  \"isDeRegistration\": \"<boolean>\"\n}"
                }
              ]
            },
            {
              "name": "pool Update 2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.poolId).to.be.a(\"string\");\r",
                      "    if(jsonData.poolName){\r",
                      "        pm.expect(typeof jsonData.poolName).to.be.oneOf(['object', 'string']);\r",
                      "    }\r",
                      "    pm.expect(jsonData.poolView).to.be.a(\"string\");\r",
                      "    if(jsonData.previousPledge){\r",
                      "        pm.expect(typeof jsonData.previousPledge).to.be.oneOf(['object', 'number']);\r",
                      "    }\r",
                      "    if(jsonData.previousMargin){\r",
                      "        pm.expect(typeof jsonData.previousMargin).to.be.oneOf(['object', 'number']);\r",
                      "    }\r",
                      "    pm.expect(jsonData.txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.time).to.include(moment(jsonData.time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.stakeKeys[0]).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.fee).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.rewardAccount).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.vrfKey).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.pledge).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.margin).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.cost).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.deposit).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "//scenario compare value of pool Update 2 api and pool Update 1 api - Data called from pool Update 1 api: /api/v1/pool-lifecycle/pool-update-list?poolView\r",
                      "pm.test(\"Others value exist\",function (){\r",
                      "    if  (jsonData.length > 0){ \r",
                      "    pm.expect(jsonData.poolId).to.include(pm.environment.get(\"pool_lifecycle_data_poolId\"));\r",
                      "    pm.expect(jsonData.poolName || \"\").to.include(pm.environment.get(\"pool_lifecycle_data_poolName\") || \"\");\r",
                      "    pm.expect(jsonData.poolView).to.include(pm.environment.get(\"pool_lifecycle_data_poolView\"));\r",
                      "    pm.expect(jsonData.previousPledge).to.eql(pm.environment.get(\"pool_lifecycle_data_previousPledge\"));\r",
                      "    pm.expect(jsonData.previousMargin).to.eql(pm.environment.get(\"pool_lifecycle_data_previousMargin\"));\r",
                      "    pm.expect(jsonData.txHash).to.include(pm.environment.get(\"pool_lifecycle_data_txHash\"));\r",
                      "    pm.expect(jsonData.time).to.contain(pm.environment.get(\"pool_lifecycle_data_time\"));\r",
                      "    pm.expect(jsonData.stakeKeys).to.eql(pm.environment.get(\"pool_lifecycle_data_stakeKeys\"));\r",
                      "    pm.expect(jsonData.fee).to.eql(pm.environment.get(\"pool_lifecycle_data_fee\"));\r",
                      "    pm.expect(jsonData.rewardAccount).to.include(pm.environment.get(\"pool_lifecycle_data_rewardAccount\"));\r",
                      "    pm.expect(jsonData.vrfKey).to.include(pm.environment.get(\"pool_lifecycle_data_vrfKey\"));\r",
                      "    pm.expect(jsonData.pledge).to.eql(pm.environment.get(\"pool_lifecycle_data_pledge\"));\r",
                      "    pm.expect(jsonData.margin).to.eql(pm.environment.get(\"pool_lifecycle_data_margin\"));\r",
                      "    pm.expect(jsonData.cost).to.eql(pm.environment.get(\"pool_lifecycle_data_cost\"));\r",
                      "    pm.expect(jsonData.deposit).to.eql(pm.environment.get(\"pool_lifecycle_data_deposit\"));\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/pool-lifecycle/pool-update-detail?id={{pool_lifecycle_data_poolUpdateId}}",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "pool-lifecycle",
                    "pool-update-detail"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{pool_lifecycle_data_poolUpdateId}}",
                      "description": "(From api: pool Update 1 - /api/v1/pool-lifecycle/pool-update-list?poolView)"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/pool-lifecycle/pool-update-detail?id=<long>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "pool-lifecycle",
                        "pool-update-detail"
                      ],
                      "query": [
                        {
                          "key": "id",
                          "value": "<long>",
                          "description": "(Required) "
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"poolUpdateId\": \"<long>\",\n  \"poolId\": \"<string>\",\n  \"poolName\": \"<string>\",\n  \"poolView\": \"<string>\",\n  \"previousPledge\": \"<integer>\",\n  \"previousMargin\": \"<double>\",\n  \"txHash\": \"<string>\",\n  \"time\": \"<dateTime>\",\n  \"stakeKeys\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"fee\": \"<integer>\",\n  \"rewardAccount\": \"<string>\",\n  \"vrfKey\": \"<string>\",\n  \"pledge\": \"<integer>\",\n  \"margin\": \"<double>\",\n  \"cost\": \"<integer>\",\n  \"deposit\": \"<integer>\"\n}"
                }
              ]
            }
          ]
        },
        {
          "name": "policies",
          "item": [
            {
              "name": "Get a policy detail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "var policyId = \"3d67069772c7ff1a14ea648c2de179fb3517759ac48c8f29ed1624ac\"\r",
                      "var policyScript = null\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "//Check type data\r",
                      "pm.test(\"Check data type of totalToken\", () => {\r",
                      "  pm.expect(jsonData.totalToken).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of policyId\", () => {\r",
                      "  pm.expect(jsonData.policyId).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of policyScript\", () => {\r",
                      "  pm.expect(jsonData.policyScript).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of nativeScript\", () => {\r",
                      "  pm.expect(jsonData.nativeScript).to.be.a(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of smartContract\", () => {\r",
                      "  pm.expect(jsonData.smartContract).to.be.a(\"boolean\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/policies/:policyId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "policies",
                    ":policyId"
                  ],
                  "variable": [
                    {
                      "key": "policyId",
                      "value": "3d67069772c7ff1a14ea648c2de179fb3517759ac48c8f29ed1624ac",
                      "description": "(Required) Policy hash"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/policies/:policyId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "policies",
                        ":policyId"
                      ],
                      "variable": [
                        {
                          "key": "policyId",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) Policy hash"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"policyId\": \"ut Duis\",\n  \"totalToken\": 29354792,\n  \"policyScript\": \"nisi\"\n}"
                }
              ]
            },
            {
              "name": "Get tokens by policy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "var current_page = 0\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Compare Currentpage\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
                      "});\r",
                      "\r",
                      "//Compare format dynamic data\r",
                      "pm.test(\"Check data type of id\", () => {\r",
                      "  pm.expect(jsonData.data[0].id).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of name\", () => {\r",
                      "  pm.expect(jsonData.data[0].name).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of displayName\", () => {\r",
                      "  pm.expect(jsonData.data[0].displayName).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of policy\", () => {\r",
                      "  pm.expect(jsonData.data[0].policy).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of fingerprint\", () => {\r",
                      "  pm.expect(jsonData.data[0].fingerprint).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of txCount\", () => {\r",
                      "  pm.expect(jsonData.data[0].txCount).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of supply\", () => {\r",
                      "  pm.expect(jsonData.data[0].supply).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalVolume\", () => {\r",
                      "  pm.expect(jsonData.data[0].totalVolume).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of createdOn\", () => {\r",
                      "        let moment = require ('moment');\r",
                      "  pm.expect(jsonData.data[0].createdOn).to.include(moment(jsonData.data[0].createdOn).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalItems\", () => {\r",
                      "  pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of totalPages\", () => {\r",
                      "  pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/policies/:policyId/tokens",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "policies",
                    ":policyId",
                    "tokens"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "policyId",
                      "value": "4429f7b432125357388b1d676c2d503b6d6fc78c414934bef9882e26",
                      "description": "(Required) Policy hash"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/policies/:policyId/tokens?page=0&size=20&sort=ex&sort=nisi de",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "policies",
                        ":policyId",
                        "tokens"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "20"
                        },
                        {
                          "key": "sort",
                          "value": "ex"
                        },
                        {
                          "key": "sort",
                          "value": "nisi de"
                        }
                      ],
                      "variable": [
                        {
                          "key": "policyId",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) Policy hash"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"id\": 11516470,\n      \"name\": \"officia in aliquip incididunt ea\",\n      \"displayName\": \"velit consequat\",\n      \"policy\": \"elit ad ut anim\",\n      \"fingerprint\": \"non ut sit ex\",\n      \"txCount\": 91830408,\n      \"supply\": \"veniam\",\n      \"volumeIn24h\": \"ut mollit\",\n      \"totalVolume\": \"aliqua cillum ut\",\n      \"numberOfHolders\": -86312415,\n      \"createdOn\": \"1979-06-15T01:09:51.664Z\",\n      \"metadata\": {\n        \"url\": \"velit nostrud elit\",\n        \"ticker\": \"Duis eu\",\n        \"decimals\": -99689615,\n        \"logo\": \"proident qui\",\n        \"description\": \"sint laborum eiusmod\"\n      }\n    },\n    {\n      \"id\": 32581234,\n      \"name\": \"reprehenderit dolor\",\n      \"displayName\": \"incididunt eiusmod\",\n      \"policy\": \"irure ad Duis\",\n      \"fingerprint\": \"consectetur velit\",\n      \"txCount\": -35390961,\n      \"supply\": \"magna et ad quis\",\n      \"volumeIn24h\": \"eiusmod quis\",\n      \"totalVolume\": \"ea proident officia\",\n      \"numberOfHolders\": 37158182,\n      \"createdOn\": \"1986-12-28T04:27:00.897Z\",\n      \"metadata\": {\n        \"url\": \"exercitation mollit sit\",\n        \"ticker\": \"sunt velit ad elit\",\n        \"decimals\": -86674359,\n        \"logo\": \"voluptate\",\n        \"description\": \"dolore ipsum ut\"\n      }\n    }\n  ],\n  \"totalItems\": -29023080,\n  \"totalPages\": -23360559,\n  \"currentPage\": -75704619\n}"
                }
              ]
            },
            {
              "name": "Boundary - Get tokens by policy (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/policies/:policyId/tokens?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "policies",
                    ":policyId",
                    "tokens"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    }
                  ],
                  "variable": [
                    {
                      "key": "policyId",
                      "value": "4429f7b432125357388b1d676c2d503b6d6fc78c414934bef9882e26",
                      "description": "(Required) Policy hash"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get tokens by policy (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/policies/:policyId/tokens?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "policies",
                    ":policyId",
                    "tokens"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    }
                  ],
                  "variable": [
                    {
                      "key": "policyId",
                      "value": "4429f7b432125357388b1d676c2d503b6d6fc78c414934bef9882e26",
                      "description": "(Required) Policy hash"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get tokens by policy (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/policies/:policyId/tokens?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "policies",
                    ":policyId",
                    "tokens"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    }
                  ],
                  "variable": [
                    {
                      "key": "policyId",
                      "value": "4429f7b432125357388b1d676c2d503b6d6fc78c414934bef9882e26",
                      "description": "(Required) Policy hash"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get tokens by policy (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/policies/:policyId/tokens?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "policies",
                    ":policyId",
                    "tokens"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    }
                  ],
                  "variable": [
                    {
                      "key": "policyId",
                      "value": "4429f7b432125357388b1d676c2d503b6d6fc78c414934bef9882e26",
                      "description": "(Required) Policy hash"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Get holders by policy",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "var current_page = 0\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Compare Currentpage\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(current_page);\r",
                      "});\r",
                      "\r",
                      "//Compare format dynamic data\r",
                      "pm.test(\"Check data type of address\", () => {\r",
                      "  pm.expect(jsonData.data[0].address).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of policy\", () => {\r",
                      "  pm.expect(jsonData.data[0].policy).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of name\", () => {\r",
                      "  pm.expect(jsonData.data[0].name).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of displayName\", () => {\r",
                      "  pm.expect(jsonData.data[0].displayName).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of fingerprint\", () => {\r",
                      "  pm.expect(jsonData.data[0].fingerprint).to.be.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check data type of quantity\", () => {\r",
                      "  pm.expect(jsonData.data[0].quantity).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/policies/:policyId/holders",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "policies",
                    ":policyId",
                    "holders"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "key": "policyId",
                      "value": "4429f7b432125357388b1d676c2d503b6d6fc78c414934bef9882e26",
                      "description": "(Required) Policy hash"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/policies/:policyId/holders?page=0&size=20&sort=ex&sort=nisi de",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "policies",
                        ":policyId",
                        "holders"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0"
                        },
                        {
                          "key": "size",
                          "value": "20"
                        },
                        {
                          "key": "sort",
                          "value": "ex"
                        },
                        {
                          "key": "sort",
                          "value": "nisi de"
                        }
                      ],
                      "variable": [
                        {
                          "key": "policyId",
                          "value": "enim voluptate Excepteur ullamco",
                          "description": "(Required) Policy hash"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"addressId\": -97014357,\n      \"address\": \"dolore non sint fugiat dolor\",\n      \"policy\": \"dolore occaecat ut\",\n      \"metadata\": {\n        \"url\": \"sed ea consectetur\",\n        \"ticker\": \"laboris Lorem esse nostrud\",\n        \"decimals\": -81176225,\n        \"logo\": \"esse minim cupidatat\",\n        \"description\": \"ipsum Excepteur ad mag\"\n      },\n      \"name\": \"dolor consectetur\",\n      \"displayName\": \"irure in\",\n      \"fingerprint\": \"sint cillum\",\n      \"quantity\": -65976550\n    },\n    {\n      \"addressId\": 57474225,\n      \"address\": \"non eu ut\",\n      \"policy\": \"sunt dolor\",\n      \"metadata\": {\n        \"url\": \"occaecat Excepteur\",\n        \"ticker\": \"in non nisi commodo\",\n        \"decimals\": -42639989,\n        \"logo\": \"eu est minim\",\n        \"description\": \"nulla commodo in minim\"\n      },\n      \"name\": \"adipisicing Ut\",\n      \"displayName\": \"adipisic\",\n      \"fingerprint\": \"in\",\n      \"quantity\": 52137399\n    }\n  ],\n  \"totalItems\": -17693588,\n  \"totalPages\": -40021544,\n  \"currentPage\": -88844091\n}"
                }
              ]
            },
            {
              "name": "Boundary - Get holders by policy (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/policies/:policyId/holders?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "policies",
                    ":policyId",
                    "holders"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    }
                  ],
                  "variable": [
                    {
                      "key": "policyId",
                      "value": "4429f7b432125357388b1d676c2d503b6d6fc78c414934bef9882e26",
                      "description": "(Required) Policy hash"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get holders by policy (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/policies/:policyId/holders?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "policies",
                    ":policyId",
                    "holders"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    }
                  ],
                  "variable": [
                    {
                      "key": "policyId",
                      "value": "4429f7b432125357388b1d676c2d503b6d6fc78c414934bef9882e26",
                      "description": "(Required) Policy hash"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get holders by policy (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/policies/:policyId/holders?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "policies",
                    ":policyId",
                    "holders"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    }
                  ],
                  "variable": [
                    {
                      "key": "policyId",
                      "value": "4429f7b432125357388b1d676c2d503b6d6fc78c414934bef9882e26",
                      "description": "(Required) Policy hash"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get holders by policy (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/policies/:policyId/holders?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "policies",
                    ":policyId",
                    "holders"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    }
                  ],
                  "variable": [
                    {
                      "key": "policyId",
                      "value": "4429f7b432125357388b1d676c2d503b6d6fc78c414934bef9882e26",
                      "description": "(Required) Policy hash"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "news",
          "item": [
            {
              "name": "Get news related to cardano",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData.total).to.be.an(\"number\");\r",
                      "    pm.expect(jsonData.offset).to.be.an(\"number\");\r",
                      "    pm.expect(jsonData.limit).to.be.an(\"number\");\r",
                      "    pm.expect(jsonData.articles).to.be.an(\"array\");\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/news?limit=20&offset=0",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "news"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "20",
                      "description": "(Required) "
                    },
                    {
                      "key": "offset",
                      "value": "0"
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/news?amount=<integer>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "news"
                      ],
                      "query": [
                        {
                          "key": "amount",
                          "value": "<integer>",
                          "description": "(Required) "
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{}"
                }
              ]
            }
          ]
        },
        {
          "name": "markets",
          "item": [
            {
              "name": "Get ada cardano price, market cap, volume, and market related data",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check id value\", function () {\r",
                      "    pm.expect(jsonData[0].id).to.include(\"cardano\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check symbol value\", function () {\r",
                      "    pm.expect(jsonData[0].symbol).to.include(\"ada\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check name value\", function () {\r",
                      "    pm.expect(jsonData[0].name).to.include( \"Cardano\");\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check image value\", function () {\r",
                      "    pm.expect(jsonData[0].image).to.include(\"https://assets.coingecko.com/coins/images/975/large/cardano.png?1696502090\");\r",
                      "});\r",
                      "\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData[0]).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData[0].id).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData[0].symbol).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData[0].name).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData[0].image).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData[0].current_price).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData[0].fully_diluted_valuation).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData[0].market_cap).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData[0].market_cap_rank).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData[0].total_volume).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData[0].high_24h).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData[0].low_24h).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData[0].price_change_24h).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData[0].price_change_percentage_24h).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData[0].market_cap_change_24h).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData[0].market_cap_change_percentage_24h).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData[0].circulating_supply).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData[0].total_supply).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData[0].max_supply).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData[0].ath).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData[0].ath_change_percentage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData[0].ath_date).to.include(moment(jsonData[0].ath_date).utcOffset(0).format('YYYY-MM-DDTHH:mm:ss.SSS[Z]'));\r",
                      "    pm.expect(jsonData[0].atl).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData[0].atl_change_percentage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData[0].atl_date).to.include(moment(jsonData[0].atl_date).utcOffset(0).format('YYYY-MM-DDTHH:mm:ss.SSS[Z]'));\r",
                      "    if(jsonData.roi){\r",
                      "        pm.expect(typeof jsonData[0].roi).to.be.oneOf(['object', 'number']);\r",
                      "    }\r",
                      "    pm.expect(jsonData[0].last_updated).to.include(moment(jsonData[0].last_updated).format('YYYY-MM-DDTHH:mm:ss'));\r",
                      "\r",
                      "});\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{Bearer Token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/markets?currency=USD",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "markets"
                  ],
                  "query": [
                    {
                      "key": "currency",
                      "value": "USD",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/markets?currency=<string>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "markets"
                      ],
                      "query": [
                        {
                          "key": "currency",
                          "value": "<string>",
                          "description": "(Required) "
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{}"
                }
              ]
            }
          ]
        },
        {
          "name": "instantaneous-rewards",
          "item": [
            {
              "name": "Get list of instantaneous rewards",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "const jsonData = pm.response.json();\r",
                      "\r",
                      "//Compare static value\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check currentPage value\", function () {\r",
                      "    pm.expect(jsonData.currentPage).to.eql(0);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of the response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    pm.expect(jsonData).to.be.an(\"object\");\r",
                      "    pm.expect(jsonData.totalItems).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.totalPages).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.currentPage).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "    pm.expect(jsonData.data[0].txHash).to.be.a(\"string\");\r",
                      "    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));\r",
                      "    pm.expect(jsonData.data[0].blockNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].epochNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].epochSlotNo).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].numberOfStakes).to.be.a(\"number\");\r",
                      "    pm.expect(jsonData.data[0].rewards).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "var txhash = pm.environment.get(\"stake_rewards_txhash\");\r",
                      "let result = jsonData.data.find(a => a.txHash === txhash);\r",
                      "if (result?.txHash === txhash){\r",
                      "    //Scenario Compare api: Get list of instantaneous rewardst with  api Get: Get reward transaction of stake key\r",
                      "    pm.test(\"Compare value between api: Get list of instantaneous rewardst and api Get: Get reward transaction of stake key\",function(){\r",
                      "        pm.expect(result.time).to.be.contain(pm.environment.get(\"stake_rewards_time\"));\r",
                      "        pm.expect(result.epochNo).to.be.eql(pm.environment.get(\"stake_rewards_epochNo\"));\r",
                      "        pm.expect(result.epochSlotNo).to.be.eql(pm.environment.get(\"stake_rewards_epochSlotNo\"));\r",
                      "        pm.expect(result.blockNo).to.be.eql(pm.environment.get(\"stake_rewards_blockNo\"));\r",
                      "        });\r",
                      "}\r",
                      "\r",
                      "// Check default size \r",
                      "if (jsonData.totalItems > 0){\r",
                      "    pm.test(\"Check Size default\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.be.within(1, 100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/instantaneous-rewards",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "instantaneous-rewards"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "20",
                      "description": "The size of the page to be returned",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "*/*"
                      },
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/instantaneous-rewards?page=0&size=20&sort=<string>",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "instantaneous-rewards"
                      ],
                      "query": [
                        {
                          "key": "page",
                          "value": "0",
                          "description": "Zero-based page index (0..N)"
                        },
                        {
                          "key": "size",
                          "value": "20",
                          "description": "The size of the page to be returned"
                        },
                        {
                          "key": "sort",
                          "value": "<string>",
                          "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported."
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"data\": [\n    {\n      \"txHash\": \"<string>\",\n      \"time\": \"<dateTime>\",\n      \"blockNo\": \"<long>\",\n      \"epochNo\": \"<integer>\",\n      \"epochSlotNo\": \"<integer>\",\n      \"numberOfStakes\": \"<long>\",\n      \"rewards\": \"<integer>\"\n    },\n    {\n      \"txHash\": \"<string>\",\n      \"time\": \"<dateTime>\",\n      \"blockNo\": \"<long>\",\n      \"epochNo\": \"<integer>\",\n      \"epochSlotNo\": \"<integer>\",\n      \"numberOfStakes\": \"<long>\",\n      \"rewards\": \"<integer>\"\n    }\n  ],\n  \"totalItems\": \"<long>\",\n  \"totalPages\": \"<integer>\",\n  \"currentPage\": \"<integer>\"\n}"
                }
              ]
            },
            {
              "name": "Boundary - Get list of instantaneous rewards (100)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=100){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with site max (100)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(100);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/instantaneous-rewards?size=100",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "instantaneous-rewards"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "100",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get list of instantaneous rewards (101)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400 );\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should not exceed 100\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should not exceed 100\" );\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/instantaneous-rewards?size=101",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "instantaneous-rewards"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "101",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get list of instantaneous rewards (1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "if (jsonData.totalItems>=1){\r",
                      "    pm.test(\"Status code is 200\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"Check the length of the array with  min + 1 (1)\", function(){\r",
                      "        pm.expect(jsonData.data.length).to.eql(1);\r",
                      "    });\r",
                      "};"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/instantaneous-rewards?size=1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "instantaneous-rewards"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Boundary - Get list of instantaneous rewards (-1)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Status code is 400\", function () {\r",
                      "    pm.response.to.have.status(400);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Check errorMessage is Page size should be a positive integer\", function () {\r",
                      "    pm.expect(jsonData.errorMessage).to.include(\"Page size should be a positive integer\" );\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/instantaneous-rewards?size=-1",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "instantaneous-rewards"
                  ],
                  "query": [
                    {
                      "key": "page",
                      "value": "0",
                      "description": "Zero-based page index (0..N)",
                      "disabled": true
                    },
                    {
                      "key": "size",
                      "value": "-1",
                      "description": "The size of the page to be returned"
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "<string>",
                      "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "actuator",
          "item": [
            {
              "name": "Actuator root web endpoint",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.spring-boot.actuator.v3+json"
                  }
                ],
                "url": "{{baseUrl}}/actuator"
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "application/vnd.spring-boot.actuator.v3+json"
                      }
                    ],
                    "url": "{{baseUrl}}/actuator"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/vnd.spring-boot.actuator.v3+json"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"qui__\": {\n    \"minim_7c\": {\n      \"href\": \"veniam labore reprehenderit in\",\n      \"templated\": true\n    }\n  },\n  \"sitde\": {\n    \"dolore_1a\": {\n      \"href\": \"mollit nulla of\",\n      \"templated\": false\n    },\n    \"Lorem__\": {\n      \"href\": \"consequat sint\",\n      \"templated\": false\n    }\n  },\n  \"laboris_5\": {\n    \"commodo9\": {\n      \"href\": \"minim tempor occaecat consequat\",\n      \"templated\": true\n    },\n    \"tempor_c\": {\n      \"href\": \"in in\",\n      \"templated\": true\n    }\n  }\n}"
                }
              ]
            },
            {
              "name": "Actuator web endpoint 'health'",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.spring-boot.actuator.v3+json"
                  }
                ],
                "url": "{{baseUrl}}/actuator/health"
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "application/vnd.spring-boot.actuator.v3+json"
                      }
                    ],
                    "url": "{{baseUrl}}/actuator/health"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/vnd.spring-boot.actuator.v3+json"
                    }
                  ],
                  "cookie": [],
                  "body": "{}"
                }
              ]
            },
            {
              "name": "Actuator web endpoint 'health-path'",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.spring-boot.actuator.v3+json"
                  }
                ],
                "url": "{{baseUrl}}/actuator/health/**"
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "application/vnd.spring-boot.actuator.v3+json"
                      }
                    ],
                    "url": "{{baseUrl}}/actuator/health/**"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/vnd.spring-boot.actuator.v3+json"
                    }
                  ],
                  "cookie": [],
                  "body": "{}"
                }
              ]
            },
            {
              "name": "Actuator web endpoint 'prometheus'",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "text/plain;version=0.0.4;charset=utf-8"
                  }
                ],
                "url": "{{baseUrl}}/actuator/prometheus"
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "text/plain;version=0.0.4;charset=utf-8"
                      }
                    ],
                    "url": "{{baseUrl}}/actuator/prometheus"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain;version=0.0.4;charset=utf-8"
                    }
                  ],
                  "cookie": [],
                  "body": ""
                }
              ]
            }
          ]
        },
        {
          "name": "search",
          "item": [
            {
              "name": "search",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "var jsonData = pm.response.json();\r",
                      "var stt = 200\r",
                      "var res_time = 5000\r",
                      "\r",
                      "//Compare static data\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(stt);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 5000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(res_time);\r",
                      "});\r",
                      "\r",
                      "//Compare data type\r",
                      "pm.test(\"Check data type of response\", () => {\r",
                      "    let moment = require ('moment');\r",
                      "    if(jsonData.epoch){\r",
                      "        pm.expect(typeof jsonData.epoch).to.be.oneOf([ 'object', 'number']);\r",
                      "    }\r",
                      "    if(jsonData.block){\r",
                      "        pm.expect(typeof jsonData.block).to.be.oneOf([ 'object', 'number']);\r",
                      "    }\r",
                      "    if(jsonData.tx){\r",
                      "        pm.expect(typeof jsonData.tx).to.be.oneOf([ 'object', 'string']);\r",
                      "    }\r",
                      "    if(jsonData.token){\r",
                      "        pm.expect(typeof jsonData.token).to.be.oneOf([ 'object', 'string']);\r",
                      "    }\r",
                      "    pm.expect(jsonData.validTokenName).to.be.a('boolean');\r",
                      "    if(jsonData.address){\r",
                      "        pm.expect(typeof jsonData.address).to.be.oneOf([ 'object', 'string']);\r",
                      "    }\r",
                      "    if(jsonData.pool){\r",
                      "        pm.expect(typeof jsonData.pool).to.be.oneOf([ 'object', 'string']);\r",
                      "    }\r",
                      "    pm.expect(jsonData.validPoolName).to.be.a('boolean');\r",
                      "    if(jsonData.script){\r",
                      "        pm.expect(typeof jsonData.script).to.be.oneOf([ 'object', 'string']);\r",
                      "    }\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "*/*"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/api/v1/search?query=voluptate consequat ad laborum est",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "api",
                    "v1",
                    "search"
                  ],
                  "query": [
                    {
                      "key": "query",
                      "value": "voluptate consequat ad laborum est",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "response": [
                {
                  "name": "OK",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Authorization",
                        "value": "Bearer <token>",
                        "description": "Added as a part of security scheme: bearer"
                      },
                      {
                        "key": "Accept",
                        "value": "*/*"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/api/v1/search?query=voluptate consequat ad laborum est",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "api",
                        "v1",
                        "search"
                      ],
                      "query": [
                        {
                          "key": "query",
                          "value": "voluptate consequat ad laborum est"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "*/*"
                    }
                  ],
                  "cookie": [],
                  "body": "{\n  \"epoch\": 46119342,\n  \"block\": \"c\",\n  \"tx\": \"Duis\",\n  \"token\": {\n    \"name\": \"nisi sint vo\",\n    \"fingerprint\": \"ut consequat minim\"\n  },\n  \"validTokenName\": false,\n  \"address\": {\n    \"address\": \"qui in laboris\",\n    \"paymentAddress\": true,\n    \"stakeAddress\": false\n  },\n  \"pool\": {\n    \"name\": \"occaecat in\",\n    \"poolId\": \"reprehenderit Excepte\",\n    \"icon\": \"do\"\n  },\n  \"validPoolName\": true,\n  \"policy\": \"nostrud aliqua Ut consectetur non\"\n}"
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "contracts_address",
      "value": ""
    },
    {
      "key": "contracts_script",
      "value": ""
    },
    {
      "key": "scriptHash",
      "value": "3a9241cd79895e3a8d65261b40077d4437ce71e9d7c8c6c00e3f658e"
    }
  ]
}