# Infrastructure domain
multi-datasource: #specified for HikariDataSource
  datasourceLedgerSync:
    hikariConfig:
      jdbcUrl: jdbc:postgresql://${LEDGER_SYNC_HOST:10.4.10.75}:${LEDGER_SYNC_PORT:54322}/${LEDGER_SYNC_DB:explorer}?currentSchema=${DB_SCHEMA}
      username: ${LEDGER_SYNC_USER:cardano-master}
      password: ${LEDGER_SYNC_PASSWORD:postgres_master_pw}
      driverClassName: org.postgresql.Driver
      poolName: explorer-api-ledgersync-pool
      minimumIdle: 1 #minimum number of idle connections maintained by HikariCP in a connection pool
      maximumPoolSize: ${DB_MAXIMUM_POOL_SIZE:48} #maximum pool size
      idleTimeout: 300000 #maximum idle time for connection
      maxLifetime: 900000 #maximum lifetime in milliseconds of a connection in the pool after it is closed.
      connectionTimeout: 50000 #maximum number of milliseconds that a client will wait for a connection
      autoCommit: false #default auto-commit behavior.
      connectionInitSql: SELECT 1
      dataSourceProperties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
        useLocalSessionState: true
        rewriteBatchedStatements: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false
    flyway:
      enabled: ${FLYWAY_ENABLE:false}

  datasourceAnalytics:
    hikariConfig:
      jdbcUrl: jdbc:postgresql://${ANALYTICS_HOST:localhost}:${ANALYTICS_PORT:54321}/${ANALYTICS_DB:explorer}?currentSchema=${DB_SCHEMA}
      username: ${ANALYTICS_USER:cardano-master}
      password: ${ANALYTICS_PASSWORD:Y2FyZGFuby1kYXRhYmFzZS1tYXN0ZXI=}
      driverClassName: org.postgresql.Driver
      poolName: explorer-api-analytics-pool
      minimumIdle: 1 #minimum number of idle connections maintained by HikariCP in a connection pool
      maximumPoolSize: ${DB_MAXIMUM_POOL_SIZE:48} #maximum pool size
      idleTimeout: 300000 #maximum idle time for connection
      maxLifetime: 900000 #maximum lifetime in milliseconds of a connection in the pool after it is closed.
      connectionTimeout: 50000 #maximum number of milliseconds that a client will wait for a connection
      autoCommit: false #default auto-commit behavior.
      connectionInitSql: SELECT 1
      dataSourceProperties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
        useLocalSessionState: true
        rewriteBatchedStatements: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false
    flyway:
      enabled: ${FLYWAY_ENABLE:false}

spring:
  # JPA specific configs
  jpa:
    open-in-view: false
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        default_schema: ${DB_SCHEMA:mainnet}
        show_sql: true
        format_sql: true
  flyway:
    enabled: false # disable auto FlywayAutoConfiguration
  data:
    web:
      pageable:
        default-page-size: 20
        max-page-size: 100
  jackson:
    default-property-inclusion: NON_NULL

  kafka:
    bootstrap-servers: ${BOOTSTRAP_SERVER:127.0.0.1:29092}
    #client-id:  crawler
    producer:
      acks: all
      retries: 3
      retryBackoff: 1000
      properties:
        enable:
          idempotence: true
        max:
          pool:
            interval: 60000
          in:
            flight:
              requests:
                per:
                  connection: 1
    topics:
      reports: ${REPORTS_TOPIC:dev.explorer.api.mainnet.reports}

redis:
  databaseIndex: 0
  master: ${REDIS_MASTER_NAME:mymaster}
  password: ${REDIS_SENTINEL_PASS:redis_sentinel_pass}
  testOnBorrow: false
  maxTotal: 10
  maxIdle: 5
  minIdle: 3
  testOnReturn: false
  testWhileIdle: false
  sentinels:
    - host: ${REDIS_SENTINEL_HOST:127.0.0.1}
      port: 26379


application:
  network: ${SCHEMA:mainnet}
  epoch:
    days: ${EPOCH_DAYS:5}
  api.coin.gecko.market:
    interval-time: ${API_MARKET_CACHE_TIME:15}
    base-url: ${API_MARKET_URL:https://api.coingecko.com/api/v3/coins/markets?ids=cardano&vs_currency=%s}
  api.news:
    interval-time: ${API_NEWS_CACHE_TIME:120}
    base-url: ${API_NEWS_URL:https://min-api.cryptocompare.com/data/v2/news/?lang=EN}
  api:
    check-reward:
      base-url: ${API_CHECK_REWARD_URL:http://10.4.10.231:8888/api/v1/rewards/fetch}
    check-pool-history:
      base-url: ${API_CHECK_POOL_HISTORY_URL:http://10.4.10.231:8888/api/v1/pool-history/fetch}
    check-pool-info:
      base-url: ${API_CHECK_POOL_INFO_URL:http://10.4.10.231:8888/api/v1/pool-info/fetch}
    check-epoch-stake:
      base-url: ${API_CHECK_EPOCH_STAKE_URL:http://10.4.10.231:8888/api/v1/epoch-stake/fetch}
    check-ada-pots:
      base-url: ${API_CHECK_ADA_POTS_URL:http://10.4.10.231:8888/api/v1/ada-pots/fetch}
    check-epoch:
      base-url: ${API_CHECK_EPOCH_URL:http://localhost:8888/api/v1/epochs/fetch}
  report:
    limit-per-24hours: ${REPORT_LIMIT_PER_24HOURS:2}

springdoc:
  api-docs.path: /apidocs
  show-actuator: true

server:
  compression:
    enabled: true
    mime-types: text/html,text/plain,text/css,application/javascript,application/json
    min-response-size: 1024

management:
  endpoints:
    enabled-by-default: false
    web:
      exposure:
        include: "health,prometheus"
  endpoint:
    health:
      enabled: true
    prometheus:
      enabled: true

rsa:
  key:
    path: /key/public_key

cloud:
  aws:
    credentials:
      access-key: ${S3_ACCESS_KEY:minio}
      secret-key: ${S3_SECRET_KEY:minio123}
    region:
      static: ${S3_REGION:null}
    s3:
      bucket:
        name: ${S3_BUCKET_NAME:cardano-explorer-api-storage-mainnet}
      path-style:
        enabled: true
      endpoint: ${STORAGE_ENDPOINT:http://10.4.10.231:9000}

logging:
  level:
    com:
      amazonaws:
        internal:
          InstanceMetadataServiceResourceFetcher: error
        util:
          EC2MetadataUtils: error