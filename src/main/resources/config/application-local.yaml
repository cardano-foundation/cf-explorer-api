# Infrastructure domain
multi-datasource: #specified for HikariDataSource
  datasourceLedgerSync:
    hikariConfig:
      jdbcUrl: jdbc:postgresql://${LEDGER_SYNC_HOST:10.4.10.112}:${LEDGER_SYNC_PORT:54323}/${LEDGER_SYNC_DB:explorer_api}?currentSchema=${spring.jpa.properties.hibernate.default_schema}
      username: ${LEDGER_SYNC_USER:ducphung}
      password: ${LEDGER_SYNC_PASSWORD:ducphung@pw}
      driverClassName: org.postgresql.Driver
      poolName: explorer-api-ledgersync-pool
      minimumIdle: 1 #minimum number of idle connections maintained by HikariCP in a connection pool
      maximumPoolSize: ${MAXIMUM_POOL_SIZE:48} #maximum pool size
      idleTimeout: 300000 #maximum idle time for connection
      maxLifetime: 900000 #maximum lifetime in milliseconds of a connection in the pool after it is closed.
      connectionTimeout: 50000 #maximum number of milliseconds that a client will wait for a connection
      autoCommit: false #default auto-commit behavior.
      connectionInitSql: SELECT 1
      dataSourceProperties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
        useLocalSessionState: true
        rewriteBatchedStatements: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false

  datasourceExplorer:
    hikariConfig:
      jdbcUrl: jdbc:postgresql://${EXPLORER_HOST:10.4.10.112}:${EXPLORER_PORT:54323}/${EXPLORER_DB:explorer_api}?currentSchema=${spring.jpa.properties.hibernate.default_schema}
      username: ${EXPLORER_USER:cardano-master}
      password: ${EXPLORER_PASSWORD:Y2FyZGFuby1kYXRhYmFzZS1tYXN0ZXI=}
      driverClassName: org.postgresql.Driver
      poolName: explorer-api-explorer-pool
      minimumIdle: 1 #minimum number of idle connections maintained by HikariCP in a connection pool
      maximumPoolSize: ${MAXIMUM_POOL_SIZE:48} #maximum pool size
      idleTimeout: 300000 #maximum idle time for connection
      maxLifetime: 900000 #maximum lifetime in milliseconds of a connection in the pool after it is closed.
      connectionTimeout: 50000 #maximum number of milliseconds that a client will wait for a connection
      autoCommit: false #default auto-commit behavior.
      connectionInitSql: SELECT 1
      dataSourceProperties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
        useLocalSessionState: true
        rewriteBatchedStatements: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false

spring:
  # JPA specific configs
  jpa:
    open-in-view: false
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        default_schema: mainnet
        show_sql: true
        format_sql: true
  flyway:
    enabled: false
  data:
    web:
      pageable:
        default-page-size: 20
        max-page-size: 100
  jackson:
    default-property-inclusion: ALWAYS

  kafka:
    bootstrap-servers: ${BOOTSTRAP_SERVER:127.0.0.1:29092}
    useSsl: ${KAFKA_USE_SSL:false}
    #client-id:  crawler
    producer:
      acks: all
      retries: 3
      retryBackoff: 1000
      properties:
        enable:
          idempotence: true
        max:
          pool:
            interval: 60000
          block:
            ms: 3000
          in:
            flight:
              requests:
                per:
                  connection: 1
    topics:
      reports: ${REPORTS_TOPIC:dev.explorer.api.mainnet.reports}

redis:
  databaseIndex: 0
  master: ${REDIS_MASTER_NAME:mymaster}
  password: ${REDIS_SENTINEL_PASS:redis_sentinel_pass}
  testOnBorrow: false
  maxTotal: 10
  maxIdle: 5
  minIdle: 3
  testOnReturn: false
  testWhileIdle: false
  sentinels:
    - host: ${REDIS_SENTINEL_HOST:127.0.0.1}
      port: 26379

# Redis pubsub topic
application:
  network: ${SCHEMA:mainnet}
  epoch:
    days: ${EPOCH_DAYS:5}
  api.coin.gecko.market:
    interval-time: ${API_MARKET_CACHE_TIME:15}
    delay-time: ${WEB_SOCKET_MARKET_PUBLISH_DELAY_TIME:20000}
    base-url: ${API_MARKET_URL:https://api.coingecko.com/api/v3/coins/markets?ids=cardano&vs_currency=%s}
  api.news:
    interval-time: ${API_NEWS_CACHE_TIME:120}
    base-url: ${API_NEWS_URL:https://n...content-available-to-author-only...i.org/v2/everything?q=cardano&sortBy=publishedAt&pageSize=100&apiKey=%s}
  api:
    check-reward:
      base-url: ${API_CHECK_REWARD_URL:http://10.4.10.231:8888/api/v1/rewards/fetch}
    check-pool-history:
      base-url: ${API_CHECK_POOL_HISTORY_URL:http://10.4.10.231:8888/api/v1/pool-history/fetch}
    check-pool-info:
      base-url: ${API_CHECK_POOL_INFO_URL:http://10.4.10.231:8888/api/v1/pool-info/fetch}
    check-epoch-stake:
      base-url: ${API_CHECK_EPOCH_STAKE_URL:http://10.4.10.231:8888/api/v1/epoch-stake/fetch}
    check-ada-pots:
      base-url: ${API_CHECK_ADA_POTS_URL:http://10.4.10.231:8888/api/v1/ada-pots/fetch}
    check-epoch:
      base-url: ${API_CHECK_EPOCH_URL:http://localhost:8888/api/v1/epochs/fetch}
  report:
    limit-per-24hours: ${REPORT_LIMIT_PER_24HOURS:200}
  token-logo-endpoint: ${TOKEN_LOGO_ENDPOINT:http://localhost:9001}
  healthcheck:
    block-time-threshold: ${BLOCK_TIME_THRESHOLD_IN_SECOND:240}
    inserted-time-threshold: ${INSERTED_TIME_THRESHOLD_IN_SECOND:2400}
  api.bolnisi:
    off-chain: ${API_BOLNISI_OFFCHAIN_URL:https://offchain.pro.cf-bolnisi-mainnet.eu-west-1.bnwa.metadata.dev.cf-deployments.org/api/v1/storage/objectUrl/georgian-wine/{cid}}
    public-key: ${API_BOLNISI_PUBLIC_KEY_URL:https://api.pro.cf-bolnisi-mainnet.eu-west-1.bnwa.metadata.dev.cf-deployments.org/api/v1/pubkeys/{wineryId}/v/0}

springdoc:
  api-docs.path: /apidocs
  show-actuator: true

server:
  compression:
    enabled: true
    mime-types: text/html,text/plain,text/css,application/javascript,application/json
    min-response-size: 1024

management:
  endpoints:
    enabled-by-default: false
    web:
      exposure:
        include: "health,prometheus,info,sync-status"
  endpoint:
    health:
      enabled: true
    prometheus:
      enabled: true
    sync-status:
      enabled: true

rsa:
  key:
    public-key-str: ${RSA_PUBLIC_KEY_AUTH:MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAthC/F58t/zLXPvh0cy91cyIHPRxZIEvRncffj/LJVH4nuDG3SgrlpW0NnuuSP23TiSYJIHOv0zsuNtGztU7/INdG29lgpHtG7RnqZwpwP6GG/U9F1N+Dt1CDT/3DcA9JXd9skoxpKQtyLxqLP799cBxtt7LlcRG4LV4tS5L+qrTR50jLR2JWXEphOPyc5zElgbMPjHkcZyoGd4t5DnTBdLXffS2hJzFr8X1GtE91dkApC099CMjM5ifoIDQibiPJElnB3j60Zuto6Mc9+eRONuCQcGPT49zHZgmqNiwkHL1fhJnCSujVLM/y3ZzzG9/IspbRlEcCCk9W7p4IJEPmewIDAQAB}

keycloak:
  role:
    path: classpath:permission/policy.json

cloud:
  aws:
    credentials:
      access-key: ${S3_ACCESS_KEY:minio_access_key}
      secret-key: ${S3_SECRET_KEY:minio_secret_key}
    region:
      static: ${S3_REGION:null}
    s3:
      bucket:
        name: ${S3_BUCKET_NAME:cardano-explorer-api-storage-report}
      path-style:
        enabled: true
      endpoint: ${STORAGE_ENDPOINT:http://localhost:9099}

logging:
  level:
    com:
      amazonaws:
        internal:
          InstanceMetadataServiceResourceFetcher: error
        util:
          EC2MetadataUtils: error

---
# Redis pubsub topic
spring:
  redis:
    pubsub:
      topic: ${REDIS_PUBSUB_TOPIC:block.mainnet}

genesis:
  shelley: ${SHELLEY_GENESIS_FILE:src/main/resources/networks/${SCHEMA:mainnet}/shelley-genesis.json}
  byron: ${BYRON_GENESIS_FILE:src/main/resources/networks/${SCHEMA:mainnet}/byron-genesis.json}