# Infrastructure domain
spring:
  # Datasource specific configs
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}?currentSchema=${DB_SCHEMA}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
    # Hikari specific configs
    hikari:
      pool-name: explorer-api-pool
      minimum-idle: 10 #minimum number of idle connections maintained by HikariCP in a connection pool
      maximum-pool-size: ${DB_MAXIUM_POOL_SIZE:10} #maximum pool size
      idle-timeout: 300000 #maximum idle time for connection
      max-lifetime: 900000 #maximum lifetime in milliseconds of a connection in the pool after it is closed.
      connection-timeout: 50000 #maximum number of milliseconds that a client will wait for a connection
      auto-commit: false #default auto-commit behavior.
      connection-init-sql: SELECT 1
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
        useLocalSessionState: true
        rewriteBatchedStatements: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false
  # JPA specific configs
  jpa:
    open-in-view: false
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: false
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        default_schema: ${DB_SCHEMA:dev}
        show_sql: false
        format_sql: true
  flyway:
    enabled: false
  data:
    web:
      pageable:
        default-page-size: 20
        max-page-size: 100

redis:
  databaseIndex: 0
  master: ${REDIS_SENTINEL_MASTER_NAME:mymaster}
  password: ${REDIS_SENTINEL_PASSWORD:redis_sentinel_pass}
  testOnBorrow: false
  maxTotal: 10
  maxIdle: 5
  minIdle: 3
  testOnReturn: false
  testWhileIdle: false
  sentinels:
    - host: ${REDIS_SENTINEL_HOST:127.0.0.1}
      port: ${REDIS_SENTINEL_PORT:26379}

application:
  network: ${DB_SCHEMA:mainnet}
  api.coin.gecko.market:
    interval-time: 60
    base-url: https://api.coingecko.com/api/v3/coins/markets?ids=cardano&vs_currency=%s

cloud:
  aws:
    credentials:
      access-key: ${S3_ACCESS_KEY:miniominio}
      secret-key: ${S3_SECRET_KEY:sekritsekrit}
    region:
      static: ${S3_REGION:null}
    s3:
      bucket:
        name: ${S3_BUCKET_NAME:cardano-explorer-api-storage}
      path-style:
        enabled: true
      endpoint: ${STORAGE_ENDPOINT:http://172.16.1.230:9000}

logging:
  level:
    com:
      amazonaws:
        internal:
          InstanceMetadataServiceResourceFetcher: error
        util:
          EC2MetadataUtils: error

rsa:
  key:
    path: /key/public_key

management:
  prometheus:
    metrics:
      export:
        enabled: true
  endpoints:
    web:
      exposure:
        include: prometheus