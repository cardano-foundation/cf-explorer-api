# Infrastructure domain
spring:
  # Datasource specific configs
  datasource:
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}?currentSchema=${DB_SCHEMA}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
    # Hikari specific configs
    hikari:
      pool-name: explorer-api-pool
      minimum-idle: 10 #minimum number of idle connections maintained by HikariCP in a connection pool
      maximum-pool-size: ${DB_MAXIUM_POOL_SIZE:10} #maximum pool size
      idle-timeout: 300000 #maximum idle time for connection
      max-lifetime: 900000 #maximum lifetime in milliseconds of a connection in the pool after it is closed.
      connection-timeout: 50000 #maximum number of milliseconds that a client will wait for a connection
      auto-commit: false #default auto-commit behavior.
      connection-init-sql: SELECT 1
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
        useLocalSessionState: true
        rewriteBatchedStatements: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false
  # JPA specific configs
  jpa:
    open-in-view: false
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: false
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        default_schema: ${DB_SCHEMA:dev}
        show_sql: false
        format_sql: true
  flyway:
    enabled: false
  data:
    web:
      pageable:
        default-page-size: 20
        max-page-size: 100
  jackson:
    default-property-inclusion: ${JACKSON_INCLUSION:NON_NULL}
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVER:127.0.0.1:29092}
    useSsl: ${KAFKA_USE_SSL:false}
    #client-id:  crawler
    producer:
      acks: all
      retries: 3
      retryBackoff: 1000
      properties:
        enable:
          idempotence: true
        max:
          pool:
            interval: 60000
          block:
            ms: 3000
          in:
            flight:
              requests:
                per:
                  connection: 1
    topics:
      reports: ${KAFKA_REPORTS_TOPIC:dev.explorer.api.mainnet.reports}

redis:
  databaseIndex: 0
  master: ${REDIS_SENTINEL_MASTER_NAME:mymaster}
  password: ${REDIS_SENTINEL_PASSWORD:redis_sentinel_pass}
  testOnBorrow: false
  maxTotal: 10
  maxIdle: 5
  minIdle: 3
  testOnReturn: false
  testWhileIdle: false
  sentinels:
    - host: ${REDIS_SENTINEL_HOST:127.0.0.1}
      port: ${REDIS_SENTINEL_PORT:26379}

application:
  network: ${DB_SCHEMA:mainnet}
  epoch:
    days: ${EPOCH_DAYS:5}
  api.coin.gecko.market:
    interval-time: ${API_MARKET_CACHE_TIME:120}
    delay-time: ${WEB_SOCKET_MARKET_PUBLISH_DELAY_TIME:20000}
    base-url: ${API_MARKET_URL:https://api.coingecko.com/api/v3/coins/markets?ids=cardano&vs_currency=%s}
  api.news:
    interval-time: ${API_NEWS_CACHE_TIME:120}
    base-url: ${API_NEWS_URL}
  api:
    check-reward:
      base-url: ${API_CHECK_REWARD_URL:http://localhost:8888/api/v1/rewards/fetch}
    check-pool-history:
      base-url: ${API_CHECK_POOL_HISTORY_URL:http://localhost:8888/api/v1/pool-history/fetch}
    check-pool-info:
      base-url: ${API_CHECK_POOL_INFO_URL:http://localhost:8888/api/v1/pool-info/fetch}
    check-epoch-stake:
      base-url: ${API_CHECK_EPOCH_STAKE_URL:http://localhost:8888/api/v1/epoch-stake/fetch}
    check-ada-pots:
      base-url: ${API_CHECK_ADA_POTS_URL:http://localhost:8888/api/v1/ada-pots/fetch}
    check-epoch:
      base-url: ${API_CHECK_EPOCH_URL:http://localhost:8888/api/v1/epochs/fetch}
  report:
    limit-per-24hours: ${REPORT_LIMIT_PER_24HOURS:2}
  token-logo-endpoint: ${TOKEN_LOGO_ENDPOINT:http://localhost:9001}

springdoc:
  api-docs.path: /apidocs
  show-actuator: true

server:
  compression:
    enabled: true
    mime-types: text/html,text/plain,text/css,application/javascript,application/json
    min-response-size: 1024

management:
  endpoints:
    enabled-by-default: false
    web:
      exposure:
        include: "health,prometheus"
  endpoint:
    health:
      enabled: true
    prometheus:
      enabled: true

  metrics:
    distribution:
      percentiles:
        http.server.requests: 0.5, 0.9, 0.95, 0.99, 0.999
      percentiles-histogram:
        http.server.requests: true

rsa:
  key:
    path: /key/public_key

keycloak:
  role:
    path: ${AUTH_FILE_PATH:/permission/policy-enforcer.json}

cloud:
  aws:
    credentials:
      access-key: ${S3_ACCESS_KEY:miniominio}
      secret-key: ${S3_SECRET_KEY:sekritsekrit}
    region:
      static: ${S3_REGION:null}
    s3:
      bucket:
        name: ${S3_BUCKET_NAME:cardano-explorer-api-storage}
      path-style:
        enabled: ${S3_PATH_STYLE_ENABLED:true}
      endpoint: ${S3_STORAGE_ENDPOINT}

logging:
  level:
    com:
      amazonaws:
        internal:
          InstanceMetadataServiceResourceFetcher: error
        util:
          EC2MetadataUtils: error

---
# Redis pubsub topic
spring:
  redis:
    pubsub:
      topic: ${REDIS_PUBSUB_TOPIC:block-sync-topic}

genesis:
  shelley: ${SHELLEY_GENESIS_FILE:src/main/resources/networks/${SCHEMA:mainnet}/shelley-genesis.json}
  byron: ${BYRON_GENESIS_FILE:src/main/resources/networks/${SCHEMA:mainnet}/byron-genesis.json}