const jsonData = pm.response.json();
var stt = 200
var res_time = 5000

//Compare static data
pm.test("Status code is 200", function () {
    pm.response.to.have.status(stt);
});

pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(res_time);
});


pm.test("Compare currentPage", function () {
    pm.expect(jsonData.currentPage).to.eql(pm.environment.get("page"));
});

// //Set Next value for size
// const sizes = pm.collectionVariables.get("sizes");
// if (sizes && sizes.length > 0){
//     postman.setNextRequest("Loop Query Parameter");
// } else {
//     postman.setNextRequest(null);
// }

//Compare data type
pm.test("Check data type", () => {
    if(jsonData.data.length > 0){
        pm.expect(jsonData.data[0].epoch).to.be.a("number");
        pm.expect(typeof jsonData.data[0].block).to.be.oneOf([ 'object', 'number']);
        pm.expect(jsonData.data[0].stakeAmount).to.be.a("number");
        if(jsonData.data.delegators){
            pm.expect(typeof jsonData.data[0].delegators).to.be.oneOf([ 'object', 'number']);
        }
        if(jsonData.data.fee){
            pm.expect(typeof jsonData.data[0].fee).to.be.oneOf([ 'object', 'number']);
        }
        pm.expect(jsonData.data[0].ros).to.be.a("number");
        pm.expect(jsonData.totalItems).to.be.a("number");
        pm.expect(jsonData.totalPages).to.be.a("number");
    }
});

// Check default size 
if (jsonData.totalItems > 0 && jsonData.data.length > 0){
    pm.test("Check Size default", function(){
        pm.expect(jsonData.data.length).to.be.within(1, 100);
    });
};