var jsonData = pm.response.json();
var stt = 200
var res_time = 5000
var current_page = 0

//Compare static data
pm.test("Status code is 200", function () {
    pm.response.to.have.status(stt);
});

pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(res_time);
});

pm.test("Compare Currentpage", function () {
    pm.expect(jsonData.currentPage).to.eql(current_page);
});

//Compare data type
pm.test("Check data type of id", () => {
  pm.expect(jsonData.data[0].id).to.be.a("number");
});

pm.test("Check data type of poolId", () => {
  pm.expect(jsonData.data[0].poolId).to.be.a("string");
});

pm.test("Check data type of poolName", () => {
  pm.expect(typeof jsonData.data[0].poolName).to.be.oneOf([ 'object', 'string']);
});

pm.test("Check data type of poolSize", () => {
  pm.expect(jsonData.data[0].poolSize).to.be.a("number");
});

pm.test("Check data type of reward", () => {
  pm.expect(jsonData.data[0].reward).to.be.a("number");
});

pm.test("Check data type of feePercent", () => {
  pm.expect(jsonData.data[0].feePercent).to.be.a("number");
});

pm.test("Check data type of feeAmount", () => {
  pm.expect(jsonData.data[0].feeAmount).to.be.a("number");
});

pm.test("Check data type of pledge", () => {
  pm.expect(jsonData.data[0].pledge).to.be.a("number");
});

pm.test("Check data type of saturation", () => {
  pm.expect(jsonData.data[0].saturation).to.be.a("number");
});

pm.test("Check data type of stakeLimit", () => {
  //pm.expect(typeof jsonData.data[0].stakeLimit).to.be.oneOf([ 'object', 'number']);
});

pm.test("Check data type of reserves", () => {
  //pm.expect(typeof jsonData.data[0].reserves).to.be.oneOf([ 'object', 'number']);
});

pm.test("Check data type of kparam", () => {
  //pm.expect(typeof jsonData.data[0].kparam).to.be.oneOf([ 'object', 'number']);
});

pm.test("Check data type of totalItems", () => {
  pm.expect(jsonData.totalItems).to.be.a("number");
});

pm.test("Check data type of totalPages", () => {
  pm.expect(jsonData.totalPages).to.be.a("number");
});

//Scenario Compare api get Data For Pool Table with api Get: Find Top(default is 3) Delegation Pool order by pool size
pm.test("Compare value between api get Data For Pool Table and api Get: Find Top(default is 3) Delegation Pool order by pool size ",function (){    
    var pool_id = pm.environment.get("delegation_poolId");
    let result = jsonData.data.find(a => a.poolId === pool_id);

    pm.expect(result.id).to.be.eql(pm.environment.get("delegation_id"));
    pm.expect(result.poolName).to.be.eql(pm.environment.get("delegation_poolName"));
    pm.expect(result.poolSize).to.be.eql(pm.environment.get("delegation_poolSize"));
    pm.expect(result.reward).to.be.eql(pm.environment.get("delegation_reward"));
    pm.expect(result.feePercent).to.be.eql(pm.environment.get("delegation_feePercent"));
    pm.expect(result.feeAmount).to.be.eql(pm.environment.get("delegation_feeAmount"));
    pm.expect(result.pledge).to.be.eql(pm.environment.get("delegation_pledge"));
    pm.expect(result.saturation).to.be.eql(pm.environment.get("delegation_saturation"));
    //pm.expect(result.stakeLimit).to.be.eql(pm.environment.get("delegation_stakeLimit"));
    //pm.expect(result.reserves).to.be.eql(pm.environment.get("delegation_reserves"));
    //pm.expect(result.epochBlock).to.be.eql(pm.environment.get("delegation_epochBlock"));
    //pm.expect(result.lifetimeBlock).to.be.eql(pm.environment.get("delegation_lifetimeBlock"));
    //pm.expect(result.lifetimeRos).to.be.eql(pm.environment.get("delegation_lifetimeRos"));
    //pm.expect(result.kparam).to.be.eql(pm.environment.get("delegation_kparam"));
});