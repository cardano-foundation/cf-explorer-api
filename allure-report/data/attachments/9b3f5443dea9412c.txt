const jsonData = pm.response.json();

//Compare static value
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(5000);
});

pm.test("Check currentPage value", function () {
    pm.expect(jsonData.currentPage).to.eql(0);
});

//Compare data type
pm.test("Check data type of the response", () => {
    let moment = require ('moment');
    pm.expect(jsonData).to.be.an("object");
    pm.expect(jsonData.totalItems).to.be.a("number");
    pm.expect(jsonData.totalPages).to.be.a("number");
    pm.expect(jsonData.currentPage).to.be.a("number");
    pm.expect(jsonData.data).to.be.an("array");
    pm.expect(jsonData.data[0].txHash).to.be.a("string");
    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));
    pm.expect(jsonData.data[0].blockNo).to.be.a("number");
    pm.expect(jsonData.data[0].epochNo).to.be.a("number");
    pm.expect(jsonData.data[0].epochSlotNo).to.be.a("number");
    pm.expect(jsonData.data[0].numberOfStakes).to.be.a("number");
    pm.expect(jsonData.data[0].rewards).to.be.a("number");
});

var txhash = pm.environment.get("stake_rewards_txhash");
let result = jsonData.data.find(a => a.txHash === txhash);
if (result?.txHash === txhash){
    //Scenario Compare api: Get list of instantaneous rewardst with  api Get: Get reward transaction of stake key
    pm.test("Compare value between api: Get list of instantaneous rewardst and api Get: Get reward transaction of stake key",function(){
        pm.expect(result.time).to.be.contain(pm.environment.get("stake_rewards_time"));
        pm.expect(result.epochNo).to.be.eql(pm.environment.get("stake_rewards_epochNo"));
        pm.expect(result.epochSlotNo).to.be.eql(pm.environment.get("stake_rewards_epochSlotNo"));
        pm.expect(result.blockNo).to.be.eql(pm.environment.get("stake_rewards_blockNo"));
        });
}

// Check default size 
if (jsonData.totalItems > 0){
    pm.test("Check Size default", function(){
        pm.expect(jsonData.data.length).to.be.within(1, 100);
    });
};