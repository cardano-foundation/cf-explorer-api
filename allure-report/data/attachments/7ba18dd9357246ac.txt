const jsonData = pm.response.json();

//Compare static value
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(5000);
});

//Compare data type
pm.test("Check data type of the response", () => {
    let moment = require ('moment');

    pm.expect(jsonData.poolId).to.be.a("string");
    if(jsonData.poolName){
        pm.expect(typeof jsonData.poolName).to.be.oneOf([ 'object', 'string']);
    }
    pm.expect(jsonData.poolView).to.be.a("string");
    pm.expect(jsonData.txHash).to.be.a("string");
    pm.expect(jsonData.totalFee).to.be.a("number");
    pm.expect(jsonData.time).to.include(moment(jsonData.time).format('YYYY/MM/DD HH:mm:ss'));
    pm.expect(jsonData.fee).to.be.a("number");
    pm.expect(jsonData.rewardAccount).to.be.an("string");
    pm.expect(jsonData.stakeKeys).to.be.an("array");
    pm.expect(jsonData.vrfKey).to.be.a("string");
    pm.expect(jsonData.pledge).to.be.a("number");
    pm.expect(jsonData.margin).to.be.a("number");
    pm.expect(jsonData.cost).to.be.a("number");
    pm.expect(jsonData.deposit).to.be.a("number");
});

//scenario compare value off registration Detail api and registration List
pm.test("Others value exist",function (){
    //All value: API registration List (v1/pool-lifecycle/registration-list?poolView={{pool-report_poolView}})
    pm.expect(jsonData.txHash).to.include(pm.environment.get("pool_lifecycle_data_txHash"));
    pm.expect(jsonData.time).to.contain(pm.environment.get("pool_lifecycle_data_time"));
    pm.expect(jsonData.stakeKeys).to.eql(pm.environment.get("pool_lifecycle_data_stakeKeys"));
    pm.expect(jsonData.deposit).to.eql(pm.environment.get("pool_lifecycle_data_deposit"));
});