var jsonData = pm.response.json();

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(5000);
});

pm.test("Check currentPage value", function () {
    pm.expect(jsonData.currentPage).to.eql(0);
});

//Compare data type
pm.test("Check data type of address", () => {
  pm.expect(jsonData.data[0].address).to.be.a("string");
});

pm.test("Check data type of txCount", () => {
  pm.expect(jsonData.data[0].txCount).to.be.a("number");
});

pm.test("Check data type of balance", () => {
  pm.expect(jsonData.data[0].balance).to.be.a("number");
});

pm.test("Check data type of balance", () => {
  pm.expect(jsonData.totalItems).to.be.a("number");
});

pm.test("Check data type of balance", () => {
  pm.expect(jsonData.totalItems).to.be.a("number");
});

//Check scenario - Variable declaration
pm.test("Others value exist",function (){
    
    //Randome value 0-9
    var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));
    console.log(randomIndex);
    
    pm.environment.set("address_address", jsonData.data[randomIndex].address);
    pm.environment.set("address_txCount", jsonData.data[randomIndex].txCount);
    pm.environment.set("address_balance", jsonData.data[randomIndex].balance);
});

// Check default size 
if (jsonData.totalItems > 0){
    pm.test("Check Size default", function(){
        pm.expect(jsonData.data.length).to.be.within(1, 100);
    });
};