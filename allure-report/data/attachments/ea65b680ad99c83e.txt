var jsonData = pm.response.json();
var stt = 200
var res_time = 5000

//Compare static data
pm.test("Status code is 200", function () {
    pm.response.to.have.status(stt);
});

pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(res_time);
});

pm.test("Check currentPage value", function () {
    pm.expect(jsonData.currentPage).to.eql(0);
});

//Compare format data type
pm.test("Check data type of the response", () => {
    let moment = require ('moment');
    pm.expect(jsonData).to.be.an("object");
    pm.expect(jsonData.totalItems).to.be.a("number");
    pm.expect(jsonData.totalPages).to.be.a("number");
    pm.expect(jsonData.currentPage).to.be.a("number");
    pm.expect(jsonData.data).to.be.an("array");
    pm.expect(jsonData.data[0].epoch).to.be.a("number");
    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));
    pm.expect(jsonData.data[0].amount).to.be.a("number");
    pm.expect(jsonData.data[0].type).to.be.a("string");
});

//Scenario compare Get stake rewward by report id api with get Rewards api - Step after
pm.test("Compare value between Get stake rewward by report id api with get Rewards api",function (){
    //all variable get from API api/v1/staking-lifecycle/report/stake-key/:reportId/withdrawals(Get stake withdrawals by report id)
    var epoch = pm.environment.get("stakingrewards_data_epoch");
    if(jsonData.hasOwnProperty('result')){
    let result = jsonData.data.find(a => a.epoch=== epoch);
    pm.expect(result.epoch).to.be.eql(pm.environment.get("stakingrewards_data_epoch"));
    pm.expect(result.time).to.be.contain(pm.environment.get("stakingrewards_data_time"));
    pm.expect(result.amount).to.be.eql(pm.environment.get("stakingrewards_data_amount"));
    }
});

// Check default size 
if (jsonData.totalItems > 0){
    pm.test("Check Size default", function(){
        pm.expect(jsonData.data.length).to.be.within(1, 100);
    });
};
