var jsonData = pm.response.json();
var stt = 200
var res_time = 5000
var current_page = 0

//Compare static data
pm.test("Status code is 200", function () {
    pm.response.to.have.status(stt);
});

pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(res_time);
});

pm.test("Compare Currentpage", function () {
    pm.expect(jsonData.currentPage).to.eql(current_page);
});

//Compare format dynamic data
pm.test("Check data type of the response", () => {
    let moment = require ('moment');

    pm.expect(jsonData.data).to.be.an("array");
    pm.expect(jsonData.totalItems).to.be.a("number");
    pm.expect(jsonData.totalPages).to.be.a("number");
    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));
    pm.expect(jsonData.data[0].epochNo).to.be.a("number");
    pm.expect(jsonData.data[0].blockNo).to.be.a("number");
    if(jsonData.data.txId){
        pm.expect(typeof jsonData.data[0].txId).to.be.oneOf([ 'object', 'number']);
    }
    pm.expect(jsonData.data[0].epochSlotNo).to.be.a("number");
    pm.expect(jsonData.data[0].txHash).to.be.a("string");
    if(jsonData.data.fee){
        pm.expect(typeof jsonData.data[0].fee).to.be.oneOf([ 'object', 'number']); 
    }   
    pm.expect(jsonData.data[0].amount).to.be.a("number");
    if(jsonData.data.stakeAddressId){
        pm.expect(typeof jsonData.data[0].stakeAddressId).to.be.oneOf([ 'object', 'string']);
    }     
});

//Scenario compare get Withdrawal with Get withdrawal transaction of stake key
pm.test("Compare data between get Withdrawal and Get withdrawal transaction of stake key",function (){
    //all variable get from API api/v1/stake-lifecycle/:stakeKey/withdrawals(get Withdrawals)
    var TX_Hash = pm.environment.get("getWithdrawals_data_txHash");
    let result = jsonData.data.find(a => a.txHash === TX_Hash);
    
    if (result?.txHash === TX_Hash){
        pm.expect(result.txHash).to.include(pm.environment.get("getWithdrawals_data_txHash"));
        pm.expect(result.amount).to.eql(pm.environment.get("getWithdrawals_data_value"));
        pm.expect(result.time).to.contain(pm.environment.get("getWithdrawals_data_time"));
    }
});

// Check default size 
if (jsonData.totalItems > 0){
    pm.test("Check Size default", function(){
        pm.expect(jsonData.data.length).to.be.within(1, 100);
    });
};