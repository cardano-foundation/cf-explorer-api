var jsonData = pm.response.json();
var stt = 200
var res_time = 5000
var current_page = 0
var randomNumber = Math.floor(Math.random() * jsonData.data.length);

//Compare static data
pm.test("Status code is 200", function () {
    pm.response.to.have.status(stt);
});

pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(res_time);
});

pm.test("Compare Currentpage", function () {
    pm.expect(jsonData.currentPage).to.eql(current_page);
});

//Compare format dynamic data
pm.test("Check data type of the response", () => {
    let moment = require ('moment');
    
    pm.expect(jsonData.data).to.be.an("array");
    pm.expect(jsonData.totalItems).to.be.a("number");
    pm.expect(jsonData.totalPages).to.be.a("number");

    //random index cho array
    if (jsonData.data[randomNumber].length > 6) {

        pm.expect(jsonData.data[randomNumber].time).to.include(moment(jsonData.data[randomNumber].time).format('YYYY/MM/DD HH:mm:ss'));
        pm.expect(jsonData.data[randomNumber].txHash).to.be.a("string");
        pm.expect(jsonData.data[randomNumber].epochNo).to.be.a("number");
        pm.expect(jsonData.data[randomNumber].blockNo).to.be.a("number");
        pm.expect(jsonData.data[randomNumber].epochSlotNo).to.be.a("number");
        pm.expect(jsonData.data[randomNumber].poolData).to.be.a("string");
        pm.expect(jsonData.data[randomNumber].poolId).to.be.a("string");
        pm.expect(jsonData.data[randomNumber].tickerName).to.be.a("string");
            
    } else {

        pm.expect(jsonData.data[randomNumber].time).to.include(moment(jsonData.data[randomNumber].time).format('YYYY/MM/DD HH:mm:ss'));
        pm.expect(jsonData.data[randomNumber].txHash).to.be.a("string");
        pm.expect(jsonData.data[randomNumber].epochNo).to.be.a("number");
        pm.expect(jsonData.data[randomNumber].blockNo).to.be.a("number");
        pm.expect(jsonData.data[randomNumber].epochSlotNo).to.be.a("number");
        pm.expect(jsonData.data[randomNumber].poolId).to.be.a("string");

    }

    
});

//Scenario Compare value between Get top delegators and Get delegation history of stake key
//all variable get from API api/v1/stakes/top-delegators(Get top delegators)
pm.test("Compare value between Get top delegators and Get delegation history of stake key", function () {
    var stakes_poolId = pm.environment.get("stakes_poolId");

    for (let i = 0; i < jsonData.data.length; i++) {
        if (jsonData.data[i].poolId === stakes_poolId) {
            pm.expect(jsonData.data[i].poolId).to.be.include(stakes_poolId);
        }
    }
});

//Scenario compare get Delegation with Get delegation history of stake key
//all variable get from API api/v1/stake-lifecycle/:stakeKey/delegations(get Delegations)
var txhash = pm.environment.get("getDelegations_data_txHash");
let result = jsonData.data.find(a => a.txHash === 1);
if (result?.txHash === txhash){
    pm.test("Compare value between get Delegation and Get delegation history of stake key", function () {

        pm.expect(result.txHash).to.be.include(pm.environment.get("getDelegations_data_txHash"));
        pm.expect(result.time).to.be.eql(pm.environment.get("getDelegations_data_time"));
    });

}

// Check default size 
if (jsonData.totalItems > 0){
    pm.test("Check Size default", function(){
        pm.expect(jsonData.data.length).to.be.within(1, 100);
    });
};
