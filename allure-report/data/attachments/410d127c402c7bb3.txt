
var metadataCIP25 = pm.response.json().metadata[0].metadataCIP25.tokenMap;
const tokenNames = ["jc00000007", "jc00000052", "jc00000040", "jc00000005", "jc00000027", "jc00000006", "jc00023445", "jc00000003", "jc00023446", "jc00000004", "jc00000012", "jc00000024"]

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(5000);
});



pm.test("Check metadata CIP 25", function () {
    tokenNames.map((tokenName) => {
        pm.expect(metadataCIP25[tokenName].tokenName).to.be.a("string", "metadataCIP25[tokenName].tokenName")

        if (metadataCIP25[tokenName].requireProperties && metadataCIP25[tokenName].requireProperties.length > 0) {
            metadataCIP25[tokenName].requireProperties.map(require => {
                pm.expect(require.index).to.be.a("string", "require.index")
                pm.expect(require.valid).to.be.a("boolean", "require.valid")
                pm.expect(require.value).to.be.a("string", "require.value")
                pm.expect(require.property).to.be.a("string", "require.property")
                pm.expect(require.format).to.be.a("string", "require.format")
            })
        }
        if (metadataCIP25[tokenName].optionalProperties && metadataCIP25[tokenName].optionalProperties.length > 0) {
            metadataCIP25[tokenName].optionalProperties.map(optional => {
                pm.expect(optional.index).to.be.a("string", "optional.index")
                pm.expect(optional.valid).to.be.a("boolean", "optional.valid")
                pm.expect(optional.value).to.be.a("string", "optional.value")
                pm.expect(optional.property).to.be.a("string", "optional.property")
                pm.expect(optional.format).to.be.a("string", "optional.format")
            })
        }
    })
});


