const jsonData = pm.response.json();

//Compare static value
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(5000);
});

pm.test("Check currentPage value", function () {
    pm.expect(jsonData.currentPage).to.eql(0);
});

//Compare data type
pm.test("Check data type of the response", () => {
    let moment = require ('moment');
    pm.expect(jsonData).to.be.an("object");
    pm.expect(jsonData.totalItems).to.be.a("number");
    pm.expect(jsonData.totalPages).to.be.a("number");
    pm.expect(jsonData.currentPage).to.be.a("number");
    pm.expect(jsonData.data).to.be.an("array");
    pm.expect(jsonData.data[0].reportId).to.be.a("number");
    pm.expect(jsonData.data[0].reportName).to.be.a("string");
    pm.expect(jsonData.data[0].epochRanges).to.be.an("array");
    pm.expect(jsonData.data[0].isPoolSize).to.be.a("boolean");
    pm.expect(jsonData.data[0].isFeesPaid).to.be.a("boolean");
    pm.expect(jsonData.data[0].eventRegistration).to.be.a("boolean");
    pm.expect(jsonData.data[0].eventDeregistration).to.be.a("boolean");
    pm.expect(jsonData.data[0].eventReward).to.be.a("boolean");
    pm.expect(jsonData.data[0].eventPoolUpdate).to.be.a("boolean");
    pm.expect(jsonData.data[0].createdAt).to.include(moment(jsonData.data[0].createdAt).format('YYYY/MM/DD HH:mm:ss'));
    pm.expect(jsonData.data[0].status).to.be.a("string");
});

//Scenario compare Create Pool report api with Get: list pool Report api
pm.test("Compare value between Get: list pool Report api and  Create Pool report api",function(){
    pm.expect(jsonData.data[0].reportName).to.be.include(pm.environment.get("pool_report_reportName"));
    pm.expect(jsonData.data[0].isPoolSize).to.be.eql(pm.environment.get("pool_report_isPoolSize"));
    pm.expect(jsonData.data[0].isFeesPaid).to.be.eql(pm.environment.get("pool_report_isFeesPaid"));
    pm.expect(jsonData.data[0].eventRegistration).to.be.eql(pm.environment.get("pool_report_eventRegistration"));
    pm.expect(jsonData.data[0].eventDeregistration).to.be.eql(pm.environment.get("pool_report_eventDeregistration"));
    pm.expect(jsonData.data[0].eventReward).to.be.eql(pm.environment.get("pool_report_eventReward"));
    pm.expect(jsonData.data[0].eventPoolUpdate).to.be.eql(pm.environment.get("pool_report_eventPoolUpdate"));
});

//Scenario compare Get list pool Report api with get detail pool Report api - variable declaration
pm.test("Others value exist",function (){
    
    //Randome value 
    var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));
    
    pm.environment.set("pool_report_reportId", jsonData.data[randomIndex].reportId)
    pm.environment.set("pool_report_isPoolSize", jsonData.data[randomIndex].isPoolSize)
    pm.environment.set("pool_report_isFeesPaid", jsonData.data[randomIndex].isFeesPaid)
    pm.environment.set("pool_report_eventRegistration", jsonData.data[randomIndex].eventRegistration)
    pm.environment.set("pool_report_eventDeregistration", jsonData.data[randomIndex].eventDeregistration)
    pm.environment.set("pool_report_eventReward", jsonData.data[randomIndex].eventReward)
    pm.environment.set("pool_report_eventPoolUpdate", jsonData.data[randomIndex].eventPoolUpdate)
    pm.environment.set("pool_report_reportName", jsonData.data[randomIndex].reportName)
    pm.environment.set("pool_report_createdAt", jsonData.data[randomIndex].createdAt)
    pm.environment.set("pool_report_status", jsonData.data[randomIndex].status)

});

// Check default size 
if (jsonData.totalItems > 0){
    pm.test("Check Size default", function(){
        pm.expect(jsonData.data.length).to.be.within(1, 100);
    });
};

var idlist = [];
for (let i = 0; i < jsonData.data.length; i++) {
    idlist[i] = jsonData.data[i].reportId
};
pm.environment.set("pool_report_overreportId", (Math.max(...idlist)+1));
console.log((Math.max(...idlist)+1))
