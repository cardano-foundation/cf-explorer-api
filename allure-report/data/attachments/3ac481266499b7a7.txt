var jsonData = pm.response.json();
var stt = 200
var res_time = 5000
var current_page = 0

//Compare static data
pm.test("Status code is 200", function () {
    pm.response.to.have.status(stt);
});

pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(res_time);
});

pm.test("Compare Currentpage", function () {
    pm.expect(jsonData.currentPage).to.eql(current_page);
});

//Compare format dynamic data
pm.test("Check data type of the response", () => {
    pm.expect(jsonData.data).to.be.an("array");
    pm.expect(jsonData.totalItems).to.be.a("number");
    pm.expect(jsonData.totalPages).to.be.a("number");
    pm.expect(jsonData.data[0].stakeKey).to.be.a("string");
    pm.expect(jsonData.data[0].balance).to.be.a("number");
    pm.expect(jsonData.data[0].poolId).to.be.a("string");
    pm.expect(typeof jsonData.data[0].tickerName).to.be.oneOf([ 'object', 'string']);
    pm.expect(typeof jsonData.data[0].poolName).to.be.oneOf([ 'object', 'string']);
});

//Scenario Compare api: Get top delegators with api: Get a stake detail by stake key
pm.test("Get data of Get top delegators api",function (){   
    //Randome value
    var randomNumber = Math.floor(Math.random() * jsonData.data.length);

    pm.environment.set("stakes_stakeKey", jsonData.data[randomNumber].stakeKey);
    pm.environment.set("stakes_balance", jsonData.data[randomNumber].balance);
    pm.environment.set("stakes_poolId", jsonData.data[randomNumber].poolId);
    pm.environment.set("stakes_tickerName", jsonData.data[randomNumber].tickerName);
    pm.environment.set("stakes_poolName", jsonData.data[randomNumber].poolName);
});