var jsonData = pm.response.json()

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(5000);
});

pm.test("Check currentPage value", function () {
    pm.expect(jsonData.currentPage).to.eql(0);
});

//Compare data type
pm.test("Check data type of hash", () => {
  pm.expect(jsonData.data[0].hash).to.be.a("string");
});

pm.test("Check data type of blockNo", () => {
  pm.expect(jsonData.data[0].blockNo).to.be.a("number");
});

pm.test("Check data type of blockHash", () => {
  pm.expect(jsonData.data[0].blockHash).to.be.a("string");
});

pm.test("Check data type of epochNo", () => {
  pm.expect(jsonData.data[0].epochNo).to.be.a("number");
});

pm.test("Check data type of epochSlotNo", () => {
  pm.expect(jsonData.data[0].epochSlotNo).to.be.a("number");
});

pm.test("Check data type of slot", () => {
  pm.expect(jsonData.data[0].slot).to.be.a("number");
});

pm.test("Check data type of time", () => {
        let moment = require ('moment');
  pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));
});

pm.test("Check data type of addressesInput", () => {
  pm.expect(jsonData.data[0].addressesInput[0]).to.be.a("string");
});

pm.test("Check data type of addressesOutput", () => {
  pm.expect(jsonData.data[0].addressesOutput[0]).to.be.a("string");
});

pm.test("Check data type of fee", () => {
  pm.expect(jsonData.data[0].fee).to.be.a("number");
});

pm.test("Check data type of totalOutput", () => {
  pm.expect(jsonData.data[0].totalOutput).to.be.a("number");
});

pm.test("Check data type of balance", () => {
  pm.expect(jsonData.data[0].balance).to.be.a("number");
});

if(jsonData.data[0].tokens.length > 0) {
    pm.test("Check data type of policy", () => {
        pm.expect(jsonData.data[0].tokens[0].policy).to.be.a("string");
    });
    
    pm.test("Check data type of name", () => {
        pm.expect(jsonData.data[0].tokens[0].name).to.be.a("string");
    });

    pm.test("Check data type of displayName", () => {
        pm.expect(jsonData.data[0].tokens[0].displayName).to.be.a("string");
    });

    pm.test("Check data type of fingerprint", () => {
        pm.expect(jsonData.data[0].tokens[0].fingerprint).to.be.a("string");
    });

    pm.test("Check data type of quantity", () => {
        pm.expect(jsonData.data[0].tokens[0].quantity).to.be.a("number");
    });
}


pm.test("Check data type of totalItems", () => {
  pm.expect(jsonData.totalItems).to.be.a("number");
});

pm.test("Check data type of totalPages", () => {
  pm.expect(jsonData.totalPages).to.be.a("number");
});

// Check default size 
if (jsonData.totalItems > 0){
    pm.test("Check Size default", function(){
        pm.expect(jsonData.data.length).to.be.within(1, 100);
    });
};