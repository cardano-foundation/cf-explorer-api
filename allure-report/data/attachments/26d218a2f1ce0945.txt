const jsonData = pm.response.json();

//Compare static value
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(5000);
});

pm.test("Check currentPage value", function () {
    pm.expect(jsonData.currentPage).to.eql(0);
});

if  (jsonData.data.length > 0){
    //Compare data type
    pm.test("Check data type of the response", () => {

        let moment = require ('moment');
        pm.expect(jsonData).to.be.an("object");
        pm.expect(jsonData.totalItems).to.be.a("number");
        pm.expect(jsonData.totalPages).to.be.a("number");
        pm.expect(jsonData.currentPage).to.be.a("number");
        pm.expect(jsonData.data).to.be.an("array");
        pm.expect(jsonData.data[0].poolId).to.be.a("string");
        if(jsonData.data.poolName){
            pm.expect(typeof jsonData.data[0].poolName).to.be.oneOf(["object","string"]);
        }
        pm.expect(jsonData.data[0].poolView).to.be.a("string");
        pm.expect(jsonData.data[0].stakeKeys).to.be.an("array");
        pm.expect(jsonData.data[0].stakeKeys[0]).to.be.an("string");
        pm.expect(jsonData.data[0].txHash).to.be.a("string");
        pm.expect(jsonData.data[0].totalFee).to.be.a("number");
        if(jsonData.data.poolHold){
            pm.expect(typeof jsonData.data[0].poolHold).to.be.oneOf(['object', 'number']);
        }
        pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));
        pm.expect(jsonData.data[0].fee).to.be.a("number");
        pm.expect(jsonData.data[0].retiringEpoch).to.be.a("number");
        pm.expect(jsonData.data[0].refundFlag).to.be.a("boolean");

    });

    //Scenario compare Get detail Deregistration api with get de Registration api 
    pm.test("Compare data at Get de Registration api with Get detail Deregistration api",function(){
        
        var pool_view = pm.environment.get("poolreport_detailDere_data_poolView");
        let result = jsonData.data.find(a => a.poolView === pool_view);

        pm.expect(result.poolId).to.be.eql(pm.environment.get("poolreport_detailDere_data_poolId"));
        pm.expect(result.poolName || "").to.be.include(pm.environment.get("poolreport_detailDere_data_poolName") || "");
        pm.expect(result.poolView).to.be.include(pm.environment.get("poolreport_detailDere_data_poolView"));
        pm.expect(result.stakeKeys).to.be.eql(pm.environment.get("poolreport_detailDere_data_stakeKeys"));
        pm.expect(result.txHash).to.be.include(pm.environment.get("poolreport_detailDere_data_txHash"));
        pm.expect(result.totalFee).to.be.eql(pm.environment.get("poolreport_detailDere_data_totalFee"));
        pm.expect(result.poolHold).to.be.eql(pm.environment.get("poolreport_detailDere_data_poolHold"));
        pm.expect(result.time).to.be.contain(pm.environment.get("poolreport_detailDere_data_time"));
        pm.expect(result.fee).to.be.eql(pm.environment.get("poolreport_detailDere_data_fee"));
        pm.expect(result.retiringEpoch).to.be.eql(pm.environment.get("poolreport_detailDere_data_retiringEpoch"));
        pm.expect(result.refundFlag).to.be.eql(pm.environment.get("poolreport_detailDere_data_refundFlag"));
        
    })
}

// Check default size 
if (jsonData.totalItems > 0){
    pm.test("Check Size default", function(){
        pm.expect(jsonData.data.length).to.be.within(1, 100);
    });
};