const jsonData = pm.response.json();

//Compare static value
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(5000);
});

//Compare data type
pm.test("Check data type of the response", () => {
    let moment = require ('moment');
    pm.expect(jsonData).to.be.an("object");
    pm.expect(jsonData.poolId).to.be.a("string");
    if(jsonData.poolName){
        pm.expect(typeof jsonData.poolName).to.be.oneOf(['object', 'string']);
    }
    pm.expect(jsonData.poolView).to.be.a("string");
    if(jsonData.previousPledge){
        pm.expect(typeof jsonData.previousPledge).to.be.oneOf(['object', 'number']);
    }
    if(jsonData.previousMargin){
        pm.expect(typeof jsonData.previousMargin).to.be.oneOf(['object', 'number']);
    }
    pm.expect(jsonData.txHash).to.be.a("string");
    pm.expect(jsonData.time).to.include(moment(jsonData.time).format('YYYY/MM/DD HH:mm:ss'));
    pm.expect(jsonData.stakeKeys[0]).to.be.a("string");
    pm.expect(jsonData.fee).to.be.a("number");
    pm.expect(jsonData.rewardAccount).to.be.a("string");
    pm.expect(jsonData.vrfKey).to.be.a("string");
    pm.expect(jsonData.pledge).to.be.a("number");
    pm.expect(jsonData.margin).to.be.a("number");
    pm.expect(jsonData.cost).to.be.a("number");
    pm.expect(jsonData.deposit).to.be.a("number");
});

//scenario compare value of pool Update 2 api and pool Update 1 api - Data called from pool Update 1 api: /api/v1/pool-lifecycle/pool-update-list?poolView
pm.test("Others value exist",function (){
    if  (jsonData.length > 0){ 
    pm.expect(jsonData.poolId).to.include(pm.environment.get("pool_lifecycle_data_poolId"));
    pm.expect(jsonData.poolName || "").to.include(pm.environment.get("pool_lifecycle_data_poolName") || "");
    pm.expect(jsonData.poolView).to.include(pm.environment.get("pool_lifecycle_data_poolView"));
    pm.expect(jsonData.previousPledge).to.eql(pm.environment.get("pool_lifecycle_data_previousPledge"));
    pm.expect(jsonData.previousMargin).to.eql(pm.environment.get("pool_lifecycle_data_previousMargin"));
    pm.expect(jsonData.txHash).to.include(pm.environment.get("pool_lifecycle_data_txHash"));
    pm.expect(jsonData.time).to.contain(pm.environment.get("pool_lifecycle_data_time"));
    pm.expect(jsonData.stakeKeys).to.eql(pm.environment.get("pool_lifecycle_data_stakeKeys"));
    pm.expect(jsonData.fee).to.eql(pm.environment.get("pool_lifecycle_data_fee"));
    pm.expect(jsonData.rewardAccount).to.include(pm.environment.get("pool_lifecycle_data_rewardAccount"));
    pm.expect(jsonData.vrfKey).to.include(pm.environment.get("pool_lifecycle_data_vrfKey"));
    pm.expect(jsonData.pledge).to.eql(pm.environment.get("pool_lifecycle_data_pledge"));
    pm.expect(jsonData.margin).to.eql(pm.environment.get("pool_lifecycle_data_margin"));
    pm.expect(jsonData.cost).to.eql(pm.environment.get("pool_lifecycle_data_cost"));
    pm.expect(jsonData.deposit).to.eql(pm.environment.get("pool_lifecycle_data_deposit"));
    }
});

