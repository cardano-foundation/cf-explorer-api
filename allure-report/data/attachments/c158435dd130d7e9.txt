var jsonData = pm.response.json();
var stt = 200
var res_time = 5000

console.log(jsonData)

//Compare static data
pm.test("Status code is 200", function () {
    pm.response.to.have.status(stt);
});

pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(res_time);
});

//Compare data type
pm.test("Check data type of id", () => {
  pm.expect(jsonData[0].id).to.be.a("number");
});

pm.test("Check data type of poolId", () => {
  pm.expect(jsonData[0].poolId).to.be.a("string");
});

pm.test("Check data type of poolName", () => {
    if(jsonData[0].poolName){
        pm.expect(typeof jsonData[0].poolName).to.be.oneOf([ 'object', 'string']);
    }
});

pm.test("Check data type of tickerName", () => {
    if(jsonData[0].tickerName){
        pm.expect(typeof jsonData[0].tickerName).to.be.oneOf([ 'object', 'string']);
    }
});

pm.test("Check data type of poolSize", () => {
  pm.expect(jsonData[0].poolSize).to.be.a("number");
});

pm.test("Check data type of pledge", () => {
  pm.expect(jsonData[0].pledge).to.be.a("number");
});

pm.test("Check data type of saturation", () => {
  pm.expect(jsonData[0].saturation).to.be.a("number");
});

pm.test("Check data type of stakeLimit", () => {
    if(jsonData.stakeLimit){
        pm.expect(typeof jsonData[0].stakeLimit).to.be.oneOf([ 'object', 'number']);
    }
});

pm.test("Check data type of reserves", () => {
    if(jsonData.reserves){
        pm.expect(typeof jsonData[0].reserves).to.be.oneOf([ 'object', 'number']);
    }
});

pm.test("Check data type of numberDelegators", () => {
    if(jsonData.numberDelegators){
        pm.expect(typeof jsonData[0].numberDelegators).to.be.oneOf([ 'object', 'number']);
    }
});

pm.test("Check data type of epochBlock", () => {
    if(jsonData.epochBlock){
        pm.expect(typeof jsonData[0].epochBlock).to.be.oneOf([ 'object', 'number']);
    }
});

pm.test("Check data type of lifetimeBlock", () => {
    if(jsonData.lifetimeBlock){
        pm.expect(typeof jsonData[0].lifetimeBlock).to.be.oneOf([ 'object', 'number']);
    }
});

pm.test("Check data type of kparam", () => {
    if(jsonData.kpara){
        pm.expect(typeof jsonData[0].kparam).to.be.oneOf([ 'object', 'number']);
    }
});

//Scenario Compare api: Get top delegation with api: Get data for pool detail + Scenario Compare api get Data For Pool Table with api Get: Find Top(default is 3) Delegation Pool order by pool size
pm.test("Get data of Find Top(default is 3) Delegation Pool order by pool size api",function (){    
    //Randome value
    var randomIndex = Math.floor(Math.random() * (jsonData.length-1));
    console.log(jsonData[randomIndex].poolId)

    pm.environment.set("delegation_poolId", jsonData[randomIndex].poolId);
    pm.environment.set("delegation_id", jsonData[randomIndex].id);
    pm.environment.set("delegation_poolName", jsonData[randomIndex].poolName);
    pm.environment.set("delegation_poolSize", jsonData[randomIndex].poolSize);
    pm.environment.set("delegation_reward", jsonData[randomIndex].reward);
    pm.environment.set("delegation_feePercent", jsonData[randomIndex].feePercent);
    pm.environment.set("delegation_feeAmount", jsonData[randomIndex].feeAmount);
    pm.environment.set("delegation_pledge", jsonData[randomIndex].pledge);
    pm.environment.set("delegation_saturation", jsonData[randomIndex].saturation);
    pm.environment.set("delegation_stakeLimit", jsonData[randomIndex].stakeLimit);
    pm.environment.set("delegation_reserves", jsonData[randomIndex].reserves);
    pm.environment.set("delegation_numberDelegators", jsonData[randomIndex].numberDelegators);
    pm.environment.set("delegation_epochBlock", jsonData[randomIndex].epochBlock);
    pm.environment.set("delegation_lifetimeBlock", jsonData[randomIndex].lifetimeBlock);
    pm.environment.set("delegation_lifetimeRos", jsonData[randomIndex].lifetimeRos);
    pm.environment.set("delegation_kparam", jsonData[randomIndex].kparam);
});


