var jsonData = pm.response.json();
var stt = 200
var res_time = 5000

//Compare static data
pm.test("Status code is 200", function () {
    pm.response.to.have.status(stt);
});

pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(res_time);
});

pm.test("Check currentPage value", function () {
    pm.expect(jsonData.currentPage).to.eql(0);
});

//Compare format data type
pm.test("Check data type of the response", () => {
    let moment = require ('moment');
    pm.expect(jsonData).to.be.an("object");
    pm.expect(jsonData.totalItems).to.be.a("number");
    pm.expect(jsonData.totalPages).to.be.a("number");
    pm.expect(jsonData.currentPage).to.be.a("number");
    pm.expect(jsonData.data).to.be.an("array");
    pm.expect(jsonData.data[0].epoch).to.be.a("number");
    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));
    pm.expect(jsonData.data[0].amount).to.be.a("number");
});

//Scenario compare api get Rewards with api Get stake rewards by report id
pm.test("Get data of Get stake rewards by report id api",function (){
    //Randome value 
    var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));
    console.log(randomIndex);
    
    pm.environment.set("stakingrewards_data_epoch", jsonData.data[randomIndex].epoch)
    pm.environment.set("stakingrewards_data_time", jsonData.data[randomIndex].time)
    pm.environment.set("stakingrewards_data_amount", jsonData.data[randomIndex].amount)

});

// Check default size 
if (jsonData.totalItems > 0){
    pm.test("Check Size default", function(){
        pm.expect(jsonData.data.length).to.be.within(1, 100);
    });
};
