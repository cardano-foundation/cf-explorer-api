const jsonData = pm.response.json();

//Compare static value
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(5000);
});

pm.test("Check currentPage value", function () {
    pm.expect(jsonData.currentPage).to.eql(0);
});

if  (jsonData.data.length > 0){  

    //Compare data type
    pm.test("Check data type of the response", () => {
         
        let moment = require ('moment');
        pm.expect(jsonData).to.be.an("object");
        pm.expect(jsonData.totalItems).to.be.a("number");
        pm.expect(jsonData.totalPages).to.be.a("number");
        pm.expect(jsonData.currentPage).to.be.a("number");
        pm.expect(jsonData.data).to.be.an("array");
        pm.expect(jsonData.data[0].epochNo).to.be.a("number");
        pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));
        pm.expect(jsonData.data[0].amount).to.be.a("number");
        pm.expect(jsonData.data[0].rewardAccount).to.be.a("string");
        
    });

    //Check scenario call data detail Rewards Distribution api 
    pm.test("Others value exist",function (){
        
        //Randome value
        var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));
        pm.environment.set("pool_report_data_epochNo", jsonData.data[randomIndex].epochNo)
        pm.environment.set("pool_report_data_time", jsonData.data[randomIndex].time);
        pm.environment.set("pool_report_data_amount", jsonData.data[randomIndex].amount);
        pm.environment.set("pool_report_data_rewardAccount", jsonData.data[randomIndex].rewardAccount);
        
    }); 

    pm.environment.set("pool_report_data_ResStt", "Not null");
} else {
    pm.environment.set("pool_report_data_ResStt", "Null");
}

// Check default size 
if (jsonData.totalItems > 0){
    pm.test("Check Size default", function(){
        pm.expect(jsonData.data.length).to.be.within(1, 100);
    });
};