var jsonData = pm.response.json();
var stt = 200
var res_time = 5000

//Compare static data
pm.test("Status code is 200", function () {
    pm.response.to.have.status(stt);
    if (jsonData.data && jsonData.data.length > 0) {
        pm.environment.set("contract_scriptHash_trx_hash", jsonData.data[0].hash)
    } 
    else {
        pm.environment.set("contract_scriptHash_trx_hash", null)
    }
});

pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(res_time);
});

pm.test("Check currentPage value", function () {
    pm.expect(jsonData.currentPage).to.eql(0);
});

//Compare format data type
pm.test("Check data type of the response", () => {
    if (jsonData.data.length > 0) {
        let moment = require('moment');
        pm.expect(jsonData).to.be.an("object");
        pm.expect(jsonData.totalItems).to.be.a("number");
        pm.expect(jsonData.totalPages).to.be.a("number");
        pm.expect(jsonData.currentPage).to.be.a("number");
        if (jsonData.data.length > 0) {
            pm.expect(jsonData.data[0].hash).to.be.a("string");
            pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));
            pm.expect(jsonData.data[0].blockNo).to.be.a("number");
            pm.expect(jsonData.data[0].epochNo).to.be.a("number");
            pm.expect(jsonData.data[0].epochSlotNo).to.be.a("number");
            pm.expect(jsonData.data[0].absoluteSlot).to.be.a("number");
            if (jsonData.data[0].addresses) {
                pm.expect(jsonData.data[0].addresses).to.be.an("array");
            }
            if (jsonData.data[0].scriptPurposeTypes) {
                pm.expect(jsonData.data[0].scriptPurposeTypes).to.be.an("array");
                pm.expect(jsonData.data[0].scriptPurposeTypes).to.contain.oneOf(["SPEND", "MINT", "CERT", "REWARD"]);

            }
        }

    }
});