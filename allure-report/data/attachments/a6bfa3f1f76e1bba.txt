const jsonData = pm.response.json();

//Compare static value
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(5000);
});

pm.test("Check currentPage value", function () {
    pm.expect(jsonData.currentPage).to.eql(0);
});


if  (jsonData.data.length > 0){
    //Compare data type
    pm.test("Check data type of the response", () => {    
        let moment = require ('moment');

        pm.expect(jsonData).to.be.an("object");
        pm.expect(jsonData.totalItems).to.be.a("number");
        pm.expect(jsonData.totalPages).to.be.a("number");
        pm.expect(jsonData.currentPage).to.be.a("number");
        pm.expect(jsonData.data).to.be.an("array");
        pm.expect(jsonData.data[0].poolUpdateId).to.be.a("number");
        pm.expect(jsonData.data[0].poolId).to.be.a("string");
        if(jsonData.data.poolName){
            pm.expect(typeof jsonData.data[0].poolName).to.be.oneOf([ 'object', 'string']);
        }
        pm.expect(jsonData.data[0].poolView).to.be.a("string");
        pm.expect(jsonData.data[0].previousPledge).to.be.a("number");
        pm.expect(jsonData.data[0].previousMargin).to.be.a("number");
        pm.expect(jsonData.data[0].txHash).to.be.a("string");
        pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));
        pm.expect(jsonData.data[0].stakeKeys[0]).to.be.a("string");
        pm.expect(jsonData.data[0].fee).to.be.a("number");
        pm.expect(jsonData.data[0].rewardAccount).to.be.a("string");
        pm.expect(jsonData.data[0].vrfKey).to.be.a("string");
        pm.expect(jsonData.data[0].pledge).to.be.a("number");
        pm.expect(jsonData.data[0].margin).to.be.a("number");
        pm.expect(jsonData.data[0].cost).to.be.a("number");
        pm.expect(jsonData.data[0].deposit).to.be.a("number");

    });

//Scenario compare Get detail Pool Update api with get pool Update 1 api 
pm.test("Others value exist",function (){
    var poolUpdateId = pm.environment.get("poolreport_data_poolUpdateId");
    let result = jsonData.data.find(a => a.poolUpdateId === poolUpdateId);

    pm.expect(result.poolId).to.be.eql(pm.environment.get("poolreport_data_poolId"));
    pm.expect(result.poolName || "").to.be.include(pm.environment.get("poolreport_data_poolName") || "");
    pm.expect(result.poolView).to.be.include(pm.environment.get("poolreport_data_poolView"));
    pm.expect(result.previousPledge).to.be.eql(pm.environment.get("poolreport_data_previousPledge"));
    pm.expect(result.previousMargin).to.be.eql(pm.environment.get("poolreport_data_previousMargin"));
    pm.expect(result.txHash).to.be.include(pm.environment.get("poolreport_data_txHash"));
    pm.expect(result.time).to.be.contain(pm.environment.get("poolreport_data_time"));
    pm.expect(result.stakeKeys).to.be.eql(pm.environment.get("poolreport_data_stakeKeys"));
    pm.expect(result.fee).to.be.eql(pm.environment.get("poolreport_data_fee"));
    pm.expect(result.rewardAccount).to.be.include(pm.environment.get("poolreport_data_rewardAccount"));
    pm.expect(result.vrfKey).to.be.include(pm.environment.get("poolreport_data_vrfKey"));
    pm.expect(result.pledge).to.be.eql(pm.environment.get("poolreport_data_pledge"));
    pm.expect(result.margin).to.be.eql(pm.environment.get("poolreport_data_margin"));
    pm.expect(result.cost).to.be.eql(pm.environment.get("poolreport_data_cost"));
    pm.expect(result.deposit).to.be.eql(pm.environment.get("poolreport_data_deposit"));
});

    //Count total contribution
    // pm.test("Check number of contributions in data level 2", function () {

    //     var number = Object.keys(jsonData.data[0]).length;
    //     pm.expect(number).to.eql(15)

    // });

    //Check name
    pm.test("Check name of contributions in data data", function () {
        var arrayOfResponseKeys  = Object.keys(jsonData.data[0])
        var myKeysList = ["poolUpdateId", "poolId", "poolName", "poolView", "previousPledge", "previousMargin", "txHash", "time", "stakeKeys", "fee", "rewardAccount", "vrfKey", "pledge", "margin", "cost", "deposit"];

        for (let i = 0; i < arrayOfResponseKeys.length; i++) {
            pm.expect(arrayOfResponseKeys[i]).to.be.oneOf(myKeysList);
        }
            
    });

    //Check scenario call data at pool Update 1 api - variable declaration
    pm.test("Others value exist",function (){  
        //Randome value
        var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));

        pm.environment.set("pool_lifecycle_data_poolUpdateId", jsonData.data[randomIndex].poolUpdateId);
        pm.environment.set("pool_lifecycle_data_poolId", jsonData.data[randomIndex].poolId);
        pm.environment.set("pool_lifecycle_data_poolName", jsonData.data[randomIndex].poolName);
        pm.environment.set("pool_lifecycle_data_poolView", jsonData.data[randomIndex].poolView);
        pm.environment.set("pool_lifecycle_data_previousPledge", jsonData.data[randomIndex].previousPledge);
        pm.environment.set("pool_lifecycle_data_previousMargin", jsonData.data[randomIndex].previousMargin);
        pm.environment.set("pool_lifecycle_data_txHash", jsonData.data[randomIndex].txHash);
        pm.environment.set("pool_lifecycle_data_time", jsonData.data[randomIndex].time);
        pm.environment.set("pool_lifecycle_data_stakeKeys", jsonData.data[randomIndex].stakeKeys);
        pm.environment.set("pool_lifecycle_data_fee", jsonData.data[randomIndex].fee);
        pm.environment.set("pool_lifecycle_data_rewardAccount", jsonData.data[randomIndex].rewardAccount);
        pm.environment.set("pool_lifecycle_data_vrfKey", jsonData.data[randomIndex].vrfKey);
        pm.environment.set("pool_lifecycle_data_pledge", jsonData.data[randomIndex].pledge);
        pm.environment.set("pool_lifecycle_data_margin", jsonData.data[randomIndex].margin);
        pm.environment.set("pool_lifecycle_data_cost", jsonData.data[randomIndex].cost);
        pm.environment.set("pool_lifecycle_data_deposit", jsonData.data[randomIndex].deposit);
        
    }); 
}

// Check default size 
if (jsonData.totalItems > 0){
    pm.test("Check Size default", function(){
        pm.expect(jsonData.data.length).to.be.within(1, 100);
    });
};