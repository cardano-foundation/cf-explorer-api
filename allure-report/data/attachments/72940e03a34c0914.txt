var jsonData = pm.response.json();
var stt = 200
var res_time = 5000

//Compare static data
pm.test("Status code is 200", function () {
    pm.response.to.have.status(stt);
});

pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(res_time);
});

pm.test("Check currentPage value", function () {
    pm.expect(jsonData.currentPage).to.eql(0);
});

//Compare format data type
pm.test("Check data type of the response", () => {
    let moment = require ('moment');
    pm.expect(jsonData).to.be.an("object");
    pm.expect(jsonData.totalItems).to.be.a("number");
    pm.expect(jsonData.totalPages).to.be.a("number");
    pm.expect(jsonData.currentPage).to.be.a("number");
    pm.expect(jsonData.data).to.be.an("array");
    pm.expect(jsonData.data[0].id).to.be.a("number");
    pm.expect(jsonData.data[0].stakeKey).to.be.a("string");
    pm.expect(jsonData.data[0].username).to.be.a("string");
    pm.expect(jsonData.data[0].reportName).to.be.a("string");
    pm.expect(jsonData.data[0].fromDate).to.include(moment(jsonData.data[0].fromDate).format('YYYY/MM/DD HH:mm:ss'));
    pm.expect(jsonData.data[0].toDate).to.include(moment(jsonData.data[0].toDate).format('YYYY/MM/DD HH:mm:ss'));
    pm.expect(jsonData.data[0].isADATransfer).to.be.a("boolean");
    pm.expect(jsonData.data[0].isFeesPaid).to.be.a("boolean");
    pm.expect(jsonData.data[0].eventRegistration).to.be.a("boolean");
    pm.expect(jsonData.data[0].eventDelegation).to.be.a("boolean");
    pm.expect(jsonData.data[0].eventRewards).to.be.a("boolean");
    pm.expect(jsonData.data[0].eventWithdrawal).to.be.a("boolean");
    pm.expect(jsonData.data[0].eventDeregistration).to.be.a("boolean");
    pm.expect(jsonData.data[0].status).to.be.a("string");
    pm.expect(jsonData.data[0].type).to.be.a("string");
    pm.expect(jsonData.data[0].createdAt).to.include(moment(jsonData.data[0].createdAt).format('YYYY/MM/DD HH:mm:ss'));
});

//Scenario
pm.test("Compare value between Generate stake key report and  Get stake key report history by stake key",function(){
    //all variable get from API api/v1/staking-lifecycle/report/stake-key(Generate stake key report)
    var stakingLifecycle_id = pm.environment.get("stakinglifecycle_id");
    let result = jsonData.data.find(a => a.id === stakingLifecycle_id);

    pm.expect(result.stakeKey).to.be.include(pm.environment.get("stakinglifecycle_stakeKey"));
    pm.expect(result.reportName).to.be.include(pm.environment.get("stakinglifecycle_reportName"));
    pm.expect(result.fromDate).to.be.contain(pm.environment.get("stakinglifecycle_fromDate"));
    pm.expect(result.toDate).to.be.contain(pm.environment.get("stakinglifecycle_toDate"));
    pm.expect(result.isADATransfer).to.be.equal(pm.environment.get("stakinglifecycle_isADATransfer"));
    pm.expect(result.isFeesPaid).to.be.equal(pm.environment.get("stakinglifecycle_isFeesPaid"));
    pm.expect(result.eventRegistration).to.be.equal(pm.environment.get("stakinglifecycle_eventRegistration"));
    pm.expect(result.eventDelegation).to.be.equal(pm.environment.get("stakinglifecycle_eventDelegation"));
    pm.expect(result.eventRewards).to.be.equal(pm.environment.get("stakinglifecycle_eventRewards"));
    pm.expect(result.eventWithdrawal).to.be.equal(pm.environment.get("stakinglifecycle_eventWithdrawal"));
    pm.expect(result.eventDeregistration).to.be.equal(pm.environment.get("stakinglifecycle_eventDeregistration"));
});

// Check default size 
if (jsonData.totalItems > 0){
    pm.test("Check Size default", function(){
        pm.expect(jsonData.data.length).to.be.within(1, 100);
    });
};
