var jsonData = pm.response.json();
var stt = 200
var res_time = 5000
var current_page = 0

//Compare static data
pm.test("Status code is 200", function () {
    pm.response.to.have.status(stt);
});

pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(res_time);
});

pm.test("Compare Currentpage", function () {
    pm.expect(jsonData.currentPage).to.eql(current_page);
});

//Compare format dynamic data
pm.test("Check data type of id", () => {
  pm.expect(jsonData.data[0].id).to.be.a("number");
});

pm.test("Check data type of name", () => {
  pm.expect(jsonData.data[0].name).to.be.a("string");
});

pm.test("Check data type of displayName", () => {
  pm.expect(jsonData.data[0].displayName).to.be.a("string");
});

pm.test("Check data type of policy", () => {
  pm.expect(jsonData.data[0].policy).to.be.a("string");
});

pm.test("Check data type of fingerprint", () => {
  pm.expect(jsonData.data[0].fingerprint).to.be.a("string");
});

pm.test("Check data type of txCount", () => {
  pm.expect(jsonData.data[0].txCount).to.be.a("number");
});

pm.test("Check data type of supply", () => {
  pm.expect(jsonData.data[0].supply).to.be.a("string");
});

pm.test("Check data type of totalVolume", () => {
  pm.expect(jsonData.data[0].totalVolume).to.be.a("string");
});

pm.test("Check data type of createdOn", () => {
        let moment = require ('moment');
  pm.expect(jsonData.data[0].createdOn).to.include(moment(jsonData.data[0].createdOn).format('YYYY/MM/DD HH:mm:ss'));
});

pm.test("Check data type of totalItems", () => {
  pm.expect(jsonData.totalItems).to.be.a("number");
});

pm.test("Check data type of totalPages", () => {
  pm.expect(jsonData.totalPages).to.be.a("number");
});

// Check default size 
if (jsonData.totalItems > 0){
    pm.test("Check Size default", function(){
        pm.expect(jsonData.data.length).to.be.within(1, 100);
    });
};