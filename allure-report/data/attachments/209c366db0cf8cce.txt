const jsonData = pm.response.json();

//Compare static value
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(5000);
});

pm.test("Check currentPage value", function () {
    pm.expect(jsonData.currentPage).to.eql(0);
});

//Compare data type
pm.test("Check data type of the response", () => {
    let moment = require ('moment');
    pm.expect(jsonData).to.be.an("object");
    pm.expect(jsonData.totalItems).to.be.a("number");
    pm.expect(jsonData.totalPages).to.be.a("number");
    pm.expect(jsonData.currentPage).to.be.a("number");
    pm.expect(jsonData.data).to.be.an("array");
    pm.expect(jsonData.data[0].poolUpdateId).to.be.a("number");
    pm.expect(jsonData.data[0].poolId).to.be.a("string");
    if(jsonData.data.poolName){
        pm.expect(typeof jsonData.data[0].poolName).to.be.oneOf([ 'object', 'string']);
    }
    pm.expect(jsonData.data[0].poolView).to.be.a("string");
    pm.expect(jsonData.data[0].previousPledge).to.be.a("number");
    pm.expect(jsonData.data[0].previousMargin).to.be.a("number");
    pm.expect(jsonData.data[0].txHash).to.be.a("string");
    pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));
    pm.expect(jsonData.data[0].stakeKeys).to.be.a("array");
    pm.expect(jsonData.data[0].fee).to.be.a("number");
    pm.expect(jsonData.data[0].rewardAccount).to.be.a("string");
    pm.expect(jsonData.data[0].vrfKey).to.be.a("string");
    pm.expect(jsonData.data[0].pledge).to.be.a("number");
    pm.expect(jsonData.data[0].margin).to.be.a("number");
    pm.expect(jsonData.data[0].cost).to.be.a("number");
    pm.expect(jsonData.data[0].deposit).to.be.a("number");
});

//Scenario compare Get detail Pool Update api with get pool Update 1 api - variable declaration
pm.test("Get data of detail Pool Update api",function(){
    //Randome value
    var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));

    pm.environment.set("poolreport_data_poolUpdateId", jsonData.data[randomIndex].poolUpdateId);
    pm.environment.set("poolreport_data_poolId", jsonData.data[randomIndex].poolId);
    pm.environment.set("poolreport_data_poolName", jsonData.data[randomIndex].poolName);
    pm.environment.set("poolreport_data_poolView", jsonData.data[randomIndex].poolView);
    pm.environment.set("poolreport_data_previousPledge", jsonData.data[randomIndex].previousPledge);
    pm.environment.set("poolreport_data_previousMargin", jsonData.data[randomIndex].previousMargin);
    pm.environment.set("poolreport_data_txHash", jsonData.data[randomIndex].txHash);
    pm.environment.set("poolreport_data_time", jsonData.data[randomIndex].time);
    pm.environment.set("poolreport_data_stakeKeys", jsonData.data[randomIndex].stakeKeys);
    pm.environment.set("poolreport_data_fee", jsonData.data[randomIndex].fee);
    pm.environment.set("poolreport_data_rewardAccount", jsonData.data[randomIndex].rewardAccount);
    pm.environment.set("poolreport_data_vrfKey", jsonData.data[randomIndex].vrfKey);
    pm.environment.set("poolreport_data_pledge", jsonData.data[randomIndex].pledge);
    pm.environment.set("poolreport_data_margin", jsonData.data[randomIndex].margin);
    pm.environment.set("poolreport_data_cost", jsonData.data[randomIndex].cost);
    pm.environment.set("poolreport_data_deposit", jsonData.data[randomIndex].deposit);
});

// Check default size 
if (jsonData.totalItems > 0){
    pm.test("Check Size default", function(){
        pm.expect(jsonData.data.length).to.be.within(1, 100);
    });
};