const jsonData = pm.response.json();

//Compare static value
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(5000);
});

pm.test("Check currentPage value", function () {
    pm.expect(jsonData.currentPage).to.eql(0);
});

//Check name
pm.test("Check name of contributions in field data", function () {
    var arrayOfResponseKeys  = Object.keys(jsonData)
    var myKeysList = ["data", "totalItems", "totalPages", "currentPage","isDataOverSize"];
    for (let i = 0; i < arrayOfResponseKeys.length; i++) {
        pm.expect(arrayOfResponseKeys[i]).to.be.oneOf(myKeysList);
    }
});

if  (jsonData.data.length > 0 && pm.environment.get("pool-report_data_ResStt") === "Not null"){
    //Compare data type
    pm.test("Check data type of the response", () => {
        
        let moment = require ('moment');
        pm.expect(jsonData).to.be.an("object");
        pm.expect(jsonData.totalItems).to.be.a("number");
        pm.expect(jsonData.totalPages).to.be.a("number");
        pm.expect(jsonData.currentPage).to.be.a("number");
        pm.expect(jsonData.data).to.be.an("array");
        pm.expect(jsonData.data[0].epochNo).to.be.a("number");
        pm.expect(jsonData.data[0].time).to.include(moment(jsonData.data[0].time).format('YYYY/MM/DD HH:mm:ss'));
        pm.expect(jsonData.data[0].amount).to.be.a("number");
        pm.expect(jsonData.data[0].rewardAccount).to.be.an("string");
        
    });

    //scenario compare value of reward api detail reward Distribution 1 api - data called from detail Reward Distribution api: /api/v1/pool-report/detail/:reportId/rewards-distribution
    pm.test("Others value exist",function (){
        var epochNo = pm.environment.get("pool_report_data_epochNo");
        let result = jsonData.data.find(a => a.epochNo === epochNo);
        pm.expect(result.time).to.contain(pm.environment.get("pool_report_data_time"));
        pm.expect(result.amount).to.eql(pm.environment.get("pool_report_data_amount"));
        pm.expect(result.rewardAccount).to.eql(pm.environment.get("pool_report_data_rewardAccount"));
        
    });
}

// Check default size 
if (jsonData.totalItems > 0){
    pm.test("Check Size default", function(){
        pm.expect(jsonData.data.length).to.be.within(1, 100);
    });
};