var jsonData = pm.response.json();
var stt = 200
var res_time = 5000
var current_page = 0

//Compare static data
pm.test("Status code is 200", function () {
    pm.response.to.have.status(stt);
});

pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(res_time);
});

pm.test("Compare Currentpage", function () {
    pm.expect(jsonData.currentPage).to.eql(current_page);
});

//Compare data type
pm.test("Check data type of id", () => {
    pm.expect(jsonData.data[0].id).to.be.a("number");
});

pm.test("Check data type of poolId", () => {
    pm.expect(jsonData.data[0].poolId).to.be.a("string");
});

pm.test("Check data type of poolName", () => {
    if (jsonData.poolName) {
        pm.expect(typeof jsonData.data[0].poolName).to.be.oneOf(['object', 'string']);
    }
});

pm.test("Check data type of tickerName", () => {
    if (jsonData.tickerName) {
        pm.expect(typeof jsonData.data[0].tickerName).to.be.oneOf(['object', 'string']);
    }
});

pm.test("Check data type of poolSize", () => {
    pm.expect(jsonData.data[0].poolSize).to.be.a("number");
});

if (!jsonData.data[0]?.reward) {
    pm.test("Check data type of reward", () => true);
}
else {
    pm.test("Check data type of reward", () => {
        pm.expect(jsonData.data[0].reward).to.be.a("number");
    });
}

pm.test("Check data type of pledge", () => {
    pm.expect(jsonData.data[0].pledge).to.be.a("number");
});

pm.test("Check data type of saturation", () => {
    pm.expect(jsonData.data[0].saturation).to.be.a("number");
});

if (!jsonData.data[0]?.stakeLimit) {
    pm.test("Check data type of stakeLimit", () => true)
}
else {
    pm.test("Check data type of stakeLimit", () => {
        pm.expect(typeof jsonData.data[0].stakeLimit).to.be.oneOf(['object', 'number']);
    });
}

if (!jsonData.data[0]?.reserves) {
    pm.test("Check data type of reserves", () => true)
}
else {
    pm.test("Check data type of reserves", () => {
        pm.expect(typeof jsonData.data[0].reserves).to.be.oneOf(['object', 'number']);
    });
}

if (!jsonData.data[0]?.kparam) {
    pm.test("Check data type of kparam", () => true)
}
else {
    pm.test("Check data type of kparam", () => {
        pm.expect(typeof jsonData.data[0].kparam).to.be.oneOf(['object', 'number']);
    });
}

pm.test("Check data type of epochBlock", () => {
    pm.expect(jsonData.data[0].epochBlock).to.be.a("number");
});

pm.test("Check data type of lifetimeBlock", () => {
    pm.expect(jsonData.data[0].lifetimeBlock).to.be.a("number");
});

pm.test("Check data type of totalItems", () => {
    pm.expect(jsonData.totalItems).to.be.a("number");
});

pm.test("Check data type of totalPages", () => {
    pm.expect(jsonData.totalPages).to.be.a("number");
});

// Check default size 
if (jsonData.totalItems > 0) {
    pm.test("Check Size default", function () {
        pm.expect(jsonData.data.length).to.be.within(1, 100);
    });
};