var jsonData = pm.response.json();

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(5000);
});

pm.test("Check currentPage value", function () {
    pm.expect(jsonData.currentPage).to.eql(0);
});

//Compare data type
pm.test("Check data type of hash", () => {
    pm.expect(jsonData.data[0].hash).to.be.a("string");
});

pm.test("Check data type of blockNo", () => {
    pm.expect(jsonData.data[0].blockNo).to.be.a("number");
});

pm.test("Check data type of blockHash", () => {
    pm.expect(jsonData.data[0].blockHash).to.be.a("string");
});

pm.test("Check data type of epochNo", () => {
    pm.expect(jsonData.data[0].epochNo).to.be.a("number");
});

pm.test("Check data type of epochSlotNo", () => {
    pm.expect(jsonData.data[0].epochSlotNo).to.be.a("number");
});

pm.test("Check data type of slot", () => {
    pm.expect(jsonData.data[0].slot).to.be.a("number");
});

pm.test("Check data type of time", () => {
    pm.expect(jsonData.data[0].time).to.be.a("string");
});

pm.test("Check data type of addressesInput", () => {
    pm.expect(jsonData.data[0].addressesInput).to.be.a("array");
});

pm.test("Check data type of addressesOutput", () => {
    pm.expect(jsonData.data[0].addressesOutput).to.be.a("array");
});

pm.test("Check data type of fee", () => {
    pm.expect(jsonData.data[0].fee).to.be.a("number");
});

pm.test("Check data type of totalOutput", () => {
    pm.expect(jsonData.data[0].totalOutput).to.be.a("number");
});

pm.test("Check data type of totalItems", () => {
    pm.expect(jsonData.totalItems).to.be.a("number");
});

pm.test("Check data type of totalPages", () => {
    pm.expect(jsonData.totalPages).to.be.a("number");
});

pm.test("Check data type of balance", function () {
    if (jsonData.data[0].balance) {
        console.log(jsonData.data[0].balance)
        pm.expect(typeof jsonData.data[0].balance).to.be.oneOf(['object', 'number']);
    }
});

pm.test("Check data type of tokens", () => {
    pm.expect(jsonData.data[0].tokens).to.be.a("array");
});

pm.test("Check data type of totalItems", () => {
    pm.expect(jsonData.totalItems).to.be.a("number");
});

pm.test("Check data type of totalPages", () => {
    pm.expect(jsonData.totalPages).to.be.a("number");
});

//Check scenario compare data Filter transaction by token api with Filter token api - Data called from Filter token api: /api/v1/tokens
pm.test("Compare totalItems with txCount of filter token", function () {
    pm.expect(jsonData.totalItems).to.eql(pm.environment.get("token_data_txCount"));
});

// Check default size 
if (jsonData.totalItems > 0) {
    pm.test("Check Size default", function () {
        pm.expect(jsonData.data.length).to.be.within(1, 100);
    });
};