var jsonData = pm.response.json();
var stt = 200
var res_time = 5000

//Compare static data
pm.test("Status code is 200", function () {
    pm.response.to.have.status(stt);
});

pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(res_time);
});


//Compare format data type
pm.test("Check data type of the response", () => {
    let moment = require ('moment');
    pm.expect(jsonData).to.be.an("object");
    pm.expect(jsonData.txHash).to.be.a("string");
    pm.expect(jsonData.fee).to.be.a("number");
    pm.expect(jsonData.deposit).to.be.a("number");
    pm.expect(jsonData.time).to.include(moment(jsonData.time).format('YYYY/MM/DD HH:mm:ss'));
    pm.expect(jsonData.joinDepositPaid).to.be.a("boolean");
});

//Scenario Compare api get Stake De Registrations with api Get stake key de-registration transaction detail
//all variable get from API /api/v1/stake-lifecycle/{{stakinglifecycle_stakeKey}}/de-registrations(get Stake De Registrations)
pm.test("Compare value of api get Stake De Registrations with api Get stake key de-registration transaction detail", function () {
    pm.expect(jsonData.txHash).to.include(pm.environment.get("getDeRegistrations_data_txHash"));
    pm.expect(jsonData.fee).to.eql(pm.environment.get("getDeRegistrations_data_fee"));
    pm.expect(jsonData.deposit).to.eql(pm.environment.get("getDeRegistrations_data_deposit"));
    pm.expect(jsonData.time).to.contain(pm.environment.get("getDeRegistrations_data_time"));
});
