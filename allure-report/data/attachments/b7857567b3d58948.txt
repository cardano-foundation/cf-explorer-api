var jsonData = pm.response.json();
var stt = 200
var res_time = 5000

//Compare static data
pm.test("Status code is 200", function () {
    pm.response.to.have.status(stt);
});

pm.test("Response time is less than 5000ms", function () {
    pm.expect(pm.response.responseTime).to.be.below(res_time);
});

pm.test("Check currentPage value", function () {
    pm.expect(jsonData.currentPage).to.eql(0);
});

//Compare format data type
pm.test("Check data type of the response", () => {
    pm.expect(jsonData).to.be.an("object");
    pm.expect(jsonData.totalItems).to.be.a("number");
    pm.expect(jsonData.totalPages).to.be.a("number");
    pm.expect(jsonData.currentPage).to.be.a("number");
    pm.expect(jsonData.data).to.be.an("array");
    pm.expect(jsonData.data[0].scriptHash).to.be.a("string");
    if(jsonData.data[0].before){
        let moment = require ('moment');
        pm.expect(jsonData.data[0].before).to.include(moment(jsonData.data[0].before).format('YYYY/MM/DD HH:mm:ss'));
    }
    if(jsonData.data[0].after){
        let moment = require ('moment');
        pm.expect(jsonData.data[0].after).to.include(moment(jsonData.data[0].after).format('YYYY/MM/DD HH:mm:ss'));
    }
    pm.expect(jsonData.data[0].isMultiSig).to.be.a("boolean");
    pm.expect(jsonData.data[0].numberOfTokens).to.be.a("number");
    pm.expect(jsonData.data[0].numberOfAssetHolders).to.be.a("number");
    pm.expect(jsonData.data[0].tokens).to.be.an("array");
});

//Random value
pm.test("Get random data",function(){
    var randomIndex = Math.floor(Math.random() * (jsonData.data.length-1));
    pm.environment.set("native_scriptHash", jsonData.data[randomIndex].scriptHash);
    pm.environment.set("native_numberOfTokens", jsonData.data[randomIndex].numberOfTokens);
    pm.environment.set("native_numberOfAssetHolders", jsonData.data[randomIndex].numberOfAssetHolders);
});



